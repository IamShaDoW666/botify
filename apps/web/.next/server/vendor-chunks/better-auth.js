"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/better-auth";
exports.ids = ["vendor-chunks/better-auth"];
exports.modules = {

/***/ "(action-browser)/../../node_modules/better-auth/dist/adapters/prisma-adapter/index.mjs":
/*!*****************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/adapters/prisma-adapter/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prismaAdapter: () => (/* binding */ prismaAdapter)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/better-auth.gBl3F_xa.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/better-auth.tB5eU6EY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/better-auth.DORkW_Ge.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/better-auth.DBGfIDnh.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/random */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! better-call */ \"(action-browser)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../shared/better-auth.B4Qoxdgc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst prismaAdapter = (prisma, config) => (0,_shared_better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n  config: {\n    adapterId: \"prisma\",\n    adapterName: \"Prisma Adapter\",\n    usePlural: config.usePlural ?? false,\n    debugLogs: config.debugLogs ?? false\n  },\n  adapter: ({ getFieldName }) => {\n    const db = prisma;\n    const convertSelect = (select, model) => {\n      if (!select || !model) return void 0;\n      return select.reduce((prev, cur) => {\n        return {\n          ...prev,\n          [getFieldName({ model, field: cur })]: true\n        };\n      }, {});\n    };\n    function operatorToPrismaOperator(operator) {\n      switch (operator) {\n        case \"starts_with\":\n          return \"startsWith\";\n        case \"ends_with\":\n          return \"endsWith\";\n        case \"ne\":\n          return \"not\";\n        default:\n          return operator;\n      }\n    }\n    const convertWhereClause = (model, where) => {\n      if (!where) return {};\n      if (where.length === 1) {\n        const w = where[0];\n        if (!w) {\n          return;\n        }\n        return {\n          [getFieldName({ model, field: w.field })]: w.operator === \"eq\" || !w.operator ? w.value : {\n            [operatorToPrismaOperator(w.operator)]: w.value\n          }\n        };\n      }\n      const and = where.filter((w) => w.connector === \"AND\" || !w.connector);\n      const or = where.filter((w) => w.connector === \"OR\");\n      const andClause = and.map((w) => {\n        return {\n          [getFieldName({ model, field: w.field })]: w.operator === \"eq\" || !w.operator ? w.value : {\n            [operatorToPrismaOperator(w.operator)]: w.value\n          }\n        };\n      });\n      const orClause = or.map((w) => {\n        return {\n          [getFieldName({ model, field: w.field })]: w.operator === \"eq\" || !w.operator ? w.value : {\n            [operatorToPrismaOperator(w.operator)]: w.value\n          }\n        };\n      });\n      return {\n        ...andClause.length ? { AND: andClause } : {},\n        ...orClause.length ? { OR: orClause } : {}\n      };\n    };\n    return {\n      async create({ model, data: values, select }) {\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].create({\n          data: values,\n          select: convertSelect(select, model)\n        });\n      },\n      async findOne({ model, where, select }) {\n        const whereClause = convertWhereClause(model, where);\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].findFirst({\n          where: whereClause,\n          select: convertSelect(select, model)\n        });\n      },\n      async findMany({ model, where, limit, offset, sortBy }) {\n        const whereClause = convertWhereClause(model, where);\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].findMany({\n          where: whereClause,\n          take: limit || 100,\n          skip: offset || 0,\n          ...sortBy?.field ? {\n            orderBy: {\n              [getFieldName({ model, field: sortBy.field })]: sortBy.direction === \"desc\" ? \"desc\" : \"asc\"\n            }\n          } : {}\n        });\n      },\n      async count({ model, where }) {\n        const whereClause = convertWhereClause(model, where);\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].count({\n          where: whereClause\n        });\n      },\n      async update({ model, where, update }) {\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        const whereClause = convertWhereClause(model, where);\n        return await db[model].update({\n          where: whereClause,\n          data: update\n        });\n      },\n      async updateMany({ model, where, update }) {\n        const whereClause = convertWhereClause(model, where);\n        const result = await db[model].updateMany({\n          where: whereClause,\n          data: update\n        });\n        return result ? result.count : 0;\n      },\n      async delete({ model, where }) {\n        const whereClause = convertWhereClause(model, where);\n        try {\n          await db[model].delete({\n            where: whereClause\n          });\n        } catch (e) {\n        }\n      },\n      async deleteMany({ model, where }) {\n        const whereClause = convertWhereClause(model, where);\n        const result = await db[model].deleteMany({\n          where: whereClause\n        });\n        return result ? result.count : 0;\n      },\n      options: config\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/adapters/prisma-adapter/index.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/api/index.mjs":
/*!*********************************************************!*\
  !*** ../../node_modules/better-auth/dist/api/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: () => (/* reexport safe */ better_call__WEBPACK_IMPORTED_MODULE_0__.APIError),\n/* harmony export */   accountInfo: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.E),\n/* harmony export */   callbackOAuth: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.a0),\n/* harmony export */   changeEmail: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.V),\n/* harmony export */   changePassword: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.U),\n/* harmony export */   createAuthEndpoint: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.j),\n/* harmony export */   createAuthMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.i),\n/* harmony export */   createEmailVerificationToken: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.w),\n/* harmony export */   deleteUser: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.S),\n/* harmony export */   deleteUserCallback: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.J),\n/* harmony export */   error: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.C),\n/* harmony export */   forgetPassword: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Z),\n/* harmony export */   forgetPasswordCallback: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.R),\n/* harmony export */   freshSessionMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.n),\n/* harmony export */   getAccessToken: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.F),\n/* harmony export */   getEndpoints: () => (/* binding */ getEndpoints),\n/* harmony export */   getSession: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.m),\n/* harmony export */   getSessionFromCtx: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.k),\n/* harmony export */   linkSocialAccount: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.L),\n/* harmony export */   listSessions: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.y),\n/* harmony export */   listUserAccounts: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.K),\n/* harmony export */   ok: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.D),\n/* harmony export */   optionsMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.q),\n/* harmony export */   originCheck: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.o),\n/* harmony export */   originCheckMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.A),\n/* harmony export */   refreshToken: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.G),\n/* harmony export */   requestOnlySessionMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.a2),\n/* harmony export */   requestPasswordReset: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Q),\n/* harmony export */   requestPasswordResetCallback: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.P),\n/* harmony export */   resetPassword: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Y),\n/* harmony export */   revokeOtherSessions: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.M),\n/* harmony export */   revokeSession: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.O),\n/* harmony export */   revokeSessions: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.N),\n/* harmony export */   router: () => (/* binding */ router),\n/* harmony export */   sendVerificationEmail: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.W),\n/* harmony export */   sendVerificationEmailFn: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.u),\n/* harmony export */   sessionMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.l),\n/* harmony export */   setPassword: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.T),\n/* harmony export */   signInEmail: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__._),\n/* harmony export */   signInSocial: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.a1),\n/* harmony export */   signOut: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.$),\n/* harmony export */   signUpEmail: () => (/* binding */ signUpEmail),\n/* harmony export */   unlinkAccount: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.I),\n/* harmony export */   updateUser: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.z),\n/* harmony export */   verifyEmail: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.X)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(action-browser)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/better-auth.z3dsxLxE.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! zod/v4 */ \"(action-browser)/../../node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _shared_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/better-auth.n2KFGwjY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/better-auth.8zoxzg-F.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/better-auth.DBGfIDnh.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _shared_better_auth_DcfNPS8q_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/better-auth.DcfNPS8q.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! defu */ \"(action-browser)/../../node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../crypto/index.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @better-auth/utils/random */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @better-fetch/fetch */ \"(action-browser)/../../node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../shared/better-auth.VTXNLFMT.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../shared/better-auth.tB5eU6EY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/binary.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst signUpEmail = () => (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(\n  \"/sign-up/email\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_22__.record(zod_v4__WEBPACK_IMPORTED_MODULE_22__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_22__.any()),\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Sign up a user using email and password\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  email: {\n                    type: \"string\",\n                    description: \"The email of the user\"\n                  },\n                  password: {\n                    type: \"string\",\n                    description: \"The password of the user\"\n                  },\n                  image: {\n                    type: \"string\",\n                    description: \"The profile image URL of the user\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\"\n                  },\n                  rememberMe: {\n                    type: \"boolean\",\n                    description: \"If this is false, the session will not be remembered. Default is `true`.\"\n                  }\n                },\n                required: [\"name\", \"email\", \"password\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Successfully created user\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      description: \"Authentication token for the session\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                  // token is optional\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.enabled || ctx.context.options.emailAndPassword?.disableSignUp) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Email and password sign up is not enabled\"\n      });\n    }\n    const body = ctx.body;\n    const {\n      name,\n      email,\n      password,\n      image,\n      callbackURL,\n      rememberMe,\n      ...additionalFields\n    } = body;\n    const isValidEmail = zod_v4__WEBPACK_IMPORTED_MODULE_22__.email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.INVALID_EMAIL\n      });\n    }\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (password.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (password.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.PASSWORD_TOO_LONG\n      });\n    }\n    const dbUser = await ctx.context.internalAdapter.findUserByEmail(email);\n    if (dbUser?.user) {\n      ctx.context.logger.info(`Sign-up attempt for existing email: ${email}`);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.USER_ALREADY_EXISTS\n      });\n    }\n    const additionalData = (0,_shared_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_3__.f)(\n      ctx.context.options,\n      additionalFields\n    );\n    const hash = await ctx.context.password.hash(password);\n    let createdUser;\n    try {\n      createdUser = await ctx.context.internalAdapter.createUser(\n        {\n          email: email.toLowerCase(),\n          name,\n          image,\n          ...additionalData,\n          emailVerified: false\n        },\n        ctx\n      );\n      if (!createdUser) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER\n        });\n      }\n    } catch (e) {\n      if (_shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_4__.b) {\n        ctx.context.logger.error(\"Failed to create user\", e);\n      }\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n        throw e;\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER,\n        details: e\n      });\n    }\n    if (!createdUser) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER\n      });\n    }\n    await ctx.context.internalAdapter.linkAccount(\n      {\n        userId: createdUser.id,\n        providerId: \"credential\",\n        accountId: createdUser.id,\n        password: hash\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.sendOnSignUp || ctx.context.options.emailAndPassword.requireEmailVerification) {\n      const token = await (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\n        ctx.context.secret,\n        createdUser.email,\n        void 0,\n        ctx.context.options.emailVerification?.expiresIn\n      );\n      const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${body.callbackURL || \"/\"}`;\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: createdUser,\n          url,\n          token\n        },\n        ctx.request\n      );\n    }\n    if (ctx.context.options.emailAndPassword.autoSignIn === false || ctx.context.options.emailAndPassword.requireEmailVerification) {\n      return ctx.json({\n        token: null,\n        user: {\n          id: createdUser.id,\n          email: createdUser.email,\n          name: createdUser.name,\n          image: createdUser.image,\n          emailVerified: createdUser.emailVerified,\n          createdAt: createdUser.createdAt,\n          updatedAt: createdUser.updatedAt\n        }\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      createdUser.id,\n      ctx,\n      rememberMe === false\n    );\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_2__.setSessionCookie)(\n      ctx,\n      {\n        session,\n        user: createdUser\n      },\n      rememberMe === false\n    );\n    return ctx.json({\n      token: session.token,\n      user: {\n        id: createdUser.id,\n        email: createdUser.email,\n        name: createdUser.name,\n        image: createdUser.image,\n        emailVerified: createdUser.emailVerified,\n        createdAt: createdUser.createdAt,\n        updatedAt: createdUser.updatedAt\n      }\n    });\n  }\n);\n\nfunction shouldRateLimit(max, window, rateLimitData) {\n  const now = Date.now();\n  const windowInMs = window * 1e3;\n  const timeSinceLastRequest = now - rateLimitData.lastRequest;\n  return timeSinceLastRequest < windowInMs && rateLimitData.count >= max;\n}\nfunction rateLimitResponse(retryAfter) {\n  return new Response(\n    JSON.stringify({\n      message: \"Too many requests. Please try again later.\"\n    }),\n    {\n      status: 429,\n      statusText: \"Too Many Requests\",\n      headers: {\n        \"X-Retry-After\": retryAfter.toString()\n      }\n    }\n  );\n}\nfunction getRetryAfter(lastRequest, window) {\n  const now = Date.now();\n  const windowInMs = window * 1e3;\n  return Math.ceil((lastRequest + windowInMs - now) / 1e3);\n}\nfunction createDBStorage(ctx) {\n  const model = \"rateLimit\";\n  const db = ctx.adapter;\n  return {\n    get: async (key) => {\n      const res = await db.findMany({\n        model,\n        where: [{ field: \"key\", value: key }]\n      });\n      const data = res[0];\n      if (typeof data?.lastRequest === \"bigint\") {\n        data.lastRequest = Number(data.lastRequest);\n      }\n      return data;\n    },\n    set: async (key, value, _update) => {\n      try {\n        if (_update) {\n          await db.updateMany({\n            model,\n            where: [{ field: \"key\", value: key }],\n            update: {\n              count: value.count,\n              lastRequest: value.lastRequest\n            }\n          });\n        } else {\n          await db.create({\n            model,\n            data: {\n              key,\n              count: value.count,\n              lastRequest: value.lastRequest\n            }\n          });\n        }\n      } catch (e) {\n        ctx.logger.error(\"Error setting rate limit\", e);\n      }\n    }\n  };\n}\nconst memory = /* @__PURE__ */ new Map();\nfunction getRateLimitStorage(ctx) {\n  if (ctx.options.rateLimit?.customStorage) {\n    return ctx.options.rateLimit.customStorage;\n  }\n  if (ctx.rateLimit.storage === \"secondary-storage\") {\n    return {\n      get: async (key) => {\n        const stringified = await ctx.options.secondaryStorage?.get(key);\n        return stringified ? JSON.parse(stringified) : void 0;\n      },\n      set: async (key, value) => {\n        await ctx.options.secondaryStorage?.set?.(key, JSON.stringify(value));\n      }\n    };\n  }\n  const storage = ctx.rateLimit.storage;\n  if (storage === \"memory\") {\n    return {\n      async get(key) {\n        return memory.get(key);\n      },\n      async set(key, value, _update) {\n        memory.set(key, value);\n      }\n    };\n  }\n  return createDBStorage(ctx);\n}\nasync function onRequestRateLimit(req, ctx) {\n  if (!ctx.rateLimit.enabled) {\n    return;\n  }\n  const path = new URL(req.url).pathname.replace(\n    ctx.options.basePath || \"/api/auth\",\n    \"\"\n  );\n  let window = ctx.rateLimit.window;\n  let max = ctx.rateLimit.max;\n  const ip = (0,_shared_better_auth_DcfNPS8q_mjs__WEBPACK_IMPORTED_MODULE_6__.g)(req, ctx.options);\n  if (!ip) {\n    console.warn(\"No IP address found for rate limiting\");\n    return;\n  }\n  const key = ip + path;\n  const specialRules = getDefaultSpecialRules();\n  const specialRule = specialRules.find((rule) => rule.pathMatcher(path));\n  if (specialRule) {\n    window = specialRule.window;\n    max = specialRule.max;\n  }\n  for (const plugin of ctx.options.plugins || []) {\n    if (plugin.rateLimit) {\n      const matchedRule = plugin.rateLimit.find(\n        (rule) => rule.pathMatcher(path)\n      );\n      if (matchedRule) {\n        window = matchedRule.window;\n        max = matchedRule.max;\n        break;\n      }\n    }\n  }\n  if (ctx.rateLimit.customRules) {\n    const _path = Object.keys(ctx.rateLimit.customRules).find((p) => {\n      if (p.includes(\"*\")) {\n        const isMatch = (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(p)(path);\n        return isMatch;\n      }\n      return p === path;\n    });\n    if (_path) {\n      const customRule = ctx.rateLimit.customRules[_path];\n      const resolved = typeof customRule === \"function\" ? await customRule(req) : customRule;\n      if (resolved) {\n        window = resolved.window;\n        max = resolved.max;\n      }\n    }\n  }\n  const storage = getRateLimitStorage(ctx);\n  const data = await storage.get(key);\n  const now = Date.now();\n  if (!data) {\n    await storage.set(key, {\n      key,\n      count: 1,\n      lastRequest: now\n    });\n  } else {\n    const timeSinceLastRequest = now - data.lastRequest;\n    if (shouldRateLimit(max, window, data)) {\n      const retryAfter = getRetryAfter(data.lastRequest, window);\n      return rateLimitResponse(retryAfter);\n    } else if (timeSinceLastRequest > window * 1e3) {\n      await storage.set(\n        key,\n        {\n          ...data,\n          count: 1,\n          lastRequest: now\n        },\n        true\n      );\n    } else {\n      await storage.set(\n        key,\n        {\n          ...data,\n          count: data.count + 1,\n          lastRequest: now\n        },\n        true\n      );\n    }\n  }\n}\nfunction getDefaultSpecialRules() {\n  const specialRules = [\n    {\n      pathMatcher(path) {\n        return path.startsWith(\"/sign-in\") || path.startsWith(\"/sign-up\") || path.startsWith(\"/change-password\") || path.startsWith(\"/change-email\");\n      },\n      window: 10,\n      max: 3\n    }\n  ];\n  return specialRules;\n}\n\nfunction toAuthEndpoints(endpoints, ctx) {\n  const api = {};\n  for (const [key, endpoint] of Object.entries(endpoints)) {\n    api[key] = async (context) => {\n      const authContext = await ctx;\n      let internalContext = {\n        ...context,\n        context: {\n          ...authContext,\n          returned: void 0,\n          responseHeaders: void 0,\n          session: null\n        },\n        path: endpoint.path,\n        headers: context?.headers ? new Headers(context?.headers) : void 0\n      };\n      const { beforeHooks, afterHooks } = getHooks(authContext);\n      const before = await runBeforeHooks(internalContext, beforeHooks);\n      if (\"context\" in before && before.context && typeof before.context === \"object\") {\n        const { headers, ...rest } = before.context;\n        if (headers) {\n          headers.forEach((value, key2) => {\n            internalContext.headers.set(key2, value);\n          });\n        }\n        internalContext = (0,defu__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(rest, internalContext);\n      } else if (before) {\n        return before;\n      }\n      internalContext.asResponse = false;\n      internalContext.returnHeaders = true;\n      const result = await endpoint(internalContext).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      internalContext.context.returned = result.response;\n      internalContext.context.responseHeaders = result.headers;\n      const after = await runAfterHooks(internalContext, afterHooks);\n      if (after.response) {\n        result.response = after.response;\n      }\n      if (result.response instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError && !context?.asResponse) {\n        throw result.response;\n      }\n      const response = context?.asResponse ? (0,better_call__WEBPACK_IMPORTED_MODULE_0__.toResponse)(result.response, {\n        headers: result.headers\n      }) : context?.returnHeaders ? {\n        headers: result.headers,\n        response: result.response\n      } : result.response;\n      return response;\n    };\n    api[key].path = endpoint.path;\n    api[key].options = endpoint.options;\n  }\n  return api;\n}\nasync function runBeforeHooks(context, hooks) {\n  let modifiedContext = {};\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler({\n        ...context,\n        returnHeaders: false\n      });\n      if (result && typeof result === \"object\") {\n        if (\"context\" in result && typeof result.context === \"object\") {\n          const { headers, ...rest } = result.context;\n          if (headers instanceof Headers) {\n            if (modifiedContext.headers) {\n              headers.forEach((value, key) => {\n                modifiedContext.headers?.set(key, value);\n              });\n            } else {\n              modifiedContext.headers = headers;\n            }\n          }\n          modifiedContext = (0,defu__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(rest, modifiedContext);\n          continue;\n        }\n        return result;\n      }\n    }\n  }\n  return { context: modifiedContext };\n}\nasync function runAfterHooks(context, hooks) {\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler(context).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      if (result.headers) {\n        result.headers.forEach((value, key) => {\n          if (!context.context.responseHeaders) {\n            context.context.responseHeaders = new Headers({\n              [key]: value\n            });\n          } else {\n            if (key.toLowerCase() === \"set-cookie\") {\n              context.context.responseHeaders.append(key, value);\n            } else {\n              context.context.responseHeaders.set(key, value);\n            }\n          }\n        });\n      }\n      if (result.response) {\n        context.context.returned = result.response;\n      }\n    }\n  }\n  return {\n    response: context.context.returned,\n    headers: context.context.responseHeaders\n  };\n}\nfunction getHooks(authContext) {\n  const plugins = authContext.options.plugins || [];\n  const beforeHooks = [];\n  const afterHooks = [];\n  if (authContext.options.hooks?.before) {\n    beforeHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.before\n    });\n  }\n  if (authContext.options.hooks?.after) {\n    afterHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.after\n    });\n  }\n  const pluginBeforeHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.before) {\n      return plugin.hooks.before;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  const pluginAfterHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.after) {\n      return plugin.hooks.after;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  pluginBeforeHooks.length && beforeHooks.push(...pluginBeforeHooks);\n  pluginAfterHooks.length && afterHooks.push(...pluginAfterHooks);\n  return {\n    beforeHooks,\n    afterHooks\n  };\n}\n\nfunction getEndpoints(ctx, options) {\n  const pluginEndpoints = options.plugins?.reduce(\n    (acc, plugin) => {\n      return {\n        ...acc,\n        ...plugin.endpoints\n      };\n    },\n    {}\n  );\n  const middlewares = options.plugins?.map(\n    (plugin) => plugin.middlewares?.map((m) => {\n      const middleware = async (context) => {\n        return m.middleware({\n          ...context,\n          context: {\n            ...ctx,\n            ...context.context\n          }\n        });\n      };\n      middleware.options = m.middleware.options;\n      return {\n        path: m.path,\n        middleware\n      };\n    })\n  ).filter((plugin) => plugin !== void 0).flat() || [];\n  const baseEndpoints = {\n    signInSocial: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.a1,\n    callbackOAuth: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.a0,\n    getSession: (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(),\n    signOut: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.$,\n    signUpEmail: signUpEmail(),\n    signInEmail: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__._,\n    forgetPassword: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Z,\n    resetPassword: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Y,\n    verifyEmail: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.X,\n    sendVerificationEmail: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.W,\n    changeEmail: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.V,\n    changePassword: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.U,\n    setPassword: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.T,\n    updateUser: (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.z)(),\n    deleteUser: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.S,\n    forgetPasswordCallback: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.R,\n    requestPasswordReset: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Q,\n    requestPasswordResetCallback: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.P,\n    listSessions: (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.y)(),\n    revokeSession: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.O,\n    revokeSessions: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.N,\n    revokeOtherSessions: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.M,\n    linkSocialAccount: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.L,\n    listUserAccounts: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.K,\n    deleteUserCallback: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.J,\n    unlinkAccount: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.I,\n    refreshToken: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.G,\n    getAccessToken: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.F,\n    accountInfo: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.E\n  };\n  const endpoints = {\n    ...baseEndpoints,\n    ...pluginEndpoints,\n    ok: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.D,\n    error: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.C\n  };\n  const api = toAuthEndpoints(endpoints, ctx);\n  return {\n    api,\n    middlewares\n  };\n}\nconst router = (ctx, options) => {\n  const { api, middlewares } = getEndpoints(ctx, options);\n  const basePath = new URL(ctx.baseURL).pathname;\n  return (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createRouter)(api, {\n    routerContext: ctx,\n    openapi: {\n      disabled: true\n    },\n    basePath,\n    routerMiddleware: [\n      {\n        path: \"/**\",\n        middleware: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.A\n      },\n      ...middlewares\n    ],\n    async onRequest(req) {\n      const disabledPaths = ctx.options.disabledPaths || [];\n      const path = new URL(req.url).pathname.replace(basePath, \"\");\n      if (disabledPaths.includes(path)) {\n        return new Response(\"Not Found\", { status: 404 });\n      }\n      for (const plugin of ctx.options.plugins || []) {\n        if (plugin.onRequest) {\n          const response = await plugin.onRequest(req, ctx);\n          if (response && \"response\" in response) {\n            return response.response;\n          }\n        }\n      }\n      return onRequestRateLimit(req, ctx);\n    },\n    async onResponse(res) {\n      for (const plugin of ctx.options.plugins || []) {\n        if (plugin.onResponse) {\n          const response = await plugin.onResponse(res, ctx);\n          if (response) {\n            return response.response;\n          }\n        }\n      }\n      return res;\n    },\n    onError(e) {\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError && e.status === \"FOUND\") {\n        return;\n      }\n      if (options.onAPIError?.throw) {\n        throw e;\n      }\n      if (options.onAPIError?.onError) {\n        options.onAPIError.onError(e, ctx);\n        return;\n      }\n      const optLogLevel = options.logger?.level;\n      const log = optLogLevel === \"error\" || optLogLevel === \"warn\" || optLogLevel === \"debug\" ? _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_5__.a : void 0;\n      if (options.logger?.disabled !== true) {\n        if (e && typeof e === \"object\" && \"message\" in e && typeof e.message === \"string\") {\n          if (e.message.includes(\"no column\") || e.message.includes(\"column\") || e.message.includes(\"relation\") || e.message.includes(\"table\") || e.message.includes(\"does not exist\")) {\n            ctx.logger?.error(e.message);\n            return;\n          }\n        }\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          if (e.status === \"INTERNAL_SERVER_ERROR\") {\n            ctx.logger.error(e.status, e);\n          }\n          log?.error(e.message);\n        } else {\n          ctx.logger?.error(\n            e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n            e\n          );\n        }\n      }\n    }\n  });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/api/index.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs":
/*!*************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BunSqliteAdapter: () => (/* binding */ BunSqliteAdapter),\n/* harmony export */   BunSqliteDialect: () => (/* binding */ BunSqliteDialect),\n/* harmony export */   BunSqliteDriver: () => (/* binding */ BunSqliteDriver),\n/* harmony export */   BunSqliteIntrospector: () => (/* binding */ BunSqliteIntrospector),\n/* harmony export */   BunSqliteQueryCompiler: () => (/* binding */ BunSqliteQueryCompiler)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kysely */ \"(action-browser)/../../node_modules/kysely/dist/esm/query-compiler/compiled-query.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(action-browser)/../../node_modules/kysely/dist/esm/migration/migrator.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(action-browser)/../../node_modules/kysely/dist/esm/raw-builder/sql.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(action-browser)/../../node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js\");\n\n\nclass BunSqliteAdapter {\n  get supportsCreateIfNotExists() {\n    return true;\n  }\n  get supportsTransactionalDdl() {\n    return false;\n  }\n  get supportsReturning() {\n    return true;\n  }\n  async acquireMigrationLock() {\n  }\n  async releaseMigrationLock() {\n  }\n  get supportsOutput() {\n    return true;\n  }\n}\nclass BunSqliteDriver {\n  #config;\n  #connectionMutex = new ConnectionMutex();\n  #db;\n  #connection;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  async init() {\n    this.#db = this.#config.database;\n    this.#connection = new BunSqliteConnection(this.#db);\n    if (this.#config.onCreateConnection) {\n      await this.#config.onCreateConnection(this.#connection);\n    }\n  }\n  async acquireConnection() {\n    await this.#connectionMutex.lock();\n    return this.#connection;\n  }\n  async beginTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"begin\"));\n  }\n  async commitTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"commit\"));\n  }\n  async rollbackTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"rollback\"));\n  }\n  async releaseConnection() {\n    this.#connectionMutex.unlock();\n  }\n  async destroy() {\n    this.#db?.close();\n  }\n}\nclass BunSqliteConnection {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  executeQuery(compiledQuery) {\n    const { sql: sql2, parameters } = compiledQuery;\n    const stmt = this.#db.prepare(sql2);\n    return Promise.resolve({\n      rows: stmt.all(parameters)\n    });\n  }\n  async *streamQuery() {\n    throw new Error(\"Streaming query is not supported by SQLite driver.\");\n  }\n}\nclass ConnectionMutex {\n  #promise;\n  #resolve;\n  async lock() {\n    while (this.#promise) {\n      await this.#promise;\n    }\n    this.#promise = new Promise((resolve) => {\n      this.#resolve = resolve;\n    });\n  }\n  unlock() {\n    const resolve = this.#resolve;\n    this.#promise = void 0;\n    this.#resolve = void 0;\n    resolve?.();\n  }\n}\nclass BunSqliteIntrospector {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  async getSchemas() {\n    return [];\n  }\n  async getTables(options = { withInternalKyselyTables: false }) {\n    let query = this.#db.selectFrom(\"sqlite_schema\").where(\"type\", \"=\", \"table\").where(\"name\", \"not like\", \"sqlite_%\").select(\"name\").$castTo();\n    if (!options.withInternalKyselyTables) {\n      query = query.where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_TABLE).where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_LOCK_TABLE);\n    }\n    const tables = await query.execute();\n    return Promise.all(tables.map(({ name }) => this.#getTableMetadata(name)));\n  }\n  async getMetadata(options) {\n    return {\n      tables: await this.getTables(options)\n    };\n  }\n  async #getTableMetadata(table) {\n    const db = this.#db;\n    const createSql = await db.selectFrom(\"sqlite_master\").where(\"name\", \"=\", table).select(\"sql\").$castTo().execute();\n    const autoIncrementCol = createSql[0]?.sql?.split(/[\\(\\),]/)?.find((it) => it.toLowerCase().includes(\"autoincrement\"))?.split(/\\s+/)?.[0]?.replace(/[\"`]/g, \"\");\n    const columns = await db.selectFrom(\n      (0,kysely__WEBPACK_IMPORTED_MODULE_2__.sql)`pragma_table_info(${table})`.as(\"table_info\")\n    ).select([\"name\", \"type\", \"notnull\", \"dflt_value\"]).execute();\n    return {\n      name: table,\n      columns: columns.map((col) => ({\n        name: col.name,\n        dataType: col.type,\n        isNullable: !col.notnull,\n        isAutoIncrementing: col.name === autoIncrementCol,\n        hasDefaultValue: col.dflt_value != null\n      })),\n      isView: true\n    };\n  }\n}\nclass BunSqliteQueryCompiler extends kysely__WEBPACK_IMPORTED_MODULE_3__.DefaultQueryCompiler {\n  getCurrentParameterPlaceholder() {\n    return \"?\";\n  }\n  getLeftIdentifierWrapper() {\n    return '\"';\n  }\n  getRightIdentifierWrapper() {\n    return '\"';\n  }\n  getAutoIncrement() {\n    return \"autoincrement\";\n  }\n}\nclass BunSqliteDialect {\n  #config;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  createDriver() {\n    return new BunSqliteDriver(this.#config);\n  }\n  createQueryCompiler() {\n    return new BunSqliteQueryCompiler();\n  }\n  createAdapter() {\n    return new BunSqliteAdapter();\n  }\n  createIntrospector(db) {\n    return new BunSqliteIntrospector(db);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jaHVua3MvYnVuLXNxbGl0ZS1kaWFsZWN0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBeUg7O0FBRXpIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxpREFBYTtBQUMvQztBQUNBO0FBQ0Esa0NBQWtDLGlEQUFhO0FBQy9DO0FBQ0E7QUFDQSxrQ0FBa0MsaURBQWE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlDQUFpQztBQUMvRDtBQUNBO0FBQ0Esd0NBQXdDLDJEQUF1QixzQkFBc0IsZ0VBQTRCO0FBQ2pIO0FBQ0E7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSwyQ0FBRyxxQkFBcUIsTUFBTTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsd0RBQW9CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRThHIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L2NodW5rcy9idW4tc3FsaXRlLWRpYWxlY3QubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBpbGVkUXVlcnksIERlZmF1bHRRdWVyeUNvbXBpbGVyLCBERUZBVUxUX01JR1JBVElPTl9UQUJMRSwgREVGQVVMVF9NSUdSQVRJT05fTE9DS19UQUJMRSwgc3FsIH0gZnJvbSAna3lzZWx5JztcblxuY2xhc3MgQnVuU3FsaXRlQWRhcHRlciB7XG4gIGdldCBzdXBwb3J0c0NyZWF0ZUlmTm90RXhpc3RzKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGdldCBzdXBwb3J0c1RyYW5zYWN0aW9uYWxEZGwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGdldCBzdXBwb3J0c1JldHVybmluZygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhc3luYyBhY3F1aXJlTWlncmF0aW9uTG9jaygpIHtcbiAgfVxuICBhc3luYyByZWxlYXNlTWlncmF0aW9uTG9jaygpIHtcbiAgfVxuICBnZXQgc3VwcG9ydHNPdXRwdXQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbmNsYXNzIEJ1blNxbGl0ZURyaXZlciB7XG4gICNjb25maWc7XG4gICNjb25uZWN0aW9uTXV0ZXggPSBuZXcgQ29ubmVjdGlvbk11dGV4KCk7XG4gICNkYjtcbiAgI2Nvbm5lY3Rpb247XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuI2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gIH1cbiAgYXN5bmMgaW5pdCgpIHtcbiAgICB0aGlzLiNkYiA9IHRoaXMuI2NvbmZpZy5kYXRhYmFzZTtcbiAgICB0aGlzLiNjb25uZWN0aW9uID0gbmV3IEJ1blNxbGl0ZUNvbm5lY3Rpb24odGhpcy4jZGIpO1xuICAgIGlmICh0aGlzLiNjb25maWcub25DcmVhdGVDb25uZWN0aW9uKSB7XG4gICAgICBhd2FpdCB0aGlzLiNjb25maWcub25DcmVhdGVDb25uZWN0aW9uKHRoaXMuI2Nvbm5lY3Rpb24pO1xuICAgIH1cbiAgfVxuICBhc3luYyBhY3F1aXJlQ29ubmVjdGlvbigpIHtcbiAgICBhd2FpdCB0aGlzLiNjb25uZWN0aW9uTXV0ZXgubG9jaygpO1xuICAgIHJldHVybiB0aGlzLiNjb25uZWN0aW9uO1xuICB9XG4gIGFzeW5jIGJlZ2luVHJhbnNhY3Rpb24oY29ubmVjdGlvbikge1xuICAgIGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZVF1ZXJ5KENvbXBpbGVkUXVlcnkucmF3KFwiYmVnaW5cIikpO1xuICB9XG4gIGFzeW5jIGNvbW1pdFRyYW5zYWN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGVRdWVyeShDb21waWxlZFF1ZXJ5LnJhdyhcImNvbW1pdFwiKSk7XG4gIH1cbiAgYXN5bmMgcm9sbGJhY2tUcmFuc2FjdGlvbihjb25uZWN0aW9uKSB7XG4gICAgYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlUXVlcnkoQ29tcGlsZWRRdWVyeS5yYXcoXCJyb2xsYmFja1wiKSk7XG4gIH1cbiAgYXN5bmMgcmVsZWFzZUNvbm5lY3Rpb24oKSB7XG4gICAgdGhpcy4jY29ubmVjdGlvbk11dGV4LnVubG9jaygpO1xuICB9XG4gIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4jZGI/LmNsb3NlKCk7XG4gIH1cbn1cbmNsYXNzIEJ1blNxbGl0ZUNvbm5lY3Rpb24ge1xuICAjZGI7XG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy4jZGIgPSBkYjtcbiAgfVxuICBleGVjdXRlUXVlcnkoY29tcGlsZWRRdWVyeSkge1xuICAgIGNvbnN0IHsgc3FsOiBzcWwyLCBwYXJhbWV0ZXJzIH0gPSBjb21waWxlZFF1ZXJ5O1xuICAgIGNvbnN0IHN0bXQgPSB0aGlzLiNkYi5wcmVwYXJlKHNxbDIpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgcm93czogc3RtdC5hbGwocGFyYW1ldGVycylcbiAgICB9KTtcbiAgfVxuICBhc3luYyAqc3RyZWFtUXVlcnkoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyZWFtaW5nIHF1ZXJ5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgU1FMaXRlIGRyaXZlci5cIik7XG4gIH1cbn1cbmNsYXNzIENvbm5lY3Rpb25NdXRleCB7XG4gICNwcm9taXNlO1xuICAjcmVzb2x2ZTtcbiAgYXN5bmMgbG9jaygpIHtcbiAgICB3aGlsZSAodGhpcy4jcHJvbWlzZSkge1xuICAgICAgYXdhaXQgdGhpcy4jcHJvbWlzZTtcbiAgICB9XG4gICAgdGhpcy4jcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLiNyZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgfVxuICB1bmxvY2soKSB7XG4gICAgY29uc3QgcmVzb2x2ZSA9IHRoaXMuI3Jlc29sdmU7XG4gICAgdGhpcy4jcHJvbWlzZSA9IHZvaWQgMDtcbiAgICB0aGlzLiNyZXNvbHZlID0gdm9pZCAwO1xuICAgIHJlc29sdmU/LigpO1xuICB9XG59XG5jbGFzcyBCdW5TcWxpdGVJbnRyb3NwZWN0b3Ige1xuICAjZGI7XG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy4jZGIgPSBkYjtcbiAgfVxuICBhc3luYyBnZXRTY2hlbWFzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBhc3luYyBnZXRUYWJsZXMob3B0aW9ucyA9IHsgd2l0aEludGVybmFsS3lzZWx5VGFibGVzOiBmYWxzZSB9KSB7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy4jZGIuc2VsZWN0RnJvbShcInNxbGl0ZV9zY2hlbWFcIikud2hlcmUoXCJ0eXBlXCIsIFwiPVwiLCBcInRhYmxlXCIpLndoZXJlKFwibmFtZVwiLCBcIm5vdCBsaWtlXCIsIFwic3FsaXRlXyVcIikuc2VsZWN0KFwibmFtZVwiKS4kY2FzdFRvKCk7XG4gICAgaWYgKCFvcHRpb25zLndpdGhJbnRlcm5hbEt5c2VseVRhYmxlcykge1xuICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZShcIm5hbWVcIiwgXCIhPVwiLCBERUZBVUxUX01JR1JBVElPTl9UQUJMRSkud2hlcmUoXCJuYW1lXCIsIFwiIT1cIiwgREVGQVVMVF9NSUdSQVRJT05fTE9DS19UQUJMRSk7XG4gICAgfVxuICAgIGNvbnN0IHRhYmxlcyA9IGF3YWl0IHF1ZXJ5LmV4ZWN1dGUoKTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGFibGVzLm1hcCgoeyBuYW1lIH0pID0+IHRoaXMuI2dldFRhYmxlTWV0YWRhdGEobmFtZSkpKTtcbiAgfVxuICBhc3luYyBnZXRNZXRhZGF0YShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhYmxlczogYXdhaXQgdGhpcy5nZXRUYWJsZXMob3B0aW9ucylcbiAgICB9O1xuICB9XG4gIGFzeW5jICNnZXRUYWJsZU1ldGFkYXRhKHRhYmxlKSB7XG4gICAgY29uc3QgZGIgPSB0aGlzLiNkYjtcbiAgICBjb25zdCBjcmVhdGVTcWwgPSBhd2FpdCBkYi5zZWxlY3RGcm9tKFwic3FsaXRlX21hc3RlclwiKS53aGVyZShcIm5hbWVcIiwgXCI9XCIsIHRhYmxlKS5zZWxlY3QoXCJzcWxcIikuJGNhc3RUbygpLmV4ZWN1dGUoKTtcbiAgICBjb25zdCBhdXRvSW5jcmVtZW50Q29sID0gY3JlYXRlU3FsWzBdPy5zcWw/LnNwbGl0KC9bXFwoXFwpLF0vKT8uZmluZCgoaXQpID0+IGl0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJhdXRvaW5jcmVtZW50XCIpKT8uc3BsaXQoL1xccysvKT8uWzBdPy5yZXBsYWNlKC9bXCJgXS9nLCBcIlwiKTtcbiAgICBjb25zdCBjb2x1bW5zID0gYXdhaXQgZGIuc2VsZWN0RnJvbShcbiAgICAgIHNxbGBwcmFnbWFfdGFibGVfaW5mbygke3RhYmxlfSlgLmFzKFwidGFibGVfaW5mb1wiKVxuICAgICkuc2VsZWN0KFtcIm5hbWVcIiwgXCJ0eXBlXCIsIFwibm90bnVsbFwiLCBcImRmbHRfdmFsdWVcIl0pLmV4ZWN1dGUoKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGFibGUsXG4gICAgICBjb2x1bW5zOiBjb2x1bW5zLm1hcCgoY29sKSA9PiAoe1xuICAgICAgICBuYW1lOiBjb2wubmFtZSxcbiAgICAgICAgZGF0YVR5cGU6IGNvbC50eXBlLFxuICAgICAgICBpc051bGxhYmxlOiAhY29sLm5vdG51bGwsXG4gICAgICAgIGlzQXV0b0luY3JlbWVudGluZzogY29sLm5hbWUgPT09IGF1dG9JbmNyZW1lbnRDb2wsXG4gICAgICAgIGhhc0RlZmF1bHRWYWx1ZTogY29sLmRmbHRfdmFsdWUgIT0gbnVsbFxuICAgICAgfSkpLFxuICAgICAgaXNWaWV3OiB0cnVlXG4gICAgfTtcbiAgfVxufVxuY2xhc3MgQnVuU3FsaXRlUXVlcnlDb21waWxlciBleHRlbmRzIERlZmF1bHRRdWVyeUNvbXBpbGVyIHtcbiAgZ2V0Q3VycmVudFBhcmFtZXRlclBsYWNlaG9sZGVyKCkge1xuICAgIHJldHVybiBcIj9cIjtcbiAgfVxuICBnZXRMZWZ0SWRlbnRpZmllcldyYXBwZXIoKSB7XG4gICAgcmV0dXJuICdcIic7XG4gIH1cbiAgZ2V0UmlnaHRJZGVudGlmaWVyV3JhcHBlcigpIHtcbiAgICByZXR1cm4gJ1wiJztcbiAgfVxuICBnZXRBdXRvSW5jcmVtZW50KCkge1xuICAgIHJldHVybiBcImF1dG9pbmNyZW1lbnRcIjtcbiAgfVxufVxuY2xhc3MgQnVuU3FsaXRlRGlhbGVjdCB7XG4gICNjb25maWc7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuI2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gIH1cbiAgY3JlYXRlRHJpdmVyKCkge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlRHJpdmVyKHRoaXMuI2NvbmZpZyk7XG4gIH1cbiAgY3JlYXRlUXVlcnlDb21waWxlcigpIHtcbiAgICByZXR1cm4gbmV3IEJ1blNxbGl0ZVF1ZXJ5Q29tcGlsZXIoKTtcbiAgfVxuICBjcmVhdGVBZGFwdGVyKCkge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlQWRhcHRlcigpO1xuICB9XG4gIGNyZWF0ZUludHJvc3BlY3RvcihkYikge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlSW50cm9zcGVjdG9yKGRiKTtcbiAgfVxufVxuXG5leHBvcnQgeyBCdW5TcWxpdGVBZGFwdGVyLCBCdW5TcWxpdGVEaWFsZWN0LCBCdW5TcWxpdGVEcml2ZXIsIEJ1blNxbGl0ZUludHJvc3BlY3RvciwgQnVuU3FsaXRlUXVlcnlDb21waWxlciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/cookies/index.mjs":
/*!*************************************************************!*\
  !*** ../../node_modules/better-auth/dist/cookies/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCookieGetter: () => (/* binding */ createCookieGetter),\n/* harmony export */   deleteSessionCookie: () => (/* binding */ deleteSessionCookie),\n/* harmony export */   getCookieCache: () => (/* binding */ getCookieCache),\n/* harmony export */   getCookies: () => (/* binding */ getCookies),\n/* harmony export */   getSessionCookie: () => (/* binding */ getSessionCookie),\n/* harmony export */   parseCookies: () => (/* binding */ parseCookies),\n/* harmony export */   parseSetCookieHeader: () => (/* binding */ parseSetCookieHeader),\n/* harmony export */   setCookieCache: () => (/* binding */ setCookieCache),\n/* harmony export */   setCookieToHeader: () => (/* binding */ setCookieToHeader),\n/* harmony export */   setSessionCookie: () => (/* binding */ setSessionCookie)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/better-auth.8zoxzg-F.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/better-auth.tB5eU6EY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/better-auth.VTXNLFMT.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/binary.mjs\");\n\n\n\n\n\n\n\n\n\nconst createTime = (value, format) => {\n  const toMilliseconds = () => {\n    switch (format) {\n      case \"ms\":\n        return value;\n      case \"s\":\n        return value * 1e3;\n      case \"m\":\n        return value * 1e3 * 60;\n      case \"h\":\n        return value * 1e3 * 60 * 60;\n      case \"d\":\n        return value * 1e3 * 60 * 60 * 24;\n      case \"w\":\n        return value * 1e3 * 60 * 60 * 24 * 7;\n      case \"y\":\n        return value * 1e3 * 60 * 60 * 24 * 365;\n    }\n  };\n  const time = {\n    t: `${value}${format}`,\n    value,\n    tFormat: format,\n    toMilliseconds,\n    toSeconds: () => time.toMilliseconds() / 1e3,\n    toMinutes: () => time.toSeconds() / 60,\n    toHours: () => time.toMinutes() / 60,\n    toDays: () => time.toHours() / 24,\n    toWeeks: () => time.toDays() / 7,\n    toYears: () => time.toDays() / 365,\n    getDate: () => new Date(Date.now() + time.toMilliseconds()),\n    add: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return createTime(time.toMilliseconds() + otherMs, \"ms\");\n    },\n    subtract: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return createTime(time.toMilliseconds() - otherMs, \"ms\");\n    },\n    multiply: (factor) => createTime(time.toMilliseconds() * factor, \"ms\"),\n    divide: (divisor) => createTime(time.toMilliseconds() / divisor, \"ms\"),\n    equals: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() === otherMs;\n    },\n    lessThan: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() < otherMs;\n    },\n    greaterThan: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() > otherMs;\n    },\n    format: (pattern) => {\n      const date = time.getDate();\n      return pattern.replace(/YYYY|MM|DD|HH|mm|ss/g, (match) => {\n        switch (match) {\n          case \"YYYY\":\n            return date.getFullYear().toString();\n          case \"MM\":\n            return (date.getMonth() + 1).toString().padStart(2, \"0\");\n          case \"DD\":\n            return date.getDate().toString().padStart(2, \"0\");\n          case \"HH\":\n            return date.getHours().toString().padStart(2, \"0\");\n          case \"mm\":\n            return date.getMinutes().toString().padStart(2, \"0\");\n          case \"ss\":\n            return date.getSeconds().toString().padStart(2, \"0\");\n          default:\n            return match;\n        }\n      });\n    },\n    fromNow: () => {\n      const ms = time.toMilliseconds();\n      if (ms < 0) return time.ago();\n      if (ms < 1e3) return \"in a few seconds\";\n      if (ms < 6e4) return `in ${Math.round(ms / 1e3)} seconds`;\n      if (ms < 36e5) return `in ${Math.round(ms / 6e4)} minutes`;\n      if (ms < 864e5) return `in ${Math.round(ms / 36e5)} hours`;\n      if (ms < 6048e5) return `in ${Math.round(ms / 864e5)} days`;\n      if (ms < 26298e5) return `in ${Math.round(ms / 6048e5)} weeks`;\n      if (ms < 315576e5) return `in ${Math.round(ms / 26298e5)} months`;\n      return `in ${Math.round(ms / 315576e5)} years`;\n    },\n    ago: () => {\n      const ms = -time.toMilliseconds();\n      if (ms < 0) return time.fromNow();\n      if (ms < 1e3) return \"a few seconds ago\";\n      if (ms < 6e4) return `${Math.round(ms / 1e3)} seconds ago`;\n      if (ms < 36e5) return `${Math.round(ms / 6e4)} minutes ago`;\n      if (ms < 864e5) return `${Math.round(ms / 36e5)} hours ago`;\n      if (ms < 6048e5) return `${Math.round(ms / 864e5)} days ago`;\n      if (ms < 26298e5) return `${Math.round(ms / 6048e5)} weeks ago`;\n      if (ms < 315576e5) return `${Math.round(ms / 26298e5)} months ago`;\n      return `${Math.round(ms / 315576e5)} years ago`;\n    }\n  };\n  return time;\n};\nconst parseTime = (time) => {\n  const match = time.match(/^(\\d+)(ms|s|m|h|d|w|y)$/);\n  if (!match) throw new Error(\"Invalid time format\");\n  return createTime(parseInt(match[1]), match[2]);\n};\n\nfunction parseSetCookieHeader(setCookie) {\n  const cookies = /* @__PURE__ */ new Map();\n  const cookieArray = setCookie.split(\", \");\n  cookieArray.forEach((cookieString) => {\n    const parts = cookieString.split(\";\").map((part) => part.trim());\n    const [nameValue, ...attributes] = parts;\n    const [name, ...valueParts] = nameValue.split(\"=\");\n    const value = valueParts.join(\"=\");\n    if (!name || value === void 0) {\n      return;\n    }\n    const attrObj = { value };\n    attributes.forEach((attribute) => {\n      const [attrName, ...attrValueParts] = attribute.split(\"=\");\n      const attrValue = attrValueParts.join(\"=\");\n      const normalizedAttrName = attrName.trim().toLowerCase();\n      switch (normalizedAttrName) {\n        case \"max-age\":\n          attrObj[\"max-age\"] = attrValue ? parseInt(attrValue.trim(), 10) : void 0;\n          break;\n        case \"expires\":\n          attrObj.expires = attrValue ? new Date(attrValue.trim()) : void 0;\n          break;\n        case \"domain\":\n          attrObj.domain = attrValue ? attrValue.trim() : void 0;\n          break;\n        case \"path\":\n          attrObj.path = attrValue ? attrValue.trim() : void 0;\n          break;\n        case \"secure\":\n          attrObj.secure = true;\n          break;\n        case \"httponly\":\n          attrObj.httponly = true;\n          break;\n        case \"samesite\":\n          attrObj.samesite = attrValue ? attrValue.trim().toLowerCase() : void 0;\n          break;\n        default:\n          attrObj[normalizedAttrName] = attrValue ? attrValue.trim() : true;\n          break;\n      }\n    });\n    cookies.set(name, attrObj);\n  });\n  return cookies;\n}\nfunction setCookieToHeader(headers) {\n  return (context) => {\n    const setCookieHeader = context.response.headers.get(\"set-cookie\");\n    if (!setCookieHeader) {\n      return;\n    }\n    const cookieMap = /* @__PURE__ */ new Map();\n    const existingCookiesHeader = headers.get(\"cookie\") || \"\";\n    existingCookiesHeader.split(\";\").forEach((cookie) => {\n      const [name, ...rest] = cookie.trim().split(\"=\");\n      if (name && rest.length > 0) {\n        cookieMap.set(name, rest.join(\"=\"));\n      }\n    });\n    const setCookieHeaders = setCookieHeader.split(\",\");\n    setCookieHeaders.forEach((header) => {\n      const cookies = parseSetCookieHeader(header);\n      cookies.forEach((value, name) => {\n        cookieMap.set(name, value.value);\n      });\n    });\n    const updatedCookies = Array.from(cookieMap.entries()).map(([name, value]) => `${name}=${value}`).join(\"; \");\n    headers.set(\"cookie\", updatedCookies);\n  };\n}\n\nfunction createCookieGetter(options) {\n  const secure = options.advanced?.useSecureCookies !== void 0 ? options.advanced?.useSecureCookies : options.baseURL !== void 0 ? options.baseURL.startsWith(\"https://\") ? true : false : _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.a;\n  const secureCookiePrefix = secure ? \"__Secure-\" : \"\";\n  const crossSubdomainEnabled = !!options.advanced?.crossSubDomainCookies?.enabled;\n  const domain = crossSubdomainEnabled ? options.advanced?.crossSubDomainCookies?.domain || (options.baseURL ? new URL(options.baseURL).hostname : void 0) : void 0;\n  if (crossSubdomainEnabled && !domain) {\n    throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n      \"baseURL is required when crossSubdomainCookies are enabled\"\n    );\n  }\n  function createCookie(cookieName, overrideAttributes = {}) {\n    const prefix = options.advanced?.cookiePrefix || \"better-auth\";\n    const name = options.advanced?.cookies?.[cookieName]?.name || `${prefix}.${cookieName}`;\n    const attributes = options.advanced?.cookies?.[cookieName]?.attributes;\n    return {\n      name: `${secureCookiePrefix}${name}`,\n      attributes: {\n        secure: !!secureCookiePrefix,\n        sameSite: \"lax\",\n        path: \"/\",\n        httpOnly: true,\n        ...crossSubdomainEnabled ? { domain } : {},\n        ...options.advanced?.defaultCookieAttributes,\n        ...overrideAttributes,\n        ...attributes\n      }\n    };\n  }\n  return createCookie;\n}\nfunction getCookies(options) {\n  const createCookie = createCookieGetter(options);\n  const sessionMaxAge = options.session?.expiresIn || createTime(7, \"d\").toSeconds();\n  const sessionToken = createCookie(\"session_token\", {\n    maxAge: sessionMaxAge\n  });\n  const sessionData = createCookie(\"session_data\", {\n    maxAge: options.session?.cookieCache?.maxAge || 60 * 5\n  });\n  const dontRememberToken = createCookie(\"dont_remember\");\n  return {\n    sessionToken: {\n      name: sessionToken.name,\n      options: sessionToken.attributes\n    },\n    /**\n     * This cookie is used to store the session data in the cookie\n     * This is useful for when you want to cache the session in the cookie\n     */\n    sessionData: {\n      name: sessionData.name,\n      options: sessionData.attributes\n    },\n    dontRememberToken: {\n      name: dontRememberToken.name,\n      options: dontRememberToken.attributes\n    }\n  };\n}\nasync function setCookieCache(ctx, session) {\n  const shouldStoreSessionDataInCookie = ctx.context.options.session?.cookieCache?.enabled;\n  if (shouldStoreSessionDataInCookie) {\n    const filteredSession = Object.entries(session.session).reduce(\n      (acc, [key, value]) => {\n        const fieldConfig = ctx.context.options.session?.additionalFields?.[key];\n        if (!fieldConfig || fieldConfig.returned !== false) {\n          acc[key] = value;\n        }\n        return acc;\n      },\n      {}\n    );\n    const sessionData = { session: filteredSession, user: session.user };\n    const expiresAtDate = (0,_shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(\n      ctx.context.authCookies.sessionData.options.maxAge || 60,\n      \"sec\"\n    ).getTime();\n    const data = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.encode(\n      JSON.stringify({\n        session: sessionData,\n        expiresAt: expiresAtDate,\n        signature: await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__.createHMAC)(\"SHA-256\", \"base64urlnopad\").sign(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionData,\n            expiresAt: expiresAtDate\n          })\n        )\n      }),\n      {\n        padding: false\n      }\n    );\n    if (data.length > 4093) {\n      throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n        \"Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data\"\n      );\n    }\n    ctx.setCookie(\n      ctx.context.authCookies.sessionData.name,\n      data,\n      ctx.context.authCookies.sessionData.options\n    );\n  }\n}\nasync function setSessionCookie(ctx, session, dontRememberMe, overrides) {\n  const dontRememberMeCookie = await ctx.getSignedCookie(\n    ctx.context.authCookies.dontRememberToken.name,\n    ctx.context.secret\n  );\n  dontRememberMe = dontRememberMe !== void 0 ? dontRememberMe : !!dontRememberMeCookie;\n  const options = ctx.context.authCookies.sessionToken.options;\n  const maxAge = dontRememberMe ? void 0 : ctx.context.sessionConfig.expiresIn;\n  await ctx.setSignedCookie(\n    ctx.context.authCookies.sessionToken.name,\n    session.session.token,\n    ctx.context.secret,\n    {\n      ...options,\n      maxAge,\n      ...overrides\n    }\n  );\n  if (dontRememberMe) {\n    await ctx.setSignedCookie(\n      ctx.context.authCookies.dontRememberToken.name,\n      \"true\",\n      ctx.context.secret,\n      ctx.context.authCookies.dontRememberToken.options\n    );\n  }\n  await setCookieCache(ctx, session);\n  ctx.context.setNewSession(session);\n  if (ctx.context.options.secondaryStorage) {\n    await ctx.context.secondaryStorage?.set(\n      session.session.token,\n      JSON.stringify({\n        user: session.user,\n        session: session.session\n      }),\n      Math.floor(\n        (new Date(session.session.expiresAt).getTime() - Date.now()) / 1e3\n      )\n    );\n  }\n}\nfunction deleteSessionCookie(ctx, skipDontRememberMe) {\n  ctx.setCookie(ctx.context.authCookies.sessionToken.name, \"\", {\n    ...ctx.context.authCookies.sessionToken.options,\n    maxAge: 0\n  });\n  ctx.setCookie(ctx.context.authCookies.sessionData.name, \"\", {\n    ...ctx.context.authCookies.sessionData.options,\n    maxAge: 0\n  });\n  if (!skipDontRememberMe) {\n    ctx.setCookie(ctx.context.authCookies.dontRememberToken.name, \"\", {\n      ...ctx.context.authCookies.dontRememberToken.options,\n      maxAge: 0\n    });\n  }\n}\nfunction parseCookies(cookieHeader) {\n  const cookies = cookieHeader.split(\"; \");\n  const cookieMap = /* @__PURE__ */ new Map();\n  cookies.forEach((cookie) => {\n    const [name, value] = cookie.split(\"=\");\n    cookieMap.set(name, value);\n  });\n  return cookieMap;\n}\nconst getSessionCookie = (request, config) => {\n  if (config?.cookiePrefix) {\n    if (config.cookieName) {\n      config.cookiePrefix = `${config.cookiePrefix}-`;\n    } else {\n      config.cookiePrefix = `${config.cookiePrefix}.`;\n    }\n  }\n  const headers = \"headers\" in request ? request.headers : request;\n  const req = request instanceof Request ? request : void 0;\n  (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_6__.a)(req?.url, config?.path, req);\n  const cookies = headers.get(\"cookie\");\n  if (!cookies) {\n    return null;\n  }\n  const { cookieName = \"session_token\", cookiePrefix = \"better-auth.\" } = config || {};\n  const name = `${cookiePrefix}${cookieName}`;\n  const secureCookieName = `__Secure-${name}`;\n  const parsedCookie = parseCookies(cookies);\n  const sessionToken = parsedCookie.get(name) || parsedCookie.get(secureCookieName);\n  if (sessionToken) {\n    return sessionToken;\n  }\n  return null;\n};\nconst getCookieCache = async (request, config) => {\n  const headers = request instanceof Headers ? request : request.headers;\n  const cookies = headers.get(\"cookie\");\n  if (!cookies) {\n    return null;\n  }\n  const { cookieName = \"session_data\", cookiePrefix = \"better-auth\" } = config || {};\n  const name = config?.isSecure !== void 0 ? config.isSecure ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}` : _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.a ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}`;\n  const parsedCookie = parseCookies(cookies);\n  const sessionData = parsedCookie.get(name);\n  if (sessionData) {\n    const sessionDataPayload = (0,_shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_5__.s)(_better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__.binary.decode(_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.decode(sessionData)));\n    if (!sessionDataPayload) {\n      return null;\n    }\n    const secret = config?.secret || _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.e.BETTER_AUTH_SECRET;\n    if (!secret) {\n      throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n        \"getCookieCache requires a secret to be provided. Either pass it as an option or set the BETTER_AUTH_SECRET environment variable\"\n      );\n    }\n    const isValid = await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__.createHMAC)(\"SHA-256\", \"base64urlnopad\").verify(\n      secret,\n      JSON.stringify({\n        ...sessionDataPayload.session,\n        expiresAt: sessionDataPayload.expiresAt\n      }),\n      sessionDataPayload.signature\n    );\n    if (!isValid) {\n      return null;\n    }\n    return sessionDataPayload.session;\n  }\n  return null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/cookies/index.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/crypto/index.mjs":
/*!************************************************************!*\
  !*** ../../node_modules/better-auth/dist/crypto/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareHash: () => (/* binding */ compareHash),\n/* harmony export */   constantTimeEqual: () => (/* binding */ constantTimeEqual),\n/* harmony export */   generateRandomString: () => (/* reexport safe */ _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_4__.g),\n/* harmony export */   hashPassword: () => (/* binding */ hashPassword),\n/* harmony export */   hashToBase64: () => (/* binding */ hashToBase64),\n/* harmony export */   signJWT: () => (/* binding */ signJWT),\n/* harmony export */   symmetricDecrypt: () => (/* binding */ symmetricDecrypt),\n/* harmony export */   symmetricEncrypt: () => (/* binding */ symmetricEncrypt),\n/* harmony export */   verifyPassword: () => (/* binding */ verifyPassword)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @noble/ciphers/chacha */ \"(action-browser)/../../node_modules/@noble/ciphers/esm/chacha.js\");\n/* harmony import */ var _noble_ciphers_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @noble/ciphers/utils */ \"(action-browser)/../../node_modules/@noble/ciphers/esm/utils.js\");\n/* harmony import */ var _noble_ciphers_webcrypto__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @noble/ciphers/webcrypto */ \"(action-browser)/../../node_modules/@noble/ciphers/esm/webcrypto.js\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jose */ \"(action-browser)/../../node_modules/jose/dist/node/esm/jwt/sign.js\");\n/* harmony import */ var _noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @noble/hashes/scrypt */ \"(action-browser)/../../node_modules/@noble/hashes/esm/scrypt.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @noble/hashes/utils */ \"(action-browser)/../../node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/random */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function signJWT(payload, secret, expiresIn = 3600) {\n  const jwt = await new jose__WEBPACK_IMPORTED_MODULE_6__.SignJWT(payload).setProtectedHeader({ alg: \"HS256\" }).setIssuedAt().setExpirationTime(Math.floor(Date.now() / 1e3) + expiresIn).sign(new TextEncoder().encode(secret));\n  return jwt;\n}\n\nfunction constantTimeEqual(a, b) {\n  const aBuffer = new Uint8Array(a);\n  const bBuffer = new Uint8Array(b);\n  if (aBuffer.length !== bBuffer.length) {\n    return false;\n  }\n  let c = 0;\n  for (let i = 0; i < aBuffer.length; i++) {\n    c |= aBuffer[i] ^ bBuffer[i];\n  }\n  return c === 0;\n}\n\nasync function hashToBase64(data) {\n  const buffer = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(data);\n  return _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__.base64.encode(buffer);\n}\nasync function compareHash(data, hash) {\n  const buffer = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(\n    typeof data === \"string\" ? new TextEncoder().encode(data) : data\n  );\n  const hashBuffer = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__.base64.decode(hash);\n  return constantTimeEqual(buffer, hashBuffer);\n}\n\nconst config = {\n  N: 16384,\n  r: 16,\n  p: 1,\n  dkLen: 64\n};\nasync function generateKey(password, salt) {\n  return await (0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_7__.scryptAsync)(password.normalize(\"NFKC\"), salt, {\n    N: config.N,\n    p: config.p,\n    r: config.r,\n    dkLen: config.dkLen,\n    maxmem: 128 * config.N * config.r * 2\n  });\n}\nconst hashPassword = async (password) => {\n  const salt = _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_3__.hex.encode((0,_better_auth_utils__WEBPACK_IMPORTED_MODULE_2__.getRandomValues)(new Uint8Array(16)));\n  const key = await generateKey(password, salt);\n  return `${salt}:${_better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_3__.hex.encode(key)}`;\n};\nconst verifyPassword = async ({\n  hash,\n  password\n}) => {\n  const [salt, key] = hash.split(\":\");\n  const targetKey = await generateKey(password, salt);\n  return constantTimeEqual(targetKey, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.hexToBytes)(key));\n};\n\nconst symmetricEncrypt = async ({\n  key,\n  data\n}) => {\n  const keyAsBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(key);\n  const dataAsBytes = (0,_noble_ciphers_utils__WEBPACK_IMPORTED_MODULE_9__.utf8ToBytes)(data);\n  const chacha = (0,_noble_ciphers_webcrypto__WEBPACK_IMPORTED_MODULE_10__.managedNonce)(_noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_11__.xchacha20poly1305)(new Uint8Array(keyAsBytes));\n  return (0,_noble_ciphers_utils__WEBPACK_IMPORTED_MODULE_9__.bytesToHex)(chacha.encrypt(dataAsBytes));\n};\nconst symmetricDecrypt = async ({\n  key,\n  data\n}) => {\n  const keyAsBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(key);\n  const dataAsBytes = (0,_noble_ciphers_utils__WEBPACK_IMPORTED_MODULE_9__.hexToBytes)(data);\n  const chacha = (0,_noble_ciphers_webcrypto__WEBPACK_IMPORTED_MODULE_10__.managedNonce)(_noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_11__.xchacha20poly1305)(new Uint8Array(keyAsBytes));\n  return new TextDecoder().decode(chacha.decrypt(dataAsBytes));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jcnlwdG8vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFxRDtBQUNLO0FBQ2lDO0FBQ25DO0FBQ0w7QUFDcEI7QUFDb0I7QUFDRTtBQUNSO0FBQ0k7QUFDOEI7QUFDNUM7O0FBRW5DO0FBQ0Esd0JBQXdCLHlDQUFPLCtCQUErQixjQUFjO0FBQzVFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLG1FQUFVO0FBQ2pDLFNBQVMsNkRBQU07QUFDZjtBQUNBO0FBQ0EsdUJBQXVCLG1FQUFVO0FBQ2pDO0FBQ0E7QUFDQSxxQkFBcUIsNkRBQU07QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUVBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZUFBZSx1REFBRyxRQUFRLG1FQUFlO0FBQ3pDO0FBQ0EsWUFBWSxLQUFLLEdBQUcsdURBQUcsYUFBYTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0Esc0NBQXNDLCtEQUFVO0FBQ2hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCwyQkFBMkIsbUVBQVU7QUFDckMsc0JBQXNCLGlFQUFXO0FBQ2pDLGlCQUFpQix1RUFBWSxDQUFDLHFFQUFpQjtBQUMvQyxTQUFTLGdFQUFVO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDJCQUEyQixtRUFBVTtBQUNyQyxzQkFBc0IsZ0VBQVk7QUFDbEMsaUJBQWlCLHVFQUFZLENBQUMscUVBQWlCO0FBQy9DO0FBQ0E7O0FBRW1JIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L2NyeXB0by9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscy9oYXNoJztcbmltcG9ydCB7IHhjaGFjaGEyMHBvbHkxMzA1IH0gZnJvbSAnQG5vYmxlL2NpcGhlcnMvY2hhY2hhJztcbmltcG9ydCB7IHV0ZjhUb0J5dGVzLCBieXRlc1RvSGV4LCBoZXhUb0J5dGVzIGFzIGhleFRvQnl0ZXMkMSB9IGZyb20gJ0Bub2JsZS9jaXBoZXJzL3V0aWxzJztcbmltcG9ydCB7IG1hbmFnZWROb25jZSB9IGZyb20gJ0Bub2JsZS9jaXBoZXJzL3dlYmNyeXB0byc7XG5pbXBvcnQgeyBiYXNlNjQgfSBmcm9tICdAYmV0dGVyLWF1dGgvdXRpbHMvYmFzZTY0JztcbmltcG9ydCB7IFNpZ25KV1QgfSBmcm9tICdqb3NlJztcbmltcG9ydCB7IHNjcnlwdEFzeW5jIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zY3J5cHQnO1xuaW1wb3J0IHsgZ2V0UmFuZG9tVmFsdWVzIH0gZnJvbSAnQGJldHRlci1hdXRoL3V0aWxzJztcbmltcG9ydCB7IGhleCB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscy9oZXgnO1xuaW1wb3J0IHsgaGV4VG9CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuZXhwb3J0IHsgZyBhcyBnZW5lcmF0ZVJhbmRvbVN0cmluZyB9IGZyb20gJy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5CNFFveGRnYy5tanMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvcmFuZG9tJztcblxuYXN5bmMgZnVuY3Rpb24gc2lnbkpXVChwYXlsb2FkLCBzZWNyZXQsIGV4cGlyZXNJbiA9IDM2MDApIHtcbiAgY29uc3Qgand0ID0gYXdhaXQgbmV3IFNpZ25KV1QocGF5bG9hZCkuc2V0UHJvdGVjdGVkSGVhZGVyKHsgYWxnOiBcIkhTMjU2XCIgfSkuc2V0SXNzdWVkQXQoKS5zZXRFeHBpcmF0aW9uVGltZShNYXRoLmZsb29yKERhdGUubm93KCkgLyAxZTMpICsgZXhwaXJlc0luKS5zaWduKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzZWNyZXQpKTtcbiAgcmV0dXJuIGp3dDtcbn1cblxuZnVuY3Rpb24gY29uc3RhbnRUaW1lRXF1YWwoYSwgYikge1xuICBjb25zdCBhQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYSk7XG4gIGNvbnN0IGJCdWZmZXIgPSBuZXcgVWludDhBcnJheShiKTtcbiAgaWYgKGFCdWZmZXIubGVuZ3RoICE9PSBiQnVmZmVyLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgYyA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYUJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIGMgfD0gYUJ1ZmZlcltpXSBeIGJCdWZmZXJbaV07XG4gIH1cbiAgcmV0dXJuIGMgPT09IDA7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhc2hUb0Jhc2U2NChkYXRhKSB7XG4gIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGNyZWF0ZUhhc2goXCJTSEEtMjU2XCIpLmRpZ2VzdChkYXRhKTtcbiAgcmV0dXJuIGJhc2U2NC5lbmNvZGUoYnVmZmVyKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNvbXBhcmVIYXNoKGRhdGEsIGhhc2gpIHtcbiAgY29uc3QgYnVmZmVyID0gYXdhaXQgY3JlYXRlSGFzaChcIlNIQS0yNTZcIikuZGlnZXN0KFxuICAgIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiID8gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGRhdGEpIDogZGF0YVxuICApO1xuICBjb25zdCBoYXNoQnVmZmVyID0gYmFzZTY0LmRlY29kZShoYXNoKTtcbiAgcmV0dXJuIGNvbnN0YW50VGltZUVxdWFsKGJ1ZmZlciwgaGFzaEJ1ZmZlcik7XG59XG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgTjogMTYzODQsXG4gIHI6IDE2LFxuICBwOiAxLFxuICBka0xlbjogNjRcbn07XG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUtleShwYXNzd29yZCwgc2FsdCkge1xuICByZXR1cm4gYXdhaXQgc2NyeXB0QXN5bmMocGFzc3dvcmQubm9ybWFsaXplKFwiTkZLQ1wiKSwgc2FsdCwge1xuICAgIE46IGNvbmZpZy5OLFxuICAgIHA6IGNvbmZpZy5wLFxuICAgIHI6IGNvbmZpZy5yLFxuICAgIGRrTGVuOiBjb25maWcuZGtMZW4sXG4gICAgbWF4bWVtOiAxMjggKiBjb25maWcuTiAqIGNvbmZpZy5yICogMlxuICB9KTtcbn1cbmNvbnN0IGhhc2hQYXNzd29yZCA9IGFzeW5jIChwYXNzd29yZCkgPT4ge1xuICBjb25zdCBzYWx0ID0gaGV4LmVuY29kZShnZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMTYpKSk7XG4gIGNvbnN0IGtleSA9IGF3YWl0IGdlbmVyYXRlS2V5KHBhc3N3b3JkLCBzYWx0KTtcbiAgcmV0dXJuIGAke3NhbHR9OiR7aGV4LmVuY29kZShrZXkpfWA7XG59O1xuY29uc3QgdmVyaWZ5UGFzc3dvcmQgPSBhc3luYyAoe1xuICBoYXNoLFxuICBwYXNzd29yZFxufSkgPT4ge1xuICBjb25zdCBbc2FsdCwga2V5XSA9IGhhc2guc3BsaXQoXCI6XCIpO1xuICBjb25zdCB0YXJnZXRLZXkgPSBhd2FpdCBnZW5lcmF0ZUtleShwYXNzd29yZCwgc2FsdCk7XG4gIHJldHVybiBjb25zdGFudFRpbWVFcXVhbCh0YXJnZXRLZXksIGhleFRvQnl0ZXMoa2V5KSk7XG59O1xuXG5jb25zdCBzeW1tZXRyaWNFbmNyeXB0ID0gYXN5bmMgKHtcbiAga2V5LFxuICBkYXRhXG59KSA9PiB7XG4gIGNvbnN0IGtleUFzQnl0ZXMgPSBhd2FpdCBjcmVhdGVIYXNoKFwiU0hBLTI1NlwiKS5kaWdlc3Qoa2V5KTtcbiAgY29uc3QgZGF0YUFzQnl0ZXMgPSB1dGY4VG9CeXRlcyhkYXRhKTtcbiAgY29uc3QgY2hhY2hhID0gbWFuYWdlZE5vbmNlKHhjaGFjaGEyMHBvbHkxMzA1KShuZXcgVWludDhBcnJheShrZXlBc0J5dGVzKSk7XG4gIHJldHVybiBieXRlc1RvSGV4KGNoYWNoYS5lbmNyeXB0KGRhdGFBc0J5dGVzKSk7XG59O1xuY29uc3Qgc3ltbWV0cmljRGVjcnlwdCA9IGFzeW5jICh7XG4gIGtleSxcbiAgZGF0YVxufSkgPT4ge1xuICBjb25zdCBrZXlBc0J5dGVzID0gYXdhaXQgY3JlYXRlSGFzaChcIlNIQS0yNTZcIikuZGlnZXN0KGtleSk7XG4gIGNvbnN0IGRhdGFBc0J5dGVzID0gaGV4VG9CeXRlcyQxKGRhdGEpO1xuICBjb25zdCBjaGFjaGEgPSBtYW5hZ2VkTm9uY2UoeGNoYWNoYTIwcG9seTEzMDUpKG5ldyBVaW50OEFycmF5KGtleUFzQnl0ZXMpKTtcbiAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShjaGFjaGEuZGVjcnlwdChkYXRhQXNCeXRlcykpO1xufTtcblxuZXhwb3J0IHsgY29tcGFyZUhhc2gsIGNvbnN0YW50VGltZUVxdWFsLCBoYXNoUGFzc3dvcmQsIGhhc2hUb0Jhc2U2NCwgc2lnbkpXVCwgc3ltbWV0cmljRGVjcnlwdCwgc3ltbWV0cmljRW5jcnlwdCwgdmVyaWZ5UGFzc3dvcmQgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/crypto/index.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/index.mjs":
/*!*****************************************************!*\
  !*** ../../node_modules/better-auth/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetterAuthError: () => (/* reexport safe */ _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B),\n/* harmony export */   HIDE_METADATA: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_3__.H),\n/* harmony export */   MissingDependencyError: () => (/* reexport safe */ _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.M),\n/* harmony export */   betterAuth: () => (/* reexport safe */ _shared_better_auth_Cbhy6WDJ_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   capitalizeFirstLetter: () => (/* reexport safe */ _shared_better_auth_D_2CmEwz_mjs__WEBPACK_IMPORTED_MODULE_2__.c),\n/* harmony export */   createLogger: () => (/* reexport safe */ _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.c),\n/* harmony export */   generateId: () => (/* reexport safe */ _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.g),\n/* harmony export */   generateState: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_3__.g),\n/* harmony export */   levels: () => (/* reexport safe */ _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.l),\n/* harmony export */   logger: () => (/* reexport safe */ _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.a),\n/* harmony export */   parseState: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_3__.p),\n/* harmony export */   shouldPublishLog: () => (/* reexport safe */ _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.s)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_Cbhy6WDJ_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared/better-auth.Cbhy6WDJ.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.Cbhy6WDJ.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/better-auth.DdzSJf-n.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_D_2CmEwz_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/better-auth.D-2CmEwz.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs\");\n/* harmony import */ var _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/better-auth.z3dsxLxE.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs\");\n/* harmony import */ var _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared/better-auth.DBGfIDnh.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _api_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./api/index.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/api/index.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! better-call */ \"(action-browser)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cookies/index.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./shared/better-auth.CW6D9eSx.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./shared/better-auth.8zoxzg-F.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./shared/better-auth.tB5eU6EY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./shared/better-auth.VTXNLFMT.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _shared_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./shared/better-auth.n2KFGwjY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\");\n/* harmony import */ var _shared_better_auth_DcfNPS8q_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./shared/better-auth.DcfNPS8q.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! defu */ \"(action-browser)/../../node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./crypto/index.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @better-auth/utils */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./shared/better-auth.B4Qoxdgc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @better-auth/utils/random */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _shared_better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./shared/better-auth.ByruPN9q.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs\");\n/* harmony import */ var _shared_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./shared/better-auth.DORkW_Ge.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _shared_better_auth_DwzM_9N1_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./shared/better-auth.DwzM-9N1.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs\");\n/* harmony import */ var _shared_better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./shared/better-auth.gBl3F_xa.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs\");\n/* harmony import */ var _shared_better_auth_DGpadpzN_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./shared/better-auth.DGpadpzN.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs\");\n/* harmony import */ var _shared_better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./shared/better-auth.YwDQhoPc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @better-fetch/fetch */ \"(action-browser)/../../node_modules/@better-fetch/fetch/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFvRTtBQUNrQztBQUN2QjtBQUM2QjtBQUM0QjtBQUMvRztBQUNKO0FBQ0w7QUFDYTtBQUNjO0FBQ0E7QUFDUjtBQUNGO0FBQ1U7QUFDQTtBQUNSO0FBQ1E7QUFDQTtBQUM3QjtBQUNjO0FBQ0s7QUFDRjtBQUNEO0FBQ0k7QUFDcEI7QUFDZ0I7QUFDRjtBQUNJO0FBQ0g7QUFDYztBQUNSO0FBQ1E7QUFDQTtBQUNBO0FBQzNCO0FBQzJCO0FBQ0E7QUFDQTtBQUNkO0FBQ1IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWxhbi9EZXNrdG9wL0FwcHMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3QvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGIgYXMgYmV0dGVyQXV0aCB9IGZyb20gJy4vc2hhcmVkL2JldHRlci1hdXRoLkNiaHk2V0RKLm1qcyc7XG5leHBvcnQgeyBCIGFzIEJldHRlckF1dGhFcnJvciwgTSBhcyBNaXNzaW5nRGVwZW5kZW5jeUVycm9yIH0gZnJvbSAnLi9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzJztcbmV4cG9ydCB7IGMgYXMgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIH0gZnJvbSAnLi9zaGFyZWQvYmV0dGVyLWF1dGguRC0yQ21Fd3oubWpzJztcbmV4cG9ydCB7IEggYXMgSElERV9NRVRBREFUQSwgZyBhcyBnZW5lcmF0ZVN0YXRlLCBwIGFzIHBhcnNlU3RhdGUgfSBmcm9tICcuL3NoYXJlZC9iZXR0ZXItYXV0aC56M2RzeEx4RS5tanMnO1xuZXhwb3J0IHsgYyBhcyBjcmVhdGVMb2dnZXIsIGcgYXMgZ2VuZXJhdGVJZCwgbCBhcyBsZXZlbHMsIGEgYXMgbG9nZ2VyLCBzIGFzIHNob3VsZFB1Ymxpc2hMb2cgfSBmcm9tICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5EQkdmSURuaC5tanMnO1xuaW1wb3J0ICcuL2FwaS9pbmRleC5tanMnO1xuaW1wb3J0ICdiZXR0ZXItY2FsbCc7XG5pbXBvcnQgJ3pvZC92NCc7XG5pbXBvcnQgJy4vY29va2llcy9pbmRleC5tanMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5DVzZEOWVTeC5tanMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC44em94emctRi5tanMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvYmFzZTY0JztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2htYWMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC50QjVlVTZFWS5tanMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5WVFhOTEZNVC5tanMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvYmluYXJ5JztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGgubjJLRkd3alkubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguRGNmTlBTOHEubWpzJztcbmltcG9ydCAnZGVmdSc7XG5pbXBvcnQgJy4vY3J5cHRvL2luZGV4Lm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9oYXNoJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvY2hhY2hhJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvdXRpbHMnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy93ZWJjcnlwdG8nO1xuaW1wb3J0ICdqb3NlJztcbmltcG9ydCAnQG5vYmxlL2hhc2hlcy9zY3J5cHQnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaGV4JztcbmltcG9ydCAnQG5vYmxlL2hhc2hlcy91dGlscyc7XG5pbXBvcnQgJy4vc2hhcmVkL2JldHRlci1hdXRoLkI0UW94ZGdjLm1qcyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9yYW5kb20nO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5CeXJ1UE45cS5tanMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5ET1JrV19HZS5tanMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5Ed3pNLTlOMS5tanMnO1xuaW1wb3J0ICdreXNlbHknO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5nQmwzRl94YS5tanMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5ER3BhZHB6Ti5tanMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5Zd0RRaG9QYy5tanMnO1xuaW1wb3J0ICdAYmV0dGVyLWZldGNoL2ZldGNoJztcbmltcG9ydCAnam9zZS9lcnJvcnMnO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/index.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ isProduction),\n/* harmony export */   b: () => (/* binding */ isDevelopment),\n/* harmony export */   e: () => (/* binding */ env),\n/* harmony export */   i: () => (/* binding */ isTest)\n/* harmony export */ });\nconst _envShim = /* @__PURE__ */ Object.create(null);\nconst _getEnv = (useShim) => globalThis.process?.env || //@ts-expect-error\nglobalThis.Deno?.env.toObject() || //@ts-expect-error\nglobalThis.__env__ || (useShim ? _envShim : globalThis);\nconst env = new Proxy(_envShim, {\n  get(_, prop) {\n    const env2 = _getEnv();\n    return env2[prop] ?? _envShim[prop];\n  },\n  has(_, prop) {\n    const env2 = _getEnv();\n    return prop in env2 || prop in _envShim;\n  },\n  set(_, prop, value) {\n    const env2 = _getEnv(true);\n    env2[prop] = value;\n    return true;\n  },\n  deleteProperty(_, prop) {\n    if (!prop) {\n      return false;\n    }\n    const env2 = _getEnv(true);\n    delete env2[prop];\n    return true;\n  },\n  ownKeys() {\n    const env2 = _getEnv(true);\n    return Object.keys(env2);\n  }\n});\nfunction toBoolean(val) {\n  return val ? val !== \"false\" : false;\n}\nconst nodeENV = typeof process !== \"undefined\" && process.env && \"development\" || \"\";\nconst isProduction = nodeENV === \"production\";\nconst isDevelopment = nodeENV === \"dev\" || nodeENV === \"development\";\nconst isTest = nodeENV === \"test\" || toBoolean(env.TEST);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguOHpveHpnLUYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsYUFBb0I7QUFDckY7QUFDQTtBQUNBOztBQUV3RSIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguOHpveHpnLUYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF9lbnZTaGltID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBfZ2V0RW52ID0gKHVzZVNoaW0pID0+IGdsb2JhbFRoaXMucHJvY2Vzcz8uZW52IHx8IC8vQHRzLWV4cGVjdC1lcnJvclxuZ2xvYmFsVGhpcy5EZW5vPy5lbnYudG9PYmplY3QoKSB8fCAvL0B0cy1leHBlY3QtZXJyb3Jcbmdsb2JhbFRoaXMuX19lbnZfXyB8fCAodXNlU2hpbSA/IF9lbnZTaGltIDogZ2xvYmFsVGhpcyk7XG5jb25zdCBlbnYgPSBuZXcgUHJveHkoX2VudlNoaW0sIHtcbiAgZ2V0KF8sIHByb3ApIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudigpO1xuICAgIHJldHVybiBlbnYyW3Byb3BdID8/IF9lbnZTaGltW3Byb3BdO1xuICB9LFxuICBoYXMoXywgcHJvcCkge1xuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KCk7XG4gICAgcmV0dXJuIHByb3AgaW4gZW52MiB8fCBwcm9wIGluIF9lbnZTaGltO1xuICB9LFxuICBzZXQoXywgcHJvcCwgdmFsdWUpIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudih0cnVlKTtcbiAgICBlbnYyW3Byb3BdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KF8sIHByb3ApIHtcbiAgICBpZiAoIXByb3ApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYodHJ1ZSk7XG4gICAgZGVsZXRlIGVudjJbcHJvcF07XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIG93bktleXMoKSB7XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYodHJ1ZSk7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVudjIpO1xuICB9XG59KTtcbmZ1bmN0aW9uIHRvQm9vbGVhbih2YWwpIHtcbiAgcmV0dXJuIHZhbCA/IHZhbCAhPT0gXCJmYWxzZVwiIDogZmFsc2U7XG59XG5jb25zdCBub2RlRU5WID0gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgXCJcIjtcbmNvbnN0IGlzUHJvZHVjdGlvbiA9IG5vZGVFTlYgPT09IFwicHJvZHVjdGlvblwiO1xuY29uc3QgaXNEZXZlbG9wbWVudCA9IG5vZGVFTlYgPT09IFwiZGV2XCIgfHwgbm9kZUVOViA9PT0gXCJkZXZlbG9wbWVudFwiO1xuY29uc3QgaXNUZXN0ID0gbm9kZUVOViA9PT0gXCJ0ZXN0XCIgfHwgdG9Cb29sZWFuKGVudi5URVNUKTtcblxuZXhwb3J0IHsgaXNQcm9kdWN0aW9uIGFzIGEsIGlzRGV2ZWxvcG1lbnQgYXMgYiwgZW52IGFzIGUsIGlzVGVzdCBhcyBpIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ generateRandomString)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n\n\nconst generateRandomString = (0,_better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__.createRandomStringGenerator)(\n  \"a-z\",\n  \"0-9\",\n  \"A-Z\",\n  \"-_\"\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQjRRb3hkZ2MubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdFOztBQUV4RSw2QkFBNkIsc0ZBQTJCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXFDIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5CNFFveGRnYy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUmFuZG9tU3RyaW5nR2VuZXJhdG9yIH0gZnJvbSAnQGJldHRlci1hdXRoL3V0aWxzL3JhbmRvbSc7XG5cbmNvbnN0IGdlbmVyYXRlUmFuZG9tU3RyaW5nID0gY3JlYXRlUmFuZG9tU3RyaW5nR2VuZXJhdG9yKFxuICBcImEtelwiLFxuICBcIjAtOVwiLFxuICBcIkEtWlwiLFxuICBcIi1fXCJcbik7XG5cbmV4cG9ydCB7IGdlbmVyYXRlUmFuZG9tU3RyaW5nIGFzIGcgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getAdapter),\n/* harmony export */   b: () => (/* binding */ convertToDB),\n/* harmony export */   c: () => (/* binding */ createInternalAdapter),\n/* harmony export */   d: () => (/* binding */ convertFromDB),\n/* harmony export */   e: () => (/* binding */ getMigrations),\n/* harmony export */   f: () => (/* binding */ getSchema),\n/* harmony export */   g: () => (/* binding */ getWithHooks),\n/* harmony export */   m: () => (/* binding */ matchType)\n/* harmony export */ });\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.n2KFGwjY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\");\n/* harmony import */ var _better_auth_DcfNPS8q_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.DcfNPS8q.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs\");\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.DBGfIDnh.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! better-call */ \"(action-browser)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/random */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./better-auth.DORkW_Ge.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _better_auth_DwzM_9N1_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.DwzM-9N1.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs\");\n/* harmony import */ var _better_auth_DGpadpzN_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.DGpadpzN.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getWithHooks(adapter, ctx) {\n  const hooks = ctx.hooks;\n  async function createWithHooks(data, model, customCreateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.before;\n      if (toRun) {\n        const result = await toRun(actualData, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\" && \"data\" in result;\n        if (isObject) {\n          actualData = {\n            ...actualData,\n            ...result.data\n          };\n        }\n      }\n    }\n    const customCreated = customCreateFn ? await customCreateFn.fn(actualData) : null;\n    const created = !customCreateFn || customCreateFn.executeMainFn ? await adapter.create({\n      model,\n      data: actualData,\n      forceAllowId: true\n    }) : customCreated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.after;\n      if (toRun) {\n        await toRun(created, context);\n      }\n    }\n    return created;\n  }\n  async function updateWithHooks(data, where, model, customUpdateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.update({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  async function updateManyWithHooks(data, where, model, customUpdateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.updateMany({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  return {\n    createWithHooks,\n    updateWithHooks,\n    updateManyWithHooks\n  };\n}\n\nconst createInternalAdapter = (adapter, ctx) => {\n  const options = ctx.options;\n  const secondaryStorage = options.secondaryStorage;\n  const sessionExpiration = options.session?.expiresIn || 60 * 60 * 24 * 7;\n  const { createWithHooks, updateWithHooks, updateManyWithHooks } = getWithHooks(adapter, ctx);\n  return {\n    createOAuthUser: async (user, account, context) => {\n      const createdUser = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...user\n        },\n        \"user\",\n        void 0,\n        context\n      );\n      const createdAccount = await createWithHooks(\n        {\n          ...account,\n          userId: createdUser.id || user.id,\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return {\n        user: createdUser,\n        account: createdAccount\n      };\n    },\n    createUser: async (user, context) => {\n      const createdUser = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          emailVerified: false,\n          ...user,\n          email: user.email?.toLowerCase()\n        },\n        \"user\",\n        void 0,\n        context\n      );\n      return createdUser;\n    },\n    createAccount: async (account, context) => {\n      const createdAccount = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...account\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return createdAccount;\n    },\n    listSessions: async (userId) => {\n      if (secondaryStorage) {\n        const currentList = await secondaryStorage.get(\n          `active-sessions-${userId}`\n        );\n        if (!currentList) return [];\n        const list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n        const now = Date.now();\n        const validSessions = list.filter((s) => s.expiresAt > now);\n        const sessions2 = [];\n        for (const session of validSessions) {\n          const sessionStringified = await secondaryStorage.get(session.token);\n          if (sessionStringified) {\n            const s = JSON.parse(sessionStringified);\n            const parsedSession = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, {\n              ...s.session,\n              expiresAt: new Date(s.session.expiresAt)\n            });\n            sessions2.push(parsedSession);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await adapter.findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return sessions;\n    },\n    listUsers: async (limit, offset, sortBy, where) => {\n      const users = await adapter.findMany({\n        model: \"user\",\n        limit,\n        offset,\n        sortBy,\n        where\n      });\n      return users;\n    },\n    countTotalUsers: async (where) => {\n      const total = await adapter.count({\n        model: \"user\",\n        where\n      });\n      if (typeof total === \"string\") {\n        return parseInt(total);\n      }\n      return total;\n    },\n    deleteUser: async (userId) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(`active-sessions-${userId}`);\n      }\n      if (!secondaryStorage || options.session?.storeSessionInDatabase) {\n        await adapter.deleteMany({\n          model: \"session\",\n          where: [\n            {\n              field: \"userId\",\n              value: userId\n            }\n          ]\n        });\n      }\n      await adapter.deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n    },\n    createSession: async (userId, ctx2, dontRememberMe, override, overrideAll) => {\n      const headers = ctx2.headers || ctx2.request?.headers;\n      const { id: _, ...rest } = override || {};\n      const data = {\n        ipAddress: ctx2.request || ctx2.headers ? (0,_better_auth_DcfNPS8q_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(ctx2.request || ctx2.headers, ctx2.context.options) || \"\" : \"\",\n        userAgent: headers?.get(\"user-agent\") || \"\",\n        ...rest,\n        /**\n         * If the user doesn't want to be remembered\n         * set the session to expire in 1 day.\n         * The cookie will be set to expire at the end of the session\n         */\n        expiresAt: dontRememberMe ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(60 * 60 * 24, \"sec\") : (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(sessionExpiration, \"sec\"),\n        userId,\n        token: (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(32),\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date(),\n        ...overrideAll ? rest : {}\n      };\n      const res = await createWithHooks(\n        data,\n        \"session\",\n        secondaryStorage ? {\n          fn: async (sessionData) => {\n            const currentList = await secondaryStorage.get(\n              `active-sessions-${userId}`\n            );\n            let list = [];\n            const now = Date.now();\n            if (currentList) {\n              list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n              list = list.filter((session) => session.expiresAt > now);\n            }\n            list.push({\n              token: data.token,\n              expiresAt: now + sessionExpiration * 1e3\n            });\n            await secondaryStorage.set(\n              `active-sessions-${userId}`,\n              JSON.stringify(list),\n              sessionExpiration\n            );\n            return sessionData;\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        ctx2\n      );\n      return res;\n    },\n    findSession: async (token) => {\n      if (secondaryStorage) {\n        const sessionStringified = await secondaryStorage.get(token);\n        if (!sessionStringified && !options.session?.storeSessionInDatabase) {\n          return null;\n        }\n        if (sessionStringified) {\n          const s = JSON.parse(sessionStringified);\n          const parsedSession2 = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, {\n            ...s.session,\n            expiresAt: new Date(s.session.expiresAt),\n            createdAt: new Date(s.session.createdAt),\n            updatedAt: new Date(s.session.updatedAt)\n          });\n          const parsedUser2 = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, {\n            ...s.user,\n            createdAt: new Date(s.user.createdAt),\n            updatedAt: new Date(s.user.updatedAt)\n          });\n          return {\n            session: parsedSession2,\n            user: parsedUser2\n          };\n        }\n      }\n      const session = await adapter.findOne({\n        model: \"session\",\n        where: [\n          {\n            value: token,\n            field: \"token\"\n          }\n        ]\n      });\n      if (!session) {\n        return null;\n      }\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            value: session.userId,\n            field: \"id\"\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      const parsedSession = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, session);\n      const parsedUser = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, user);\n      return {\n        session: parsedSession,\n        user: parsedUser\n      };\n    },\n    findSessions: async (sessionTokens) => {\n      if (secondaryStorage) {\n        const sessions2 = [];\n        for (const sessionToken of sessionTokens) {\n          const sessionStringified = await secondaryStorage.get(sessionToken);\n          if (sessionStringified) {\n            const s = JSON.parse(sessionStringified);\n            const session = {\n              session: {\n                ...s.session,\n                expiresAt: new Date(s.session.expiresAt)\n              },\n              user: {\n                ...s.user,\n                createdAt: new Date(s.user.createdAt),\n                updatedAt: new Date(s.user.updatedAt)\n              }\n            };\n            sessions2.push(session);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await adapter.findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: sessionTokens,\n            operator: \"in\"\n          }\n        ]\n      });\n      const userIds = sessions.map((session) => {\n        return session.userId;\n      });\n      if (!userIds.length) return [];\n      const users = await adapter.findMany({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userIds,\n            operator: \"in\"\n          }\n        ]\n      });\n      return sessions.map((session) => {\n        const user = users.find((u) => u.id === session.userId);\n        if (!user) return null;\n        return {\n          session,\n          user\n        };\n      });\n    },\n    updateSession: async (sessionToken, session, context) => {\n      const updatedSession = await updateWithHooks(\n        session,\n        [{ field: \"token\", value: sessionToken }],\n        \"session\",\n        secondaryStorage ? {\n          async fn(data) {\n            const currentSession = await secondaryStorage.get(sessionToken);\n            let updatedSession2 = null;\n            if (currentSession) {\n              const parsedSession = JSON.parse(currentSession);\n              updatedSession2 = {\n                ...parsedSession.session,\n                ...data\n              };\n              return updatedSession2;\n            } else {\n              return null;\n            }\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        context\n      );\n      return updatedSession;\n    },\n    deleteSession: async (token) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(token);\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await adapter.delete({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: token\n          }\n        ]\n      });\n    },\n    deleteAccounts: async (userId) => {\n      await adapter.deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n    },\n    deleteAccount: async (accountId) => {\n      await adapter.delete({\n        model: \"account\",\n        where: [\n          {\n            field: \"id\",\n            value: accountId\n          }\n        ]\n      });\n    },\n    deleteSessions: async (userIdOrSessionTokens) => {\n      if (secondaryStorage) {\n        if (typeof userIdOrSessionTokens === \"string\") {\n          const activeSession = await secondaryStorage.get(\n            `active-sessions-${userIdOrSessionTokens}`\n          );\n          const sessions = activeSession ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(activeSession) : [];\n          if (!sessions) return;\n          for (const session of sessions) {\n            await secondaryStorage.delete(session.token);\n          }\n        } else {\n          for (const sessionToken of userIdOrSessionTokens) {\n            const session = await secondaryStorage.get(sessionToken);\n            if (session) {\n              await secondaryStorage.delete(sessionToken);\n            }\n          }\n        }\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await adapter.deleteMany({\n        model: \"session\",\n        where: [\n          {\n            field: Array.isArray(userIdOrSessionTokens) ? \"token\" : \"userId\",\n            value: userIdOrSessionTokens,\n            operator: Array.isArray(userIdOrSessionTokens) ? \"in\" : void 0\n          }\n        ]\n      });\n    },\n    findOAuthUser: async (email, accountId, providerId) => {\n      const account = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            value: accountId,\n            field: \"accountId\"\n          }\n        ]\n      }).then((accounts) => {\n        return accounts.find((a) => a.providerId === providerId);\n      });\n      if (account) {\n        const user = await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              value: account.userId,\n              field: \"id\"\n            }\n          ]\n        });\n        if (user) {\n          return {\n            user,\n            accounts: [account]\n          };\n        } else {\n          const user2 = await adapter.findOne({\n            model: \"user\",\n            where: [\n              {\n                value: email.toLowerCase(),\n                field: \"email\"\n              }\n            ]\n          });\n          if (user2) {\n            return {\n              user: user2,\n              accounts: [account]\n            };\n          }\n          return null;\n        }\n      } else {\n        const user = await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              value: email.toLowerCase(),\n              field: \"email\"\n            }\n          ]\n        });\n        if (user) {\n          const accounts = await adapter.findMany({\n            model: \"account\",\n            where: [\n              {\n                value: user.id,\n                field: \"userId\"\n              }\n            ]\n          });\n          return {\n            user,\n            accounts: accounts || []\n          };\n        } else {\n          return null;\n        }\n      }\n    },\n    findUserByEmail: async (email, options2) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            value: email.toLowerCase(),\n            field: \"email\"\n          }\n        ]\n      });\n      if (!user) return null;\n      if (options2?.includeAccounts) {\n        const accounts = await adapter.findMany({\n          model: \"account\",\n          where: [\n            {\n              value: user.id,\n              field: \"userId\"\n            }\n          ]\n        });\n        return {\n          user,\n          accounts\n        };\n      }\n      return {\n        user,\n        accounts: []\n      };\n    },\n    findUserById: async (userId) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n      return user;\n    },\n    linkAccount: async (account, context) => {\n      const _account = await createWithHooks(\n        {\n          ...account,\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return _account;\n    },\n    updateUser: async (userId, data, context) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ],\n        \"user\",\n        void 0,\n        context\n      );\n      if (secondaryStorage && user) {\n        const listRaw = await secondaryStorage.get(`active-sessions-${userId}`);\n        if (listRaw) {\n          const now = Date.now();\n          const list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(listRaw) || [];\n          const validSessions = list.filter((s) => s.expiresAt > now);\n          await Promise.all(\n            validSessions.map(async ({ token }) => {\n              const cached = await secondaryStorage.get(token);\n              if (!cached) return;\n              const parsed = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(cached);\n              if (!parsed) return;\n              const sessionTTL = Math.max(\n                Math.floor(\n                  (new Date(parsed.session.expiresAt).getTime() - now) / 1e3\n                ),\n                0\n              );\n              await secondaryStorage.set(\n                token,\n                JSON.stringify({\n                  session: parsed.session,\n                  user\n                }),\n                sessionTTL\n              );\n            })\n          );\n        }\n      }\n      return user;\n    },\n    updateUserByEmail: async (email, data, context) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"email\",\n            value: email.toLowerCase()\n          }\n        ],\n        \"user\",\n        void 0,\n        context\n      );\n      return user;\n    },\n    updatePassword: async (userId, password, context) => {\n      await updateManyWithHooks(\n        {\n          password\n        },\n        [\n          {\n            field: \"userId\",\n            value: userId\n          },\n          {\n            field: \"providerId\",\n            value: \"credential\"\n          }\n        ],\n        \"account\",\n        void 0,\n        context\n      );\n    },\n    findAccounts: async (userId) => {\n      const accounts = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return accounts;\n    },\n    findAccount: async (accountId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByProviderId: async (accountId, providerId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          },\n          {\n            field: \"providerId\",\n            value: providerId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByUserId: async (userId) => {\n      const account = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return account;\n    },\n    updateAccount: async (id, data, context) => {\n      const account = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"account\",\n        void 0,\n        context\n      );\n      return account;\n    },\n    createVerificationValue: async (data, context) => {\n      const verification = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...data\n        },\n        \"verification\",\n        void 0,\n        context\n      );\n      return verification;\n    },\n    findVerificationValue: async (identifier) => {\n      const verification = await adapter.findMany({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ],\n        sortBy: {\n          field: \"createdAt\",\n          direction: \"desc\"\n        },\n        limit: 1\n      });\n      if (!options.verification?.disableCleanup) {\n        await adapter.deleteMany({\n          model: \"verification\",\n          where: [\n            {\n              field: \"expiresAt\",\n              value: /* @__PURE__ */ new Date(),\n              operator: \"lt\"\n            }\n          ]\n        });\n      }\n      const lastVerification = verification[0];\n      return lastVerification;\n    },\n    deleteVerificationValue: async (id) => {\n      await adapter.delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"id\",\n            value: id\n          }\n        ]\n      });\n    },\n    deleteVerificationByIdentifier: async (identifier) => {\n      await adapter.delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ]\n      });\n    },\n    updateVerificationValue: async (id, data, context) => {\n      const verification = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"verification\",\n        void 0,\n        context\n      );\n      return verification;\n    }\n  };\n};\n\nasync function getAdapter(options) {\n  if (!options.database) {\n    const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_13__.g)(options);\n    const memoryDB = Object.keys(tables).reduce((acc, key) => {\n      acc[key] = [];\n      return acc;\n    }, {});\n    _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.a.warn(\n      \"No database configuration provided. Using memory adapter in development\"\n    );\n    return (0,_better_auth_DGpadpzN_mjs__WEBPACK_IMPORTED_MODULE_16__.m)(memoryDB)(options);\n  }\n  if (typeof options.database === \"function\") {\n    return options.database(options);\n  }\n  const { kysely, databaseType } = await (0,_better_auth_DwzM_9N1_mjs__WEBPACK_IMPORTED_MODULE_15__.c)(options);\n  if (!kysely) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_14__.B(\"Failed to initialize database adapter\");\n  }\n  return (0,_better_auth_DwzM_9N1_mjs__WEBPACK_IMPORTED_MODULE_15__.k)(kysely, {\n    type: databaseType || \"sqlite\",\n    debugLogs: \"debugLogs\" in options.database ? options.database.debugLogs : false\n  })(options);\n}\nfunction convertToDB(fields, values) {\n  let result = values.id ? {\n    id: values.id\n  } : {};\n  for (const key in fields) {\n    const field = fields[key];\n    const value = values[key];\n    if (value === void 0) {\n      continue;\n    }\n    result[field.fieldName || key] = value;\n  }\n  return result;\n}\nfunction convertFromDB(fields, values) {\n  if (!values) {\n    return null;\n  }\n  let result = {\n    id: values.id\n  };\n  for (const [key, value] of Object.entries(fields)) {\n    result[key] = values[value.fieldName || key];\n  }\n  return result;\n}\n\nfunction getSchema(config) {\n  const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_13__.g)(config);\n  let schema = {};\n  for (const key in tables) {\n    const table = tables[key];\n    const fields = table.fields;\n    let actualFields = {};\n    Object.entries(fields).forEach(([key2, field]) => {\n      actualFields[field.fieldName || key2] = field;\n      if (field.references) {\n        const refTable = tables[field.references.model];\n        if (refTable) {\n          actualFields[field.fieldName || key2].references = {\n            model: refTable.modelName,\n            field: field.references.field\n          };\n        }\n      }\n    });\n    if (schema[table.modelName]) {\n      schema[table.modelName].fields = {\n        ...schema[table.modelName].fields,\n        ...actualFields\n      };\n      continue;\n    }\n    schema[table.modelName] = {\n      fields: actualFields,\n      order: table.order || Infinity\n    };\n  }\n  return schema;\n}\n\nconst postgresMap = {\n  string: [\"character varying\", \"varchar\", \"text\"],\n  number: [\n    \"int4\",\n    \"integer\",\n    \"bigint\",\n    \"smallint\",\n    \"numeric\",\n    \"real\",\n    \"double precision\"\n  ],\n  boolean: [\"bool\", \"boolean\"],\n  date: [\"timestamp\", \"date\"]\n};\nconst mysqlMap = {\n  string: [\"varchar\", \"text\"],\n  number: [\n    \"integer\",\n    \"int\",\n    \"bigint\",\n    \"smallint\",\n    \"decimal\",\n    \"float\",\n    \"double\"\n  ],\n  boolean: [\"boolean\", \"tinyint\"],\n  date: [\"timestamp\", \"datetime\", \"date\"]\n};\nconst sqliteMap = {\n  string: [\"TEXT\"],\n  number: [\"INTEGER\", \"REAL\"],\n  boolean: [\"INTEGER\", \"BOOLEAN\"],\n  // 0 or 1\n  date: [\"DATE\", \"INTEGER\"]\n};\nconst mssqlMap = {\n  string: [\"text\", \"varchar\"],\n  number: [\"int\", \"bigint\", \"smallint\", \"decimal\", \"float\", \"double\"],\n  boolean: [\"bit\", \"smallint\"],\n  date: [\"datetime\", \"date\"]\n};\nconst map = {\n  postgres: postgresMap,\n  mysql: mysqlMap,\n  sqlite: sqliteMap,\n  mssql: mssqlMap\n};\nfunction matchType(columnDataType, fieldType, dbType) {\n  function normalize(type) {\n    return type.toLowerCase().split(\"(\")[0].trim();\n  }\n  if (fieldType === \"string[]\" || fieldType === \"number[]\") {\n    return columnDataType.toLowerCase().includes(\"json\");\n  }\n  const types = map[dbType];\n  const expected = Array.isArray(fieldType) ? types[\"string\"].map((t) => t.toLowerCase()) : types[fieldType].map((t) => t.toLowerCase());\n  return expected.includes(normalize(columnDataType));\n}\nasync function getMigrations(config) {\n  const betterAuthSchema = getSchema(config);\n  const logger = (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.c)(config.logger);\n  let { kysely: db, databaseType: dbType } = await (0,_better_auth_DwzM_9N1_mjs__WEBPACK_IMPORTED_MODULE_15__.c)(config);\n  if (!dbType) {\n    logger.warn(\n      \"Could not determine database type, defaulting to sqlite. Please provide a type in the database options to avoid this.\"\n    );\n    dbType = \"sqlite\";\n  }\n  if (!db) {\n    logger.error(\n      \"Only kysely adapter is supported for migrations. You can use `generate` command to generate the schema, if you're using a different adapter.\"\n    );\n    process.exit(1);\n  }\n  const tableMetadata = await db.introspection.getTables();\n  const toBeCreated = [];\n  const toBeAdded = [];\n  for (const [key, value] of Object.entries(betterAuthSchema)) {\n    const table = tableMetadata.find((t) => t.name === key);\n    if (!table) {\n      const tIndex = toBeCreated.findIndex((t) => t.table === key);\n      const tableData = {\n        table: key,\n        fields: value.fields,\n        order: value.order || Infinity\n      };\n      const insertIndex = toBeCreated.findIndex(\n        (t) => (t.order || Infinity) > tableData.order\n      );\n      if (insertIndex === -1) {\n        if (tIndex === -1) {\n          toBeCreated.push(tableData);\n        } else {\n          toBeCreated[tIndex].fields = {\n            ...toBeCreated[tIndex].fields,\n            ...value.fields\n          };\n        }\n      } else {\n        toBeCreated.splice(insertIndex, 0, tableData);\n      }\n      continue;\n    }\n    let toBeAddedFields = {};\n    for (const [fieldName, field] of Object.entries(value.fields)) {\n      const column = table.columns.find((c) => c.name === fieldName);\n      if (!column) {\n        toBeAddedFields[fieldName] = field;\n        continue;\n      }\n      if (matchType(column.dataType, field.type, dbType)) {\n        continue;\n      } else {\n        logger.warn(\n          `Field ${fieldName} in table ${key} has a different type in the database. Expected ${field.type} but got ${column.dataType}.`\n        );\n      }\n    }\n    if (Object.keys(toBeAddedFields).length > 0) {\n      toBeAdded.push({\n        table: key,\n        fields: toBeAddedFields,\n        order: value.order || Infinity\n      });\n    }\n  }\n  const migrations = [];\n  function getType(field, fieldName) {\n    const type = field.type;\n    const typeMap = {\n      string: {\n        sqlite: \"text\",\n        postgres: \"text\",\n        mysql: field.unique ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\",\n        mssql: field.unique || field.sortable ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\"\n      },\n      boolean: {\n        sqlite: \"integer\",\n        postgres: \"boolean\",\n        mysql: \"boolean\",\n        mssql: \"smallint\"\n      },\n      number: {\n        sqlite: field.bigint ? \"bigint\" : \"integer\",\n        postgres: field.bigint ? \"bigint\" : \"integer\",\n        mysql: field.bigint ? \"bigint\" : \"integer\",\n        mssql: field.bigint ? \"bigint\" : \"integer\"\n      },\n      date: {\n        sqlite: \"date\",\n        postgres: \"timestamp\",\n        mysql: \"datetime\",\n        mssql: \"datetime\"\n      },\n      id: {\n        postgres: config.advanced?.database?.useNumberId ? \"serial\" : \"text\",\n        mysql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        mssql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        sqlite: config.advanced?.database?.useNumberId ? \"integer\" : \"text\"\n      }\n    };\n    if (fieldName === \"id\" || field.references?.field === \"id\") {\n      return typeMap.id[dbType];\n    }\n    if (dbType === \"sqlite\" && (type === \"string[]\" || type === \"number[]\")) {\n      return \"text\";\n    }\n    if (type === \"string[]\" || type === \"number[]\") {\n      return \"jsonb\";\n    }\n    if (Array.isArray(type)) {\n      return \"text\";\n    }\n    return typeMap[type][dbType || \"sqlite\"];\n  }\n  if (toBeAdded.length) {\n    for (const table of toBeAdded) {\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        const exec = db.schema.alterTable(table.table).addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            );\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          return col;\n        });\n        migrations.push(exec);\n      }\n    }\n  }\n  if (toBeCreated.length) {\n    for (const table of toBeCreated) {\n      let dbT = db.schema.createTable(table.table).addColumn(\n        \"id\",\n        config.advanced?.database?.useNumberId ? dbType === \"postgres\" ? \"serial\" : \"integer\" : dbType === \"mysql\" || dbType === \"mssql\" ? \"varchar(36)\" : \"text\",\n        (col) => {\n          if (config.advanced?.database?.useNumberId) {\n            if (dbType === \"postgres\") {\n              return col.primaryKey().notNull();\n            }\n            return col.autoIncrement().primaryKey().notNull();\n          }\n          return col.primaryKey().notNull();\n        }\n      );\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        dbT = dbT.addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            );\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          return col;\n        });\n      }\n      migrations.push(dbT);\n    }\n  }\n  async function runMigrations() {\n    for (const migration of migrations) {\n      await migration.execute();\n    }\n  }\n  async function compileMigrations() {\n    const compiled = migrations.map((m) => m.compile().sql);\n    return compiled.join(\";\\n\\n\") + \";\";\n  }\n  return { toBeCreated, toBeAdded, runMigrations, compileMigrations };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getDate)\n/* harmony export */ });\nconst getDate = (span, unit = \"ms\") => {\n  return new Date(Date.now() + (unit === \"sec\" ? span * 1e3 : span));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ1c2RDllU3gubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRXdCIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5DVzZEOWVTeC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ2V0RGF0ZSA9IChzcGFuLCB1bml0ID0gXCJtc1wiKSA9PiB7XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLm5vdygpICsgKHVuaXQgPT09IFwic2VjXCIgPyBzcGFuICogMWUzIDogc3BhbikpO1xufTtcblxuZXhwb3J0IHsgZ2V0RGF0ZSBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.Cbhy6WDJ.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.Cbhy6WDJ.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   b: () => (/* binding */ betterAuth)\n/* harmony export */ });\n/* harmony import */ var _api_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/index.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/api/index.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! defu */ \"(action-browser)/../../node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/index.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.ByruPN9q.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs\");\n/* harmony import */ var _better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.DORkW_Ge.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./better-auth.n2KFGwjY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./better-auth.DBGfIDnh.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.z3dsxLxE.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! better-call */ \"(action-browser)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.YwDQhoPc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\");\n/* harmony import */ var _better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.VTXNLFMT.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_SECRET = \"better-auth-secret-123456789\";\n\nconst init = async (options) => {\n  const adapter = await (0,_better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(options);\n  const plugins = options.plugins || [];\n  const internalPlugins = getInternalPlugins(options);\n  const logger = (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_7__.c)(options.logger);\n  const baseURL = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_15__.a)(options.baseURL, options.basePath);\n  const secret = options.secret || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__.e.BETTER_AUTH_SECRET || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__.e.AUTH_SECRET || DEFAULT_SECRET;\n  if (secret === DEFAULT_SECRET) {\n    if (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__.a) {\n      logger.error(\n        \"You are using the default secret. Please set `BETTER_AUTH_SECRET` in your environment variables or pass `secret` in your auth config.\"\n      );\n    }\n  }\n  options = {\n    ...options,\n    secret,\n    baseURL: baseURL ? new URL(baseURL).origin : \"\",\n    basePath: options.basePath || \"/api/auth\",\n    plugins: plugins.concat(internalPlugins)\n  };\n  const cookies = (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_6__.getCookies)(options);\n  const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(options);\n  const providers = Object.keys(options.socialProviders || {}).map((key) => {\n    const value = options.socialProviders?.[key];\n    if (!value || value.enabled === false) {\n      return null;\n    }\n    if (!value.clientId) {\n      logger.warn(\n        `Social provider ${key} is missing clientId or clientSecret`\n      );\n    }\n    const provider = _better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_8__.t[key](\n      value\n      // TODO: fix this\n    );\n    provider.disableImplicitSignUp = value.disableImplicitSignUp;\n    return provider;\n  }).filter((x) => x !== null);\n  const generateIdFunc = ({ model, size }) => {\n    if (typeof options.advanced?.generateId === \"function\") {\n      return options.advanced.generateId({ model, size });\n    }\n    if (typeof options?.advanced?.database?.generateId === \"function\") {\n      return options.advanced.database.generateId({ model, size });\n    }\n    return (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_7__.g)(size);\n  };\n  const ctx = {\n    appName: options.appName || \"Better Auth\",\n    socialProviders: providers,\n    options,\n    tables,\n    trustedOrigins: getTrustedOrigins(options),\n    baseURL: baseURL || \"\",\n    sessionConfig: {\n      updateAge: options.session?.updateAge !== void 0 ? options.session.updateAge : 24 * 60 * 60,\n      // 24 hours\n      expiresIn: options.session?.expiresIn || 60 * 60 * 24 * 7,\n      // 7 days\n      freshAge: options.session?.freshAge === void 0 ? 60 * 60 * 24 : options.session.freshAge\n    },\n    secret,\n    rateLimit: {\n      ...options.rateLimit,\n      enabled: options.rateLimit?.enabled ?? _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__.a,\n      window: options.rateLimit?.window || 10,\n      max: options.rateLimit?.max || 100,\n      storage: options.rateLimit?.storage || (options.secondaryStorage ? \"secondary-storage\" : \"memory\")\n    },\n    authCookies: cookies,\n    logger,\n    generateId: generateIdFunc,\n    session: null,\n    secondaryStorage: options.secondaryStorage,\n    password: {\n      hash: options.emailAndPassword?.password?.hash || _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__.hashPassword,\n      verify: options.emailAndPassword?.password?.verify || _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__.verifyPassword,\n      config: {\n        minPasswordLength: options.emailAndPassword?.minPasswordLength || 8,\n        maxPasswordLength: options.emailAndPassword?.maxPasswordLength || 128\n      },\n      checkPassword: _better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_14__.c\n    },\n    setNewSession(session) {\n      this.newSession = session;\n    },\n    newSession: null,\n    adapter,\n    internalAdapter: (0,_better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(adapter, {\n      options,\n      hooks: options.databaseHooks ? [options.databaseHooks] : []}),\n    createAuthCookie: (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_6__.createCookieGetter)(options),\n    async runMigrations() {\n      if (!options.database || \"updateMany\" in options.database) {\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__.B(\n          \"Database is not provided or it's an adapter. Migrations are only supported with a database instance.\"\n        );\n      }\n      const { runMigrations } = await (0,_better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(options);\n      await runMigrations();\n    }\n  };\n  let { context } = runPluginInit(ctx);\n  return context;\n};\nfunction runPluginInit(ctx) {\n  let options = ctx.options;\n  const plugins = options.plugins || [];\n  let context = ctx;\n  const dbHooks = [];\n  for (const plugin of plugins) {\n    if (plugin.init) {\n      const result = plugin.init(context);\n      if (typeof result === \"object\") {\n        if (result.options) {\n          const { databaseHooks, ...restOpts } = result.options;\n          if (databaseHooks) {\n            dbHooks.push(databaseHooks);\n          }\n          options = (0,defu__WEBPACK_IMPORTED_MODULE_1__.defu)(options, restOpts);\n        }\n        if (result.context) {\n          context = {\n            ...context,\n            ...result.context\n          };\n        }\n      }\n    }\n  }\n  dbHooks.push(options.databaseHooks);\n  context.internalAdapter = (0,_better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(ctx.adapter, {\n    options,\n    hooks: dbHooks.filter((u) => u !== void 0),\n    generateId: ctx.generateId\n  });\n  context.options = options;\n  return { context };\n}\nfunction getInternalPlugins(options) {\n  const plugins = [];\n  if (options.advanced?.crossSubDomainCookies?.enabled) ;\n  return plugins;\n}\nfunction getTrustedOrigins(options) {\n  const baseURL = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_15__.a)(options.baseURL, options.basePath);\n  if (!baseURL) {\n    return [];\n  }\n  const trustedOrigins = [new URL(baseURL).origin];\n  if (options.trustedOrigins && Array.isArray(options.trustedOrigins)) {\n    trustedOrigins.push(...options.trustedOrigins);\n  }\n  const envTrustedOrigins = _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__.e.BETTER_AUTH_TRUSTED_ORIGINS;\n  if (envTrustedOrigins) {\n    trustedOrigins.push(...envTrustedOrigins.split(\",\"));\n  }\n  if (trustedOrigins.filter((x) => !x).length) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__.B(\n      \"A provided trusted origin is invalid, make sure your trusted origins list is properly defined.\"\n    );\n  }\n  return trustedOrigins;\n}\n\nconst betterAuth = (options) => {\n  const authContext = init(options);\n  const { api } = (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getEndpoints)(authContext, options);\n  const errorCodes = options.plugins?.reduce((acc, plugin) => {\n    if (plugin.$ERROR_CODES) {\n      return {\n        ...acc,\n        ...plugin.$ERROR_CODES\n      };\n    }\n    return acc;\n  }, {});\n  return {\n    handler: async (request) => {\n      const ctx = await authContext;\n      const basePath = ctx.options.basePath || \"/api/auth\";\n      if (!ctx.options.baseURL) {\n        const baseURL = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_15__.a)(void 0, basePath, request);\n        if (baseURL) {\n          ctx.baseURL = baseURL;\n          ctx.options.baseURL = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_15__.g)(ctx.baseURL) || void 0;\n        } else {\n          throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__.B(\n            \"Could not get base URL from request. Please provide a valid base URL.\"\n          );\n        }\n      }\n      ctx.trustedOrigins = [\n        ...options.trustedOrigins ? Array.isArray(options.trustedOrigins) ? options.trustedOrigins : await options.trustedOrigins(request) : [],\n        ctx.options.baseURL\n      ];\n      const { handler } = (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.router)(ctx, options);\n      return handler(request);\n    },\n    api,\n    options,\n    $context: authContext,\n    $Infer: {},\n    $ERROR_CODES: {\n      ...errorCodes,\n      ..._better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_8__.B\n    }\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.Cbhy6WDJ.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ capitalizeFirstLetter)\n/* harmony export */ });\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRC0yQ21Fd3oubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRXNDIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5ELTJDbUV3ei5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuXG5leHBvcnQgeyBjYXBpdGFsaXplRmlyc3RMZXR0ZXIgYXMgYyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ logger),\n/* harmony export */   c: () => (/* binding */ createLogger),\n/* harmony export */   g: () => (/* binding */ generateId),\n/* harmony export */   l: () => (/* binding */ levels),\n/* harmony export */   s: () => (/* binding */ shouldPublishLog)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n\n\nconst generateId = (size) => {\n  return (0,_better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__.createRandomStringGenerator)(\"a-z\", \"A-Z\", \"0-9\")(size || 32);\n};\n\nconst levels = [\"info\", \"success\", \"warn\", \"error\", \"debug\"];\nfunction shouldPublishLog(currentLogLevel, logLevel) {\n  return levels.indexOf(logLevel) <= levels.indexOf(currentLogLevel);\n}\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    red: \"\\x1B[31m\",\n    green: \"\\x1B[32m\",\n    yellow: \"\\x1B[33m\",\n    blue: \"\\x1B[34m\",\n    magenta: \"\\x1B[35m\"}};\nconst levelColors = {\n  info: colors.fg.blue,\n  success: colors.fg.green,\n  warn: colors.fg.yellow,\n  error: colors.fg.red,\n  debug: colors.fg.magenta\n};\nconst formatMessage = (level, message) => {\n  const timestamp = (/* @__PURE__ */ new Date()).toISOString();\n  return `${colors.dim}${timestamp}${colors.reset} ${levelColors[level]}${level.toUpperCase()}${colors.reset} ${colors.bright}[Better Auth]:${colors.reset} ${message}`;\n};\nconst createLogger = (options) => {\n  const enabled = options?.disabled !== true;\n  const logLevel = options?.level ?? \"error\";\n  const LogFunc = (level, message, args = []) => {\n    if (!enabled || !shouldPublishLog(logLevel, level)) {\n      return;\n    }\n    const formattedMessage = formatMessage(level, message);\n    if (!options || typeof options.log !== \"function\") {\n      if (level === \"error\") {\n        console.error(formattedMessage, ...args);\n      } else if (level === \"warn\") {\n        console.warn(formattedMessage, ...args);\n      } else {\n        console.log(formattedMessage, ...args);\n      }\n      return;\n    }\n    options.log(level === \"success\" ? \"info\" : level, message, ...args);\n  };\n  return Object.fromEntries(\n    levels.map((level) => [\n      level,\n      (...[message, ...args]) => LogFunc(level, message, args)\n    ])\n  );\n};\nconst logger = createLogger();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguREJHZklEbmgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF3RTs7QUFFeEU7QUFDQSxTQUFTLHNGQUEyQjtBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsY0FBYyxnQkFBZ0IsY0FBYyxFQUFFLFFBQVE7QUFDdEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRStGIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5EQkdmSURuaC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUmFuZG9tU3RyaW5nR2VuZXJhdG9yIH0gZnJvbSAnQGJldHRlci1hdXRoL3V0aWxzL3JhbmRvbSc7XG5cbmNvbnN0IGdlbmVyYXRlSWQgPSAoc2l6ZSkgPT4ge1xuICByZXR1cm4gY3JlYXRlUmFuZG9tU3RyaW5nR2VuZXJhdG9yKFwiYS16XCIsIFwiQS1aXCIsIFwiMC05XCIpKHNpemUgfHwgMzIpO1xufTtcblxuY29uc3QgbGV2ZWxzID0gW1wiaW5mb1wiLCBcInN1Y2Nlc3NcIiwgXCJ3YXJuXCIsIFwiZXJyb3JcIiwgXCJkZWJ1Z1wiXTtcbmZ1bmN0aW9uIHNob3VsZFB1Ymxpc2hMb2coY3VycmVudExvZ0xldmVsLCBsb2dMZXZlbCkge1xuICByZXR1cm4gbGV2ZWxzLmluZGV4T2YobG9nTGV2ZWwpIDw9IGxldmVscy5pbmRleE9mKGN1cnJlbnRMb2dMZXZlbCk7XG59XG5jb25zdCBjb2xvcnMgPSB7XG4gIHJlc2V0OiBcIlxceDFCWzBtXCIsXG4gIGJyaWdodDogXCJcXHgxQlsxbVwiLFxuICBkaW06IFwiXFx4MUJbMm1cIixcbiAgZmc6IHtcbiAgICByZWQ6IFwiXFx4MUJbMzFtXCIsXG4gICAgZ3JlZW46IFwiXFx4MUJbMzJtXCIsXG4gICAgeWVsbG93OiBcIlxceDFCWzMzbVwiLFxuICAgIGJsdWU6IFwiXFx4MUJbMzRtXCIsXG4gICAgbWFnZW50YTogXCJcXHgxQlszNW1cIn19O1xuY29uc3QgbGV2ZWxDb2xvcnMgPSB7XG4gIGluZm86IGNvbG9ycy5mZy5ibHVlLFxuICBzdWNjZXNzOiBjb2xvcnMuZmcuZ3JlZW4sXG4gIHdhcm46IGNvbG9ycy5mZy55ZWxsb3csXG4gIGVycm9yOiBjb2xvcnMuZmcucmVkLFxuICBkZWJ1ZzogY29sb3JzLmZnLm1hZ2VudGFcbn07XG5jb25zdCBmb3JtYXRNZXNzYWdlID0gKGxldmVsLCBtZXNzYWdlKSA9PiB7XG4gIGNvbnN0IHRpbWVzdGFtcCA9ICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkudG9JU09TdHJpbmcoKTtcbiAgcmV0dXJuIGAke2NvbG9ycy5kaW19JHt0aW1lc3RhbXB9JHtjb2xvcnMucmVzZXR9ICR7bGV2ZWxDb2xvcnNbbGV2ZWxdfSR7bGV2ZWwudG9VcHBlckNhc2UoKX0ke2NvbG9ycy5yZXNldH0gJHtjb2xvcnMuYnJpZ2h0fVtCZXR0ZXIgQXV0aF06JHtjb2xvcnMucmVzZXR9ICR7bWVzc2FnZX1gO1xufTtcbmNvbnN0IGNyZWF0ZUxvZ2dlciA9IChvcHRpb25zKSA9PiB7XG4gIGNvbnN0IGVuYWJsZWQgPSBvcHRpb25zPy5kaXNhYmxlZCAhPT0gdHJ1ZTtcbiAgY29uc3QgbG9nTGV2ZWwgPSBvcHRpb25zPy5sZXZlbCA/PyBcImVycm9yXCI7XG4gIGNvbnN0IExvZ0Z1bmMgPSAobGV2ZWwsIG1lc3NhZ2UsIGFyZ3MgPSBbXSkgPT4ge1xuICAgIGlmICghZW5hYmxlZCB8fCAhc2hvdWxkUHVibGlzaExvZyhsb2dMZXZlbCwgbGV2ZWwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGZvcm1hdHRlZE1lc3NhZ2UgPSBmb3JtYXRNZXNzYWdlKGxldmVsLCBtZXNzYWdlKTtcbiAgICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMubG9nICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmIChsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0dGVkTWVzc2FnZSwgLi4uYXJncyk7XG4gICAgICB9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5cIikge1xuICAgICAgICBjb25zb2xlLndhcm4oZm9ybWF0dGVkTWVzc2FnZSwgLi4uYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhmb3JtYXR0ZWRNZXNzYWdlLCAuLi5hcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9ucy5sb2cobGV2ZWwgPT09IFwic3VjY2Vzc1wiID8gXCJpbmZvXCIgOiBsZXZlbCwgbWVzc2FnZSwgLi4uYXJncyk7XG4gIH07XG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgbGV2ZWxzLm1hcCgobGV2ZWwpID0+IFtcbiAgICAgIGxldmVsLFxuICAgICAgKC4uLlttZXNzYWdlLCAuLi5hcmdzXSkgPT4gTG9nRnVuYyhsZXZlbCwgbWVzc2FnZSwgYXJncylcbiAgICBdKVxuICApO1xufTtcbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcigpO1xuXG5leHBvcnQgeyBsb2dnZXIgYXMgYSwgY3JlYXRlTG9nZ2VyIGFzIGMsIGdlbmVyYXRlSWQgYXMgZywgbGV2ZWxzIGFzIGwsIHNob3VsZFB1Ymxpc2hMb2cgYXMgcyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   m: () => (/* binding */ memoryAdapter)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-call */ \"(action-browser)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./better-auth.DBGfIDnh.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.gBl3F_xa.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst memoryAdapter = (db, config) => (0,_better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_8__.c)({\n  config: {\n    adapterId: \"memory\",\n    adapterName: \"Memory Adapter\",\n    usePlural: false,\n    debugLogs: config?.debugLogs || false,\n    customTransformInput(props) {\n      if (props.options.advanced?.database?.useNumberId && props.field === \"id\" && props.action === \"create\") {\n        return db[props.model].length + 1;\n      }\n      return props.data;\n    }\n  },\n  adapter: ({ getFieldName, options, debugLog }) => {\n    function convertWhereClause(where, model) {\n      const table = db[model];\n      if (!table) {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_7__.a.error(\n          `[MemoryAdapter] Model ${model} not found in the DB`,\n          Object.keys(db)\n        );\n        throw new Error(`Model ${model} not found`);\n      }\n      return table.filter((record) => {\n        return where.every((clause) => {\n          let { field, value, operator } = clause;\n          if (operator === \"in\") {\n            if (!Array.isArray(value)) {\n              throw new Error(\"Value must be an array\");\n            }\n            return value.includes(record[field]);\n          } else if (operator === \"contains\") {\n            return record[field].includes(value);\n          } else if (operator === \"starts_with\") {\n            return record[field].startsWith(value);\n          } else if (operator === \"ends_with\") {\n            return record[field].endsWith(value);\n          } else {\n            return record[field] === value;\n          }\n        });\n      });\n    }\n    return {\n      create: async ({ model, data }) => {\n        if (options.advanced?.database?.useNumberId) {\n          data.id = db[model].length + 1;\n        }\n        if (!db[model]) {\n          db[model] = [];\n        }\n        db[model].push(data);\n        return data;\n      },\n      findOne: async ({ model, where }) => {\n        const res = convertWhereClause(where, model);\n        const record = res[0] || null;\n        return record;\n      },\n      findMany: async ({ model, where, sortBy, limit, offset }) => {\n        let table = db[model];\n        if (where) {\n          table = convertWhereClause(where, model);\n        }\n        if (sortBy) {\n          table = table.sort((a, b) => {\n            const field = getFieldName({ model, field: sortBy.field });\n            if (sortBy.direction === \"asc\") {\n              return a[field] > b[field] ? 1 : -1;\n            } else {\n              return a[field] < b[field] ? 1 : -1;\n            }\n          });\n        }\n        if (offset !== void 0) {\n          table = table.slice(offset);\n        }\n        if (limit !== void 0) {\n          table = table.slice(0, limit);\n        }\n        return table;\n      },\n      count: async ({ model }) => {\n        return db[model].length;\n      },\n      update: async ({ model, where, update }) => {\n        const res = convertWhereClause(where, model);\n        res.forEach((record) => {\n          Object.assign(record, update);\n        });\n        return res[0] || null;\n      },\n      delete: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, model);\n        db[model] = table.filter((record) => !res.includes(record));\n      },\n      deleteMany: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, model);\n        let count = 0;\n        db[model] = table.filter((record) => {\n          if (res.includes(record)) {\n            count++;\n            return false;\n          }\n          return !res.includes(record);\n        });\n        return count;\n      },\n      updateMany({ model, where, update }) {\n        const res = convertWhereClause(where, model);\n        res.forEach((record) => {\n          Object.assign(record, update);\n        });\n        return res[0] || null;\n      }\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguREdwYWRwek4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBbUM7QUFDbkI7QUFDSztBQUNZO0FBQ0Y7QUFDRDtBQUNJO0FBQ0M7QUFDckI7QUFDZ0I7QUFDRjtBQUNJO0FBQ0g7QUFDTztBQUNxQjtBQUNPOztBQUVoRSxzQ0FBc0MsNERBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxjQUFjLGlDQUFpQztBQUMvQztBQUNBO0FBQ0E7QUFDQSxRQUFRLHdEQUFNO0FBQ2QsbUNBQW1DLE9BQU87QUFDMUM7QUFDQTtBQUNBLGlDQUFpQyxPQUFPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5QkFBeUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EsdUJBQXVCLGFBQWE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCx3QkFBd0IsY0FBYztBQUN0QztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AseUJBQXlCLHFDQUFxQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsNEJBQTRCO0FBQ3JFO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0EsT0FBTztBQUNQLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLHVCQUF1QixjQUFjO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCwyQkFBMkIsY0FBYztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUU2QiIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguREdwYWRwek4ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL3JhbmRvbSc7XG5pbXBvcnQgJ3pvZC92NCc7XG5pbXBvcnQgJ2JldHRlci1jYWxsJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2hhc2gnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy9jaGFjaGEnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy91dGlscyc7XG5pbXBvcnQgJ0Bub2JsZS9jaXBoZXJzL3dlYmNyeXB0byc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9iYXNlNjQnO1xuaW1wb3J0ICdqb3NlJztcbmltcG9ydCAnQG5vYmxlL2hhc2hlcy9zY3J5cHQnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaGV4JztcbmltcG9ydCAnQG5vYmxlL2hhc2hlcy91dGlscyc7XG5pbXBvcnQgJy4vYmV0dGVyLWF1dGguQjRRb3hkZ2MubWpzJztcbmltcG9ydCB7IGEgYXMgbG9nZ2VyIH0gZnJvbSAnLi9iZXR0ZXItYXV0aC5EQkdmSURuaC5tanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVBZGFwdGVyIH0gZnJvbSAnLi9iZXR0ZXItYXV0aC5nQmwzRl94YS5tanMnO1xuXG5jb25zdCBtZW1vcnlBZGFwdGVyID0gKGRiLCBjb25maWcpID0+IGNyZWF0ZUFkYXB0ZXIoe1xuICBjb25maWc6IHtcbiAgICBhZGFwdGVySWQ6IFwibWVtb3J5XCIsXG4gICAgYWRhcHRlck5hbWU6IFwiTWVtb3J5IEFkYXB0ZXJcIixcbiAgICB1c2VQbHVyYWw6IGZhbHNlLFxuICAgIGRlYnVnTG9nczogY29uZmlnPy5kZWJ1Z0xvZ3MgfHwgZmFsc2UsXG4gICAgY3VzdG9tVHJhbnNmb3JtSW5wdXQocHJvcHMpIHtcbiAgICAgIGlmIChwcm9wcy5vcHRpb25zLmFkdmFuY2VkPy5kYXRhYmFzZT8udXNlTnVtYmVySWQgJiYgcHJvcHMuZmllbGQgPT09IFwiaWRcIiAmJiBwcm9wcy5hY3Rpb24gPT09IFwiY3JlYXRlXCIpIHtcbiAgICAgICAgcmV0dXJuIGRiW3Byb3BzLm1vZGVsXS5sZW5ndGggKyAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BzLmRhdGE7XG4gICAgfVxuICB9LFxuICBhZGFwdGVyOiAoeyBnZXRGaWVsZE5hbWUsIG9wdGlvbnMsIGRlYnVnTG9nIH0pID0+IHtcbiAgICBmdW5jdGlvbiBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIG1vZGVsKSB7XG4gICAgICBjb25zdCB0YWJsZSA9IGRiW21vZGVsXTtcbiAgICAgIGlmICghdGFibGUpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICAgIGBbTWVtb3J5QWRhcHRlcl0gTW9kZWwgJHttb2RlbH0gbm90IGZvdW5kIGluIHRoZSBEQmAsXG4gICAgICAgICAgT2JqZWN0LmtleXMoZGIpXG4gICAgICAgICk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTW9kZWwgJHttb2RlbH0gbm90IGZvdW5kYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFibGUuZmlsdGVyKChyZWNvcmQpID0+IHtcbiAgICAgICAgcmV0dXJuIHdoZXJlLmV2ZXJ5KChjbGF1c2UpID0+IHtcbiAgICAgICAgICBsZXQgeyBmaWVsZCwgdmFsdWUsIG9wZXJhdG9yIH0gPSBjbGF1c2U7XG4gICAgICAgICAgaWYgKG9wZXJhdG9yID09PSBcImluXCIpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUgbXVzdCBiZSBhbiBhcnJheVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5pbmNsdWRlcyhyZWNvcmRbZmllbGRdKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcImNvbnRhaW5zXCIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvcmRbZmllbGRdLmluY2x1ZGVzKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcInN0YXJ0c193aXRoXCIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvcmRbZmllbGRdLnN0YXJ0c1dpdGgodmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09IFwiZW5kc193aXRoXCIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvcmRbZmllbGRdLmVuZHNXaXRoKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlY29yZFtmaWVsZF0gPT09IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZTogYXN5bmMgKHsgbW9kZWwsIGRhdGEgfSkgPT4ge1xuICAgICAgICBpZiAob3B0aW9ucy5hZHZhbmNlZD8uZGF0YWJhc2U/LnVzZU51bWJlcklkKSB7XG4gICAgICAgICAgZGF0YS5pZCA9IGRiW21vZGVsXS5sZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGJbbW9kZWxdKSB7XG4gICAgICAgICAgZGJbbW9kZWxdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZGJbbW9kZWxdLnB1c2goZGF0YSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSxcbiAgICAgIGZpbmRPbmU6IGFzeW5jICh7IG1vZGVsLCB3aGVyZSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgbW9kZWwpO1xuICAgICAgICBjb25zdCByZWNvcmQgPSByZXNbMF0gfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgIH0sXG4gICAgICBmaW5kTWFueTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlLCBzb3J0QnksIGxpbWl0LCBvZmZzZXQgfSkgPT4ge1xuICAgICAgICBsZXQgdGFibGUgPSBkYlttb2RlbF07XG4gICAgICAgIGlmICh3aGVyZSkge1xuICAgICAgICAgIHRhYmxlID0gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCBtb2RlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvcnRCeSkge1xuICAgICAgICAgIHRhYmxlID0gdGFibGUuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXRGaWVsZE5hbWUoeyBtb2RlbCwgZmllbGQ6IHNvcnRCeS5maWVsZCB9KTtcbiAgICAgICAgICAgIGlmIChzb3J0QnkuZGlyZWN0aW9uID09PSBcImFzY1wiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhW2ZpZWxkXSA+IGJbZmllbGRdID8gMSA6IC0xO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFbZmllbGRdIDwgYltmaWVsZF0gPyAxIDogLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgdGFibGUgPSB0YWJsZS5zbGljZShvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgdGFibGUgPSB0YWJsZS5zbGljZSgwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgICAgfSxcbiAgICAgIGNvdW50OiBhc3luYyAoeyBtb2RlbCB9KSA9PiB7XG4gICAgICAgIHJldHVybiBkYlttb2RlbF0ubGVuZ3RoO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlLCB1cGRhdGUgfSkgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIG1vZGVsKTtcbiAgICAgICAgcmVzLmZvckVhY2goKHJlY29yZCkgPT4ge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVjb3JkLCB1cGRhdGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc1swXSB8fCBudWxsO1xuICAgICAgfSxcbiAgICAgIGRlbGV0ZTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlIH0pID0+IHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBkYlttb2RlbF07XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgbW9kZWwpO1xuICAgICAgICBkYlttb2RlbF0gPSB0YWJsZS5maWx0ZXIoKHJlY29yZCkgPT4gIXJlcy5pbmNsdWRlcyhyZWNvcmQpKTtcbiAgICAgIH0sXG4gICAgICBkZWxldGVNYW55OiBhc3luYyAoeyBtb2RlbCwgd2hlcmUgfSkgPT4ge1xuICAgICAgICBjb25zdCB0YWJsZSA9IGRiW21vZGVsXTtcbiAgICAgICAgY29uc3QgcmVzID0gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCBtb2RlbCk7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGRiW21vZGVsXSA9IHRhYmxlLmZpbHRlcigocmVjb3JkKSA9PiB7XG4gICAgICAgICAgaWYgKHJlcy5pbmNsdWRlcyhyZWNvcmQpKSB7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gIXJlcy5pbmNsdWRlcyhyZWNvcmQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZU1hbnkoeyBtb2RlbCwgd2hlcmUsIHVwZGF0ZSB9KSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgbW9kZWwpO1xuICAgICAgICByZXMuZm9yRWFjaCgocmVjb3JkKSA9PiB7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihyZWNvcmQsIHVwZGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzWzBdIHx8IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5cbmV4cG9ydCB7IG1lbW9yeUFkYXB0ZXIgYXMgbSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getAuthTables)\n/* harmony export */ });\nconst getAuthTables = (options) => {\n  const pluginSchema = options.plugins?.reduce(\n    (acc, plugin) => {\n      const schema = plugin.schema;\n      if (!schema) return acc;\n      for (const [key, value] of Object.entries(schema)) {\n        acc[key] = {\n          fields: {\n            ...acc[key]?.fields,\n            ...value.fields\n          },\n          modelName: value.modelName || key\n        };\n      }\n      return acc;\n    },\n    {}\n  );\n  const shouldAddRateLimitTable = options.rateLimit?.storage === \"database\";\n  const rateLimitTable = {\n    rateLimit: {\n      modelName: options.rateLimit?.modelName || \"rateLimit\",\n      fields: {\n        key: {\n          type: \"string\",\n          fieldName: options.rateLimit?.fields?.key || \"key\"\n        },\n        count: {\n          type: \"number\",\n          fieldName: options.rateLimit?.fields?.count || \"count\"\n        },\n        lastRequest: {\n          type: \"number\",\n          bigint: true,\n          fieldName: options.rateLimit?.fields?.lastRequest || \"lastRequest\"\n        }\n      }\n    }\n  };\n  const { user, session, account, ...pluginTables } = pluginSchema || {};\n  const sessionTable = {\n    session: {\n      modelName: options.session?.modelName || \"session\",\n      fields: {\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.expiresAt || \"expiresAt\"\n        },\n        token: {\n          type: \"string\",\n          required: true,\n          fieldName: options.session?.fields?.token || \"token\",\n          unique: true\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.updatedAt || \"updatedAt\"\n        },\n        ipAddress: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.ipAddress || \"ipAddress\"\n        },\n        userAgent: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.userAgent || \"userAgent\"\n        },\n        userId: {\n          type: \"string\",\n          fieldName: options.session?.fields?.userId || \"userId\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true\n        },\n        ...session?.fields,\n        ...options.session?.additionalFields\n      },\n      order: 2\n    }\n  };\n  return {\n    user: {\n      modelName: options.user?.modelName || \"user\",\n      fields: {\n        name: {\n          type: \"string\",\n          required: true,\n          fieldName: options.user?.fields?.name || \"name\",\n          sortable: true\n        },\n        email: {\n          type: \"string\",\n          unique: true,\n          required: true,\n          fieldName: options.user?.fields?.email || \"email\",\n          sortable: true\n        },\n        emailVerified: {\n          type: \"boolean\",\n          defaultValue: () => false,\n          required: true,\n          fieldName: options.user?.fields?.emailVerified || \"emailVerified\"\n        },\n        image: {\n          type: \"string\",\n          required: false,\n          fieldName: options.user?.fields?.image || \"image\"\n        },\n        createdAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...user?.fields,\n        ...options.user?.additionalFields\n      },\n      order: 1\n    },\n    //only add session table if it's not stored in secondary storage\n    ...!options.secondaryStorage || options.session?.storeSessionInDatabase ? sessionTable : {},\n    account: {\n      modelName: options.account?.modelName || \"account\",\n      fields: {\n        accountId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.accountId || \"accountId\"\n        },\n        providerId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.providerId || \"providerId\"\n        },\n        userId: {\n          type: \"string\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true,\n          fieldName: options.account?.fields?.userId || \"userId\"\n        },\n        accessToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.accessToken || \"accessToken\"\n        },\n        refreshToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.refreshToken || \"refreshToken\"\n        },\n        idToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.idToken || \"idToken\"\n        },\n        accessTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"accessTokenExpiresAt\"\n        },\n        refreshTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"refreshTokenExpiresAt\"\n        },\n        scope: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.scope || \"scope\"\n        },\n        password: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.password || \"password\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...account?.fields\n      },\n      order: 3\n    },\n    verification: {\n      modelName: options.verification?.modelName || \"verification\",\n      fields: {\n        identifier: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.identifier || \"identifier\"\n        },\n        value: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.value || \"value\"\n        },\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.verification?.fields?.expiresAt || \"expiresAt\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: false,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: false,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.updatedAt || \"updatedAt\"\n        }\n      },\n      order: 4\n    },\n    ...pluginTables,\n    ...shouldAddRateLimitTable ? rateLimitTable : {}\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getIp)\n/* harmony export */ });\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n\n\nfunction getIp(req, options) {\n  if (options.advanced?.ipAddress?.disableIpTracking) {\n    return null;\n  }\n  if (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.i) {\n    return \"127.0.0.1\";\n  }\n  const headers = \"headers\" in req ? req.headers : req;\n  const defaultHeaders = [\"x-forwarded-for\"];\n  const ipHeaders = options.advanced?.ipAddress?.ipAddressHeaders || defaultHeaders;\n  for (const key of ipHeaders) {\n    const value = \"get\" in headers ? headers.get(key) : headers[key];\n    if (typeof value === \"string\") {\n      const ip = value.split(\",\")[0].trim();\n      if (isValidIP(ip)) {\n        return ip;\n      }\n    }\n  }\n  return null;\n}\nfunction isValidIP(ip) {\n  const ipv4Regex = /^(\\d{1,3}\\.){3}\\d{1,3}$/;\n  if (ipv4Regex.test(ip)) {\n    const parts = ip.split(\".\").map(Number);\n    return parts.every((part) => part >= 0 && part <= 255);\n  }\n  const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;\n  return ipv6Regex.test(ip);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGNmTlBTOHEubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlEOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sd0RBQU07QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLElBQUksSUFBSSxFQUFFLEdBQUcsSUFBSTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxJQUFJLEdBQUcsRUFBRSxZQUFZLElBQUk7QUFDNUQ7QUFDQTs7QUFFc0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWxhbi9EZXNrdG9wL0FwcHMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkRjZk5QUzhxLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpIGFzIGlzVGVzdCB9IGZyb20gJy4vYmV0dGVyLWF1dGguOHpveHpnLUYubWpzJztcblxuZnVuY3Rpb24gZ2V0SXAocmVxLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmFkdmFuY2VkPy5pcEFkZHJlc3M/LmRpc2FibGVJcFRyYWNraW5nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGlzVGVzdCkge1xuICAgIHJldHVybiBcIjEyNy4wLjAuMVwiO1xuICB9XG4gIGNvbnN0IGhlYWRlcnMgPSBcImhlYWRlcnNcIiBpbiByZXEgPyByZXEuaGVhZGVycyA6IHJlcTtcbiAgY29uc3QgZGVmYXVsdEhlYWRlcnMgPSBbXCJ4LWZvcndhcmRlZC1mb3JcIl07XG4gIGNvbnN0IGlwSGVhZGVycyA9IG9wdGlvbnMuYWR2YW5jZWQ/LmlwQWRkcmVzcz8uaXBBZGRyZXNzSGVhZGVycyB8fCBkZWZhdWx0SGVhZGVycztcbiAgZm9yIChjb25zdCBrZXkgb2YgaXBIZWFkZXJzKSB7XG4gICAgY29uc3QgdmFsdWUgPSBcImdldFwiIGluIGhlYWRlcnMgPyBoZWFkZXJzLmdldChrZXkpIDogaGVhZGVyc1trZXldO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGlwID0gdmFsdWUuc3BsaXQoXCIsXCIpWzBdLnRyaW0oKTtcbiAgICAgIGlmIChpc1ZhbGlkSVAoaXApKSB7XG4gICAgICAgIHJldHVybiBpcDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBpc1ZhbGlkSVAoaXApIHtcbiAgY29uc3QgaXB2NFJlZ2V4ID0gL14oXFxkezEsM31cXC4pezN9XFxkezEsM30kLztcbiAgaWYgKGlwdjRSZWdleC50ZXN0KGlwKSkge1xuICAgIGNvbnN0IHBhcnRzID0gaXAuc3BsaXQoXCIuXCIpLm1hcChOdW1iZXIpO1xuICAgIHJldHVybiBwYXJ0cy5ldmVyeSgocGFydCkgPT4gcGFydCA+PSAwICYmIHBhcnQgPD0gMjU1KTtcbiAgfVxuICBjb25zdCBpcHY2UmVnZXggPSAvXihbMC05YS1mQS1GXXsxLDR9Oil7N31bMC05YS1mQS1GXXsxLDR9JC87XG4gIHJldHVybiBpcHY2UmVnZXgudGVzdChpcCk7XG59XG5cbmV4cG9ydCB7IGdldElwIGFzIGcgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BetterAuthError),\n/* harmony export */   M: () => (/* binding */ MissingDependencyError)\n/* harmony export */ });\nclass BetterAuthError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.name = \"BetterAuthError\";\n    this.message = message;\n    this.cause = cause;\n    this.stack = \"\";\n  }\n}\nclass MissingDependencyError extends BetterAuthError {\n  constructor(pkgName) {\n    super(\n      `The package \"${pkgName}\" is required. Make sure it is installed.`,\n      pkgName\n    );\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRTZEIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQmV0dGVyQXV0aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjYXVzZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiQmV0dGVyQXV0aEVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gICAgdGhpcy5zdGFjayA9IFwiXCI7XG4gIH1cbn1cbmNsYXNzIE1pc3NpbmdEZXBlbmRlbmN5RXJyb3IgZXh0ZW5kcyBCZXR0ZXJBdXRoRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihwa2dOYW1lKSB7XG4gICAgc3VwZXIoXG4gICAgICBgVGhlIHBhY2thZ2UgXCIke3BrZ05hbWV9XCIgaXMgcmVxdWlyZWQuIE1ha2Ugc3VyZSBpdCBpcyBpbnN0YWxsZWQuYCxcbiAgICAgIHBrZ05hbWVcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IEJldHRlckF1dGhFcnJvciBhcyBCLCBNaXNzaW5nRGVwZW5kZW5jeUVycm9yIGFzIE0gfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createKyselyAdapter),\n/* harmony export */   k: () => (/* binding */ kyselyAdapter)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(action-browser)/../../node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(action-browser)/../../node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(action-browser)/../../node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! kysely */ \"(action-browser)/../../node_modules/kysely/dist/esm/dialect/mssql/mssql-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! kysely */ \"(action-browser)/../../node_modules/kysely/dist/esm/kysely.js\");\n/* harmony import */ var _better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.gBl3F_xa.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs\");\n\n\n\nfunction getDatabaseType(db) {\n  if (!db) {\n    return null;\n  }\n  if (\"dialect\" in db) {\n    return getDatabaseType(db.dialect);\n  }\n  if (\"createDriver\" in db) {\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_1__.SqliteDialect) {\n      return \"sqlite\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_2__.MysqlDialect) {\n      return \"mysql\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_3__.PostgresDialect) {\n      return \"postgres\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_4__.MssqlDialect) {\n      return \"mssql\";\n    }\n  }\n  if (\"aggregate\" in db) {\n    return \"sqlite\";\n  }\n  if (\"getConnection\" in db) {\n    return \"mysql\";\n  }\n  if (\"connect\" in db) {\n    return \"postgres\";\n  }\n  if (\"fileControl\" in db) {\n    return \"sqlite\";\n  }\n  return null;\n}\nconst createKyselyAdapter = async (config) => {\n  const db = config.database;\n  if (!db) {\n    return {\n      kysely: null,\n      databaseType: null\n    };\n  }\n  if (\"db\" in db) {\n    return {\n      kysely: db.db,\n      databaseType: db.type\n    };\n  }\n  if (\"dialect\" in db) {\n    return {\n      kysely: new kysely__WEBPACK_IMPORTED_MODULE_5__.Kysely({ dialect: db.dialect }),\n      databaseType: db.type\n    };\n  }\n  let dialect = void 0;\n  const databaseType = getDatabaseType(db);\n  if (\"createDriver\" in db) {\n    dialect = db;\n  }\n  if (\"aggregate\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_1__.SqliteDialect({\n      database: db\n    });\n  }\n  if (\"getConnection\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_2__.MysqlDialect(db);\n  }\n  if (\"connect\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_3__.PostgresDialect({\n      pool: db\n    });\n  }\n  if (\"fileControl\" in db) {\n    const { BunSqliteDialect } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/better-auth\").then(__webpack_require__.bind(__webpack_require__, /*! ../chunks/bun-sqlite-dialect.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs\"));\n    dialect = new BunSqliteDialect({\n      database: db\n    });\n  }\n  return {\n    kysely: dialect ? new kysely__WEBPACK_IMPORTED_MODULE_5__.Kysely({ dialect }) : null,\n    databaseType\n  };\n};\n\nconst kyselyAdapter = (db, config) => (0,_better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n  config: {\n    adapterId: \"kysely\",\n    adapterName: \"Kysely Adapter\",\n    usePlural: config?.usePlural,\n    debugLogs: config?.debugLogs,\n    supportsBooleans: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n    supportsDates: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n    supportsJSON: false\n  },\n  adapter: ({ getFieldName, schema }) => {\n    const withReturning = async (values, builder, model, where) => {\n      let res;\n      if (config?.type === \"mysql\") {\n        await builder.execute();\n        const field = values.id ? \"id\" : where.length > 0 && where[0].field ? where[0].field : \"id\";\n        if (!values.id && where.length === 0) {\n          res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").limit(1).executeTakeFirst();\n          return res;\n        }\n        const value = values[field] || where[0].value;\n        res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").where(getFieldName({ model, field }), \"=\", value).limit(1).executeTakeFirst();\n        return res;\n      }\n      if (config?.type === \"mssql\") {\n        res = await builder.outputAll(\"inserted\").executeTakeFirst();\n        return res;\n      }\n      res = await builder.returningAll().executeTakeFirst();\n      return res;\n    };\n    function transformValueToDB(value, model, field) {\n      if (field === \"id\") {\n        return value;\n      }\n      const { type = \"sqlite\" } = config || {};\n      let f = schema[model]?.fields[field];\n      if (!f) {\n        f = Object.values(schema).find((f2) => f2.modelName === model);\n      }\n      if (f.type === \"boolean\" && (type === \"sqlite\" || type === \"mssql\") && value !== null && value !== void 0) {\n        return value ? 1 : 0;\n      }\n      if (f.type === \"date\" && value && value instanceof Date) {\n        return type === \"sqlite\" ? value.toISOString() : value;\n      }\n      return value;\n    }\n    function convertWhereClause(model, w) {\n      if (!w)\n        return {\n          and: null,\n          or: null\n        };\n      const conditions = {\n        and: [],\n        or: []\n      };\n      w.forEach((condition) => {\n        let {\n          field: _field,\n          value,\n          operator = \"=\",\n          connector = \"AND\"\n        } = condition;\n        const field = getFieldName({ model, field: _field });\n        value = transformValueToDB(value, model, _field);\n        const expr = (eb) => {\n          if (operator.toLowerCase() === \"in\") {\n            return eb(field, \"in\", Array.isArray(value) ? value : [value]);\n          }\n          if (operator === \"contains\") {\n            return eb(field, \"like\", `%${value}%`);\n          }\n          if (operator === \"starts_with\") {\n            return eb(field, \"like\", `${value}%`);\n          }\n          if (operator === \"ends_with\") {\n            return eb(field, \"like\", `%${value}`);\n          }\n          if (operator === \"eq\") {\n            return eb(field, \"=\", value);\n          }\n          if (operator === \"ne\") {\n            return eb(field, \"<>\", value);\n          }\n          if (operator === \"gt\") {\n            return eb(field, \">\", value);\n          }\n          if (operator === \"gte\") {\n            return eb(field, \">=\", value);\n          }\n          if (operator === \"lt\") {\n            return eb(field, \"<\", value);\n          }\n          if (operator === \"lte\") {\n            return eb(field, \"<=\", value);\n          }\n          return eb(field, operator, value);\n        };\n        if (connector === \"OR\") {\n          conditions.or.push(expr);\n        } else {\n          conditions.and.push(expr);\n        }\n      });\n      return {\n        and: conditions.and.length ? conditions.and : null,\n        or: conditions.or.length ? conditions.or : null\n      };\n    }\n    return {\n      async create({ data, model }) {\n        const builder = db.insertInto(model).values(data);\n        return await withReturning(data, builder, model, []);\n      },\n      async findOne({ model, where, select }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model).selectAll();\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.executeTakeFirst();\n        if (!res) return null;\n        return res;\n      },\n      async findMany({ model, where, limit, offset, sortBy }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        if (config?.type === \"mssql\") {\n          if (!offset) {\n            query = query.top(limit || 100);\n          }\n        } else {\n          query = query.limit(limit || 100);\n        }\n        if (sortBy) {\n          query = query.orderBy(\n            getFieldName({ model, field: sortBy.field }),\n            sortBy.direction\n          );\n        }\n        if (offset) {\n          if (config?.type === \"mssql\") {\n            if (!sortBy) {\n              query = query.orderBy(getFieldName({ model, field: \"id\" }));\n            }\n            query = query.offset(offset).fetch(limit || 100);\n          } else {\n            query = query.offset(offset);\n          }\n        }\n        const res = await query.selectAll().execute();\n        if (!res) return [];\n        return res;\n      },\n      async update({ model, where, update: values }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.updateTable(model).set(values);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        return await withReturning(values, query, model, where);\n      },\n      async updateMany({ model, where, update: values }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.updateTable(model).set(values);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.execute();\n        return res.length;\n      },\n      async count({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model).select(db.fn.count(\"id\").as(\"count\"));\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.execute();\n        return res[0].count;\n      },\n      async delete({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.deleteFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        await query.execute();\n      },\n      async deleteMany({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.deleteFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        return (await query.execute()).length;\n      },\n      options: config\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBaseURL),\n/* harmony export */   b: () => (/* binding */ getHost),\n/* harmony export */   c: () => (/* binding */ getProtocol),\n/* harmony export */   g: () => (/* binding */ getOrigin)\n/* harmony export */ });\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nfunction checkHasPath(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.pathname !== \"/\";\n  } catch (error) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n      `Invalid base URL: ${url}. Please provide a valid base URL.`\n    );\n  }\n}\nfunction withPath(url, path = \"/api/auth\") {\n  const hasPath = checkHasPath(url);\n  if (hasPath) {\n    return url;\n  }\n  path = path.startsWith(\"/\") ? path : `/${path}`;\n  return `${url.replace(/\\/+$/, \"\")}${path}`;\n}\nfunction getBaseURL(url, path, request) {\n  if (url) {\n    return withPath(url, path);\n  }\n  const fromEnv = _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NEXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_AUTH_URL || (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL !== \"/\" ? _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL : void 0);\n  if (fromEnv) {\n    return withPath(fromEnv, path);\n  }\n  const fromRequest = request?.headers.get(\"x-forwarded-host\");\n  const fromRequestProto = request?.headers.get(\"x-forwarded-proto\");\n  if (fromRequest && fromRequestProto) {\n    return withPath(`${fromRequestProto}://${fromRequest}`, path);\n  }\n  if (request) {\n    const url2 = getOrigin(request.url);\n    if (!url2) {\n      throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n        \"Could not get origin from request. Please provide a valid base URL.\"\n      );\n    }\n    return withPath(url2, path);\n  }\n  if (typeof window !== \"undefined\" && window.location) {\n    return withPath(window.location.origin, path);\n  }\n  return void 0;\n}\nfunction getOrigin(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.origin;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getProtocol(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getHost(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.host;\n  } catch (error) {\n    return url;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguVlRYTkxGTVQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFzRDtBQUNZOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixjQUFjLHdEQUFlO0FBQzdCLDJCQUEyQixJQUFJO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsS0FBSztBQUNoRCxZQUFZLHdCQUF3QixFQUFFLEtBQUs7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3REFBRyxvQkFBb0Isd0RBQUcsZ0NBQWdDLHdEQUFHLDJCQUEyQix3REFBRyxnQ0FBZ0Msd0RBQUcsMEJBQTBCLHdEQUFHLG9CQUFvQix3REFBRztBQUNwTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCLEtBQUssWUFBWTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3REFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFMkUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWxhbi9EZXNrdG9wL0FwcHMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLlZUWE5MRk1ULm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVudiB9IGZyb20gJy4vYmV0dGVyLWF1dGguOHpveHpnLUYubWpzJztcbmltcG9ydCB7IEIgYXMgQmV0dGVyQXV0aEVycm9yIH0gZnJvbSAnLi9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuXG5mdW5jdGlvbiBjaGVja0hhc1BhdGgodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwucGF0aG5hbWUgIT09IFwiL1wiO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBCZXR0ZXJBdXRoRXJyb3IoXG4gICAgICBgSW52YWxpZCBiYXNlIFVSTDogJHt1cmx9LiBQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGJhc2UgVVJMLmBcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiB3aXRoUGF0aCh1cmwsIHBhdGggPSBcIi9hcGkvYXV0aFwiKSB7XG4gIGNvbnN0IGhhc1BhdGggPSBjaGVja0hhc1BhdGgodXJsKTtcbiAgaWYgKGhhc1BhdGgpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHBhdGggPSBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpID8gcGF0aCA6IGAvJHtwYXRofWA7XG4gIHJldHVybiBgJHt1cmwucmVwbGFjZSgvXFwvKyQvLCBcIlwiKX0ke3BhdGh9YDtcbn1cbmZ1bmN0aW9uIGdldEJhc2VVUkwodXJsLCBwYXRoLCByZXF1ZXN0KSB7XG4gIGlmICh1cmwpIHtcbiAgICByZXR1cm4gd2l0aFBhdGgodXJsLCBwYXRoKTtcbiAgfVxuICBjb25zdCBmcm9tRW52ID0gZW52LkJFVFRFUl9BVVRIX1VSTCB8fCBlbnYuTkVYVF9QVUJMSUNfQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5QVUJMSUNfQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5OVVhUX1BVQkxJQ19CRVRURVJfQVVUSF9VUkwgfHwgZW52Lk5VWFRfUFVCTElDX0FVVEhfVVJMIHx8IChlbnYuQkFTRV9VUkwgIT09IFwiL1wiID8gZW52LkJBU0VfVVJMIDogdm9pZCAwKTtcbiAgaWYgKGZyb21FbnYpIHtcbiAgICByZXR1cm4gd2l0aFBhdGgoZnJvbUVudiwgcGF0aCk7XG4gIH1cbiAgY29uc3QgZnJvbVJlcXVlc3QgPSByZXF1ZXN0Py5oZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLWhvc3RcIik7XG4gIGNvbnN0IGZyb21SZXF1ZXN0UHJvdG8gPSByZXF1ZXN0Py5oZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLXByb3RvXCIpO1xuICBpZiAoZnJvbVJlcXVlc3QgJiYgZnJvbVJlcXVlc3RQcm90bykge1xuICAgIHJldHVybiB3aXRoUGF0aChgJHtmcm9tUmVxdWVzdFByb3RvfTovLyR7ZnJvbVJlcXVlc3R9YCwgcGF0aCk7XG4gIH1cbiAgaWYgKHJlcXVlc3QpIHtcbiAgICBjb25zdCB1cmwyID0gZ2V0T3JpZ2luKHJlcXVlc3QudXJsKTtcbiAgICBpZiAoIXVybDIpIHtcbiAgICAgIHRocm93IG5ldyBCZXR0ZXJBdXRoRXJyb3IoXG4gICAgICAgIFwiQ291bGQgbm90IGdldCBvcmlnaW4gZnJvbSByZXF1ZXN0LiBQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGJhc2UgVVJMLlwiXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gd2l0aFBhdGgodXJsMiwgcGF0aCk7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIHdpdGhQYXRoKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sIHBhdGgpO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBnZXRPcmlnaW4odXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwub3JpZ2luO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBnZXRQcm90b2NvbCh1cmwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIHBhcnNlZFVybC5wcm90b2NvbDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0SG9zdCh1cmwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIHBhcnNlZFVybC5ob3N0O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbn1cblxuZXhwb3J0IHsgZ2V0QmFzZVVSTCBhcyBhLCBnZXRIb3N0IGFzIGIsIGdldFByb3RvY29sIGFzIGMsIGdldE9yaWdpbiBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ checkPassword),\n/* harmony export */   v: () => (/* binding */ validatePassword)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(action-browser)/../../node_modules/better-call/dist/index.js\");\n\n\nasync function validatePassword(ctx, data) {\n  const accounts = await ctx.context.internalAdapter.findAccounts(data.userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword) {\n    return false;\n  }\n  const compare = await ctx.context.password.verify({\n    hash: currentPassword,\n    password: data.password\n  });\n  return compare;\n}\nasync function checkPassword(userId, c) {\n  const accounts = await c.context.internalAdapter.findAccounts(userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword || !c.body.password) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"No password credential found\"\n    });\n  }\n  const compare = await c.context.password.verify({\n    hash: currentPassword,\n    password: c.body.password\n  });\n  if (!compare) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"Invalid password\"\n    });\n  }\n  return true;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguWXdEUWhvUGMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaURBQVE7QUFDdEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLGlEQUFRO0FBQ3RCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFcUQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWxhbi9EZXNrdG9wL0FwcHMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLll3RFFob1BjLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJ2JldHRlci1jYWxsJztcblxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVQYXNzd29yZChjdHgsIGRhdGEpIHtcbiAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBjdHguY29udGV4dC5pbnRlcm5hbEFkYXB0ZXIuZmluZEFjY291bnRzKGRhdGEudXNlcklkKTtcbiAgY29uc3QgY3JlZGVudGlhbEFjY291bnQgPSBhY2NvdW50cz8uZmluZChcbiAgICAoYWNjb3VudCkgPT4gYWNjb3VudC5wcm92aWRlcklkID09PSBcImNyZWRlbnRpYWxcIlxuICApO1xuICBjb25zdCBjdXJyZW50UGFzc3dvcmQgPSBjcmVkZW50aWFsQWNjb3VudD8ucGFzc3dvcmQ7XG4gIGlmICghY3JlZGVudGlhbEFjY291bnQgfHwgIWN1cnJlbnRQYXNzd29yZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBjb21wYXJlID0gYXdhaXQgY3R4LmNvbnRleHQucGFzc3dvcmQudmVyaWZ5KHtcbiAgICBoYXNoOiBjdXJyZW50UGFzc3dvcmQsXG4gICAgcGFzc3dvcmQ6IGRhdGEucGFzc3dvcmRcbiAgfSk7XG4gIHJldHVybiBjb21wYXJlO1xufVxuYXN5bmMgZnVuY3Rpb24gY2hlY2tQYXNzd29yZCh1c2VySWQsIGMpIHtcbiAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBjLmNvbnRleHQuaW50ZXJuYWxBZGFwdGVyLmZpbmRBY2NvdW50cyh1c2VySWQpO1xuICBjb25zdCBjcmVkZW50aWFsQWNjb3VudCA9IGFjY291bnRzPy5maW5kKFxuICAgIChhY2NvdW50KSA9PiBhY2NvdW50LnByb3ZpZGVySWQgPT09IFwiY3JlZGVudGlhbFwiXG4gICk7XG4gIGNvbnN0IGN1cnJlbnRQYXNzd29yZCA9IGNyZWRlbnRpYWxBY2NvdW50Py5wYXNzd29yZDtcbiAgaWYgKCFjcmVkZW50aWFsQWNjb3VudCB8fCAhY3VycmVudFBhc3N3b3JkIHx8ICFjLmJvZHkucGFzc3dvcmQpIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXCJCQURfUkVRVUVTVFwiLCB7XG4gICAgICBtZXNzYWdlOiBcIk5vIHBhc3N3b3JkIGNyZWRlbnRpYWwgZm91bmRcIlxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGNvbXBhcmUgPSBhd2FpdCBjLmNvbnRleHQucGFzc3dvcmQudmVyaWZ5KHtcbiAgICBoYXNoOiBjdXJyZW50UGFzc3dvcmQsXG4gICAgcGFzc3dvcmQ6IGMuYm9keS5wYXNzd29yZFxuICB9KTtcbiAgaWYgKCFjb21wYXJlKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFwiQkFEX1JFUVVFU1RcIiwge1xuICAgICAgbWVzc2FnZTogXCJJbnZhbGlkIHBhc3N3b3JkXCJcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgY2hlY2tQYXNzd29yZCBhcyBjLCB2YWxpZGF0ZVBhc3N3b3JkIGFzIHYgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createAdapter)\n/* harmony export */ });\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DORkW_Ge.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.DBGfIDnh.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! better-call */ \"(action-browser)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction withApplyDefault(value, field, action) {\n  if (action === \"update\") {\n    return value;\n  }\n  if (value === void 0 || value === null) {\n    if (field.defaultValue !== void 0) {\n      if (typeof field.defaultValue === \"function\") {\n        return field.defaultValue();\n      }\n      return field.defaultValue;\n    }\n  }\n  return value;\n}\n\nlet debugLogs = [];\nlet transactionId = -1;\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    yellow: \"\\x1B[33m\",\n    magenta: \"\\x1B[35m\"},\n  bg: {\n    black: \"\\x1B[40m\"}\n};\nconst createAdapter = ({\n  adapter,\n  config: cfg\n}) => (options) => {\n  const config = {\n    ...cfg,\n    supportsBooleans: cfg.supportsBooleans ?? true,\n    supportsDates: cfg.supportsDates ?? true,\n    supportsJSON: cfg.supportsJSON ?? false,\n    adapterName: cfg.adapterName ?? cfg.adapterId,\n    supportsNumericIds: cfg.supportsNumericIds ?? true\n  };\n  if (options.advanced?.database?.useNumberId === true && config.supportsNumericIds === false) {\n    throw new Error(\n      `[${config.adapterName}] Your database or database adapter does not support numeric ids. Please disable \"useNumberId\" in your config.`\n    );\n  }\n  const schema = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(options);\n  const getDefaultFieldName = ({\n    field,\n    model: unsafe_model\n  }) => {\n    if (field === \"id\" || field === \"_id\") {\n      return \"id\";\n    }\n    const model = getDefaultModelName(unsafe_model);\n    let f = schema[model]?.fields[field];\n    if (!f) {\n      f = Object.values(schema[model]?.fields).find(\n        (f2) => f2.fieldName === field\n      );\n    }\n    if (!f) {\n      debugLog(`Field ${field} not found in model ${model}`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Field ${field} not found in model ${model}`);\n    }\n    return field;\n  };\n  const getDefaultModelName = (model) => {\n    if (config.usePlural && model.charAt(model.length - 1) === \"s\") {\n      let pluralessModel = model.slice(0, -1);\n      let m2 = schema[pluralessModel] ? pluralessModel : void 0;\n      if (!m2) {\n        m2 = Object.entries(schema).find(\n          ([_, f]) => f.modelName === pluralessModel\n        )?.[0];\n      }\n      if (m2) {\n        return m2;\n      }\n    }\n    let m = schema[model] ? model : void 0;\n    if (!m) {\n      m = Object.entries(schema).find(([_, f]) => f.modelName === model)?.[0];\n    }\n    if (!m) {\n      debugLog(`Model \"${model}\" not found in schema`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Model \"${model}\" not found in schema`);\n    }\n    return m;\n  };\n  const getModelName = (model) => {\n    const defaultModelKey = getDefaultModelName(model);\n    const usePlural = config && config.usePlural;\n    const useCustomModelName = schema && schema[defaultModelKey] && schema[defaultModelKey].modelName !== model;\n    if (useCustomModelName) {\n      return usePlural ? `${schema[defaultModelKey].modelName}s` : schema[defaultModelKey].modelName;\n    }\n    return usePlural ? `${model}s` : model;\n  };\n  function getFieldName({\n    model: model_name,\n    field: field_name\n  }) {\n    const model = getDefaultModelName(model_name);\n    const field = getDefaultFieldName({ model, field: field_name });\n    return schema[model]?.fields[field]?.fieldName || field;\n  }\n  const debugLog = (...args) => {\n    if (config.debugLogs === true || typeof config.debugLogs === \"object\") {\n      if (typeof config.debugLogs === \"object\" && \"isRunningAdapterTests\" in config.debugLogs) {\n        if (config.debugLogs.isRunningAdapterTests) {\n          args.shift();\n          debugLogs.push(args);\n        }\n        return;\n      }\n      if (typeof config.debugLogs === \"object\" && config.debugLogs.logCondition && !config.debugLogs.logCondition?.()) {\n        return;\n      }\n      if (typeof args[0] === \"object\" && \"method\" in args[0]) {\n        const method = args.shift().method;\n        if (typeof config.debugLogs === \"object\") {\n          if (method === \"create\" && !config.debugLogs.create) {\n            return;\n          } else if (method === \"update\" && !config.debugLogs.update) {\n            return;\n          } else if (method === \"updateMany\" && !config.debugLogs.updateMany) {\n            return;\n          } else if (method === \"findOne\" && !config.debugLogs.findOne) {\n            return;\n          } else if (method === \"findMany\" && !config.debugLogs.findMany) {\n            return;\n          } else if (method === \"delete\" && !config.debugLogs.delete) {\n            return;\n          } else if (method === \"deleteMany\" && !config.debugLogs.deleteMany) {\n            return;\n          } else if (method === \"count\" && !config.debugLogs.count) {\n            return;\n          }\n        }\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__.a.info(`[${config.adapterName}]`, ...args);\n      } else {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__.a.info(`[${config.adapterName}]`, ...args);\n      }\n    }\n  };\n  const idField = ({\n    customModelName,\n    forceAllowId\n  }) => {\n    const shouldGenerateId = !config.disableIdGeneration && !options.advanced?.database?.useNumberId && !forceAllowId;\n    const model = getDefaultModelName(customModelName ?? \"id\");\n    return {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\",\n      required: shouldGenerateId ? true : false,\n      ...shouldGenerateId ? {\n        defaultValue() {\n          if (config.disableIdGeneration) return void 0;\n          const useNumberId = options.advanced?.database?.useNumberId;\n          let generateId$1 = options.advanced?.database?.generateId;\n          if (options.advanced?.generateId !== void 0) {\n            _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__.a.warn(\n              \"Your Better Auth config includes advanced.generateId which is deprecated. Please use advanced.database.generateId instead. This will be removed in future releases.\"\n            );\n            generateId$1 = options.advanced?.generateId;\n          }\n          if (generateId$1 === false || useNumberId) return void 0;\n          if (generateId$1) {\n            return generateId$1({\n              model\n            });\n          }\n          if (config.customIdGenerator) {\n            return config.customIdGenerator({ model });\n          }\n          return (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__.g)();\n        }\n      } : {}\n    };\n  };\n  const getFieldAttributes = ({\n    model,\n    field\n  }) => {\n    const defaultModelName = getDefaultModelName(model);\n    const defaultFieldName = getDefaultFieldName({\n      field,\n      model\n    });\n    const fields = schema[defaultModelName].fields;\n    fields.id = idField({ customModelName: defaultModelName });\n    return fields[defaultFieldName];\n  };\n  const adapterInstance = adapter({\n    options,\n    schema,\n    debugLog,\n    getFieldName,\n    getModelName,\n    getDefaultModelName,\n    getDefaultFieldName,\n    getFieldAttributes\n  });\n  const transformInput = async (data, unsafe_model, action, forceAllowId) => {\n    const transformedData = {};\n    const fields = schema[unsafe_model].fields;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    if (!config.disableIdGeneration && !options.advanced?.database?.useNumberId) {\n      fields.id = idField({\n        customModelName: unsafe_model,\n        forceAllowId: forceAllowId && \"id\" in data\n      });\n    }\n    for (const field in fields) {\n      const value = data[field];\n      const fieldAttributes = fields[field];\n      let newFieldName = newMappedKeys[field] || fields[field].fieldName || field;\n      if (value === void 0 && (!fieldAttributes.defaultValue && !fieldAttributes.transform?.input || action === \"update\")) {\n        continue;\n      }\n      let newValue = withApplyDefault(value, fieldAttributes, action);\n      if (fieldAttributes.transform?.input) {\n        newValue = await fieldAttributes.transform.input(newValue);\n      }\n      if (fieldAttributes.references?.field === \"id\" && options.advanced?.database?.useNumberId) {\n        if (Array.isArray(newValue)) {\n          newValue = newValue.map(Number);\n        } else {\n          newValue = Number(newValue);\n        }\n      } else if (config.supportsJSON === false && typeof newValue === \"object\" && //@ts-expect-error -Future proofing\n      fieldAttributes.type === \"json\") {\n        newValue = JSON.stringify(newValue);\n      } else if (config.supportsDates === false && newValue instanceof Date && fieldAttributes.type === \"date\") {\n        newValue = newValue.toISOString();\n      } else if (config.supportsBooleans === false && typeof newValue === \"boolean\") {\n        newValue = newValue ? 1 : 0;\n      }\n      if (config.customTransformInput) {\n        newValue = config.customTransformInput({\n          data: newValue,\n          action,\n          field: newFieldName,\n          fieldAttributes,\n          model: unsafe_model,\n          schema,\n          options\n        });\n      }\n      transformedData[newFieldName] = newValue;\n    }\n    return transformedData;\n  };\n  const transformOutput = async (data, unsafe_model, select = []) => {\n    if (!data) return null;\n    const newMappedKeys = config.mapKeysTransformOutput ?? {};\n    const transformedData = {};\n    const tableSchema = schema[unsafe_model].fields;\n    const idKey = Object.entries(newMappedKeys).find(\n      ([_, v]) => v === \"id\"\n    )?.[0];\n    tableSchema[idKey ?? \"id\"] = {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\"\n    };\n    for (const key in tableSchema) {\n      if (select.length && !select.includes(key)) {\n        continue;\n      }\n      const field = tableSchema[key];\n      if (field) {\n        const originalKey = field.fieldName || key;\n        let newValue = data[Object.entries(newMappedKeys).find(\n          ([_, v]) => v === originalKey\n        )?.[0] || originalKey];\n        if (field.transform?.output) {\n          newValue = await field.transform.output(newValue);\n        }\n        let newFieldName = newMappedKeys[key] || key;\n        if (originalKey === \"id\" || field.references?.field === \"id\") {\n          if (typeof newValue !== \"undefined\") newValue = String(newValue);\n        } else if (config.supportsJSON === false && typeof newValue === \"string\" && //@ts-expect-error - Future proofing\n        field.type === \"json\") {\n          newValue = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(newValue);\n        } else if (config.supportsDates === false && typeof newValue === \"string\" && field.type === \"date\") {\n          newValue = new Date(newValue);\n        } else if (config.supportsBooleans === false && typeof newValue === \"number\" && field.type === \"boolean\") {\n          newValue = newValue === 1;\n        }\n        if (config.customTransformOutput) {\n          newValue = config.customTransformOutput({\n            data: newValue,\n            field: newFieldName,\n            fieldAttributes: field,\n            select,\n            model: unsafe_model,\n            schema,\n            options\n          });\n        }\n        transformedData[newFieldName] = newValue;\n      }\n    }\n    return transformedData;\n  };\n  const transformWhereClause = ({\n    model,\n    where\n  }) => {\n    if (!where) return void 0;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    return where.map((w) => {\n      const {\n        field: unsafe_field,\n        value,\n        operator = \"eq\",\n        connector = \"AND\"\n      } = w;\n      if (operator === \"in\") {\n        if (!Array.isArray(value)) {\n          throw new Error(\"Value must be an array\");\n        }\n      }\n      const defaultModelName = getDefaultModelName(model);\n      const defaultFieldName = getDefaultFieldName({\n        field: unsafe_field,\n        model\n      });\n      const fieldName = newMappedKeys[defaultFieldName] || getFieldName({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      const fieldAttr = getFieldAttributes({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      if (defaultFieldName === \"id\" || fieldAttr.references?.field === \"id\") {\n        if (options.advanced?.database?.useNumberId) {\n          if (Array.isArray(value)) {\n            return {\n              operator,\n              connector,\n              field: fieldName,\n              value: value.map(Number)\n            };\n          }\n          return {\n            operator,\n            connector,\n            field: fieldName,\n            value: Number(value)\n          };\n        }\n      }\n      return {\n        operator,\n        connector,\n        field: fieldName,\n        value\n      };\n    });\n  };\n  return {\n    create: async ({\n      data: unsafeData,\n      model: unsafeModel,\n      select,\n      forceAllowId = false\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      if (\"id\" in unsafeData && !forceAllowId) {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__.a.warn(\n          `[${config.adapterName}] - You are trying to create a record with an id. This is not allowed as we handle id generation for you, unless you pass in the \\`forceAllowId\\` parameter. The id will be ignored.`\n        );\n        const err = new Error();\n        const stack = err.stack?.split(\"\\n\").filter((_, i) => i !== 1).join(\"\\n\").replace(\"Error:\", \"Create method with `id` being called at:\");\n        console.log(stack);\n        unsafeData.id = void 0;\n      }\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(\n        unsafeData,\n        unsafeModel,\n        \"create\",\n        forceAllowId\n      );\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.create({ data, model });\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"DB Result\")}:`,\n        { model, res }\n      );\n      const transformed = await transformOutput(res, unsafeModel, select);\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    update: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(\n        unsafeData,\n        unsafeModel,\n        \"update\"\n      );\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.update({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await transformOutput(res, unsafeModel);\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    updateMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(unsafeData, unsafeModel, \"update\");\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const updatedCount = await adapterInstance.updateMany({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: updatedCount }\n      );\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: updatedCount }\n      );\n      return updatedCount;\n    },\n    findOne: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      select\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findOne\")}:`,\n        { model, where, select }\n      );\n      const res = await adapterInstance.findOne({\n        model,\n        where,\n        select\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await transformOutput(\n        res,\n        unsafeModel,\n        select\n      );\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    findMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      limit: unsafeLimit,\n      sortBy,\n      offset\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const limit = unsafeLimit ?? options.advanced?.database?.defaultFindManyLimit ?? 100;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findMany\")}:`,\n        { model, where, limit, sortBy, offset }\n      );\n      const res = await adapterInstance.findMany({\n        model,\n        where,\n        limit,\n        sortBy,\n        offset\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await Promise.all(\n        res.map(async (r) => await transformOutput(r, unsafeModel))\n      );\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    delete: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"delete\")}:`,\n        { model, where }\n      );\n      await adapterInstance.delete({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"delete\")} ${formatAction(\"DB Result\")}:`,\n        { model }\n      );\n    },\n    deleteMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DeleteMany\")}:`,\n        { model, where }\n      );\n      const res = await adapterInstance.deleteMany({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      return res;\n    },\n    count: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          where\n        }\n      );\n      const res = await adapterInstance.count({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          data: res\n        }\n      );\n      return res;\n    },\n    createSchema: adapterInstance.createSchema ? async (_, file) => {\n      const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(options);\n      if (options.secondaryStorage && !options.session?.storeSessionInDatabase) {\n        delete tables.session;\n      }\n      if (options.rateLimit && options.rateLimit.storage === \"database\" && // rate-limit will default to enabled in production,\n      // and given storage is database, it will try to use the rate-limit table,\n      // so we should make sure to generate rate-limit table schema\n      (typeof options.rateLimit.enabled === \"undefined\" || // and of course if they forcefully set to true, then they want rate-limit,\n      // thus we should also generate rate-limit table schema\n      options.rateLimit.enabled === true)) {\n        tables.ratelimit = {\n          modelName: options.rateLimit.modelName ?? \"ratelimit\",\n          fields: {\n            key: {\n              type: \"string\",\n              unique: true,\n              required: true,\n              fieldName: options.rateLimit.fields?.key ?? \"key\"\n            },\n            count: {\n              type: \"number\",\n              required: true,\n              fieldName: options.rateLimit.fields?.count ?? \"count\"\n            },\n            lastRequest: {\n              type: \"number\",\n              required: true,\n              bigint: true,\n              defaultValue: () => Date.now(),\n              fieldName: options.rateLimit.fields?.lastRequest ?? \"lastRequest\"\n            }\n          }\n        };\n      }\n      return adapterInstance.createSchema({ file, tables });\n    } : void 0,\n    options: {\n      adapterConfig: config,\n      ...adapterInstance.options ?? {}\n    },\n    id: config.adapterId,\n    // Secretly export values ONLY if this adapter has enabled adapter-test-debug-logs.\n    // This would then be used during our adapter-tests to help print debug logs if a test fails.\n    //@ts-expect-error - ^^\n    ...config.debugLogs?.isRunningAdapterTests ? {\n      adapterTestDebugLogs: {\n        resetDebugLogs() {\n          debugLogs = [];\n        },\n        printDebugLogs() {\n          const separator = `\\u2500`.repeat(80);\n          let log = debugLogs.reverse().map((log2) => {\n            log2[0] = `\n${log2[0]}`;\n            return [...log2, \"\\n\"];\n          }).reduce(\n            (prev, curr) => {\n              return [...curr, ...prev];\n            },\n            [`\n${separator}`]\n          );\n          console.log(...log);\n        }\n      }\n    } : {}\n  };\n};\nfunction formatTransactionId(transactionId2) {\n  return `${colors.fg.magenta}#${transactionId2}${colors.reset}`;\n}\nfunction formatStep(step, total) {\n  return `${colors.bg.black}${colors.fg.yellow}[${step}/${total}]${colors.reset}`;\n}\nfunction formatMethod(method) {\n  return `${colors.bright}${method}${colors.reset}`;\n}\nfunction formatAction(action) {\n  return `${colors.dim}(${action})${colors.reset}`;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ accountSchema),\n/* harmony export */   b: () => (/* binding */ parseUserOutput),\n/* harmony export */   c: () => (/* binding */ parseAccountOutput),\n/* harmony export */   d: () => (/* binding */ parseSessionOutput),\n/* harmony export */   e: () => (/* binding */ parseInputData),\n/* harmony export */   f: () => (/* binding */ parseUserInput),\n/* harmony export */   g: () => (/* binding */ getAllFields),\n/* harmony export */   h: () => (/* binding */ parseAdditionalUserInput),\n/* harmony export */   i: () => (/* binding */ parseAccountInput),\n/* harmony export */   j: () => (/* binding */ parseSessionInput),\n/* harmony export */   m: () => (/* binding */ mergeSchema),\n/* harmony export */   p: () => (/* binding */ parseOutputData),\n/* harmony export */   s: () => (/* binding */ sessionSchema),\n/* harmony export */   u: () => (/* binding */ userSchema),\n/* harmony export */   v: () => (/* binding */ verificationSchema)\n/* harmony export */ });\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod/v4 */ \"(action-browser)/../../node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod/v4 */ \"(action-browser)/../../node_modules/zod/v4/classic/coerce.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(action-browser)/../../node_modules/better-call/dist/index.js\");\n\n\n\nconst accountSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  providerId: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  accountId: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  userId: zod_v4__WEBPACK_IMPORTED_MODULE_2__.string(),\n  accessToken: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  refreshToken: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  idToken: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  /**\n   * Access token expires at\n   */\n  accessTokenExpiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().nullish(),\n  /**\n   * Refresh token expires at\n   */\n  refreshTokenExpiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().nullish(),\n  /**\n   * The scopes that the user has authorized\n   */\n  scope: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  /**\n   * Password is only stored in the credential provider\n   */\n  password: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  createdAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date())\n});\nconst userSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  email: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().transform((val) => val.toLowerCase()),\n  emailVerified: zod_v4__WEBPACK_IMPORTED_MODULE_1__.boolean().default(false),\n  name: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  image: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  createdAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date())\n});\nconst sessionSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  userId: zod_v4__WEBPACK_IMPORTED_MODULE_2__.string(),\n  expiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date(),\n  createdAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  token: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  ipAddress: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  userAgent: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish()\n});\nconst verificationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  value: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  createdAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  expiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date(),\n  identifier: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string()\n});\nfunction parseOutputData(data, schema) {\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in data) {\n    const field = fields[key];\n    if (!field) {\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (field.returned === false) {\n      continue;\n    }\n    parsedData[key] = data[key];\n  }\n  return parsedData;\n}\nfunction getAllFields(options, table) {\n  let schema = {\n    ...table === \"user\" ? options.user?.additionalFields : {},\n    ...table === \"session\" ? options.session?.additionalFields : {}\n  };\n  for (const plugin of options.plugins || []) {\n    if (plugin.schema && plugin.schema[table]) {\n      schema = {\n        ...schema,\n        ...plugin.schema[table].fields\n      };\n    }\n  }\n  return schema;\n}\nfunction parseUserOutput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseOutputData(user, { fields: schema });\n}\nfunction parseAccountOutput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseOutputData(account, { fields: schema });\n}\nfunction parseSessionOutput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseOutputData(session, { fields: schema });\n}\nfunction parseInputData(data, schema) {\n  const action = schema.action || \"create\";\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in fields) {\n    if (key in data) {\n      if (fields[key].input === false) {\n        if (fields[key].defaultValue) {\n          parsedData[key] = fields[key].defaultValue;\n          continue;\n        }\n        continue;\n      }\n      if (fields[key].validator?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].validator.input.parse(data[key]);\n        continue;\n      }\n      if (fields[key].transform?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].transform?.input(data[key]);\n        continue;\n      }\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (fields[key].defaultValue && action === \"create\") {\n      parsedData[key] = fields[key].defaultValue;\n      continue;\n    }\n    if (fields[key].required && action === \"create\") {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `${key} is required`\n      });\n    }\n  }\n  return parsedData;\n}\nfunction parseUserInput(options, user, action) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema, action });\n}\nfunction parseAdditionalUserInput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema });\n}\nfunction parseAccountInput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseInputData(account, { fields: schema });\n}\nfunction parseSessionInput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseInputData(session, { fields: schema });\n}\nfunction mergeSchema(schema, newSchema) {\n  if (!newSchema) {\n    return schema;\n  }\n  for (const table in newSchema) {\n    const newModelName = newSchema[table]?.modelName;\n    if (newModelName) {\n      schema[table].modelName = newModelName;\n    }\n    for (const field in schema[table].fields) {\n      const newField = newSchema[table]?.fields?.[field];\n      if (!newField) {\n        continue;\n      }\n      schema[table].fields[field].fieldName = newField;\n    }\n  }\n  return schema;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s: () => (/* binding */ safeJSONParse)\n/* harmony export */ });\nfunction safeJSONParse(data) {\n  function reviver(_, value) {\n    if (typeof value === \"string\") {\n      const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n      if (iso8601Regex.test(value)) {\n        const date = new Date(value);\n        if (!isNaN(date.getTime())) {\n          return date;\n        }\n      }\n    }\n    return value;\n  }\n  try {\n    return JSON.parse(data, reviver);\n  } catch {\n    return null;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGgudEI1ZVU2RVkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUU4QiIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGgudEI1ZVU2RVkubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHNhZmVKU09OUGFyc2UoZGF0YSkge1xuICBmdW5jdGlvbiByZXZpdmVyKF8sIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgaXNvODYwMVJlZ2V4ID0gL15cXGR7NH0tXFxkezJ9LVxcZHsyfVRcXGR7Mn06XFxkezJ9OlxcZHsyfSg/OlxcLlxcZCspP1okLztcbiAgICAgIGlmIChpc284NjAxUmVnZXgudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhLCByZXZpdmVyKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgc2FmZUpTT05QYXJzZSBhcyBzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\n");

/***/ }),

/***/ "(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ signOut),\n/* harmony export */   A: () => (/* binding */ originCheckMiddleware),\n/* harmony export */   B: () => (/* binding */ BASE_ERROR_CODES),\n/* harmony export */   C: () => (/* binding */ error),\n/* harmony export */   D: () => (/* binding */ ok),\n/* harmony export */   E: () => (/* binding */ accountInfo),\n/* harmony export */   F: () => (/* binding */ getAccessToken),\n/* harmony export */   G: () => (/* binding */ refreshToken),\n/* harmony export */   H: () => (/* binding */ HIDE_METADATA),\n/* harmony export */   I: () => (/* binding */ unlinkAccount),\n/* harmony export */   J: () => (/* binding */ deleteUserCallback),\n/* harmony export */   K: () => (/* binding */ listUserAccounts),\n/* harmony export */   L: () => (/* binding */ linkSocialAccount),\n/* harmony export */   M: () => (/* binding */ revokeOtherSessions),\n/* harmony export */   N: () => (/* binding */ revokeSessions),\n/* harmony export */   O: () => (/* binding */ revokeSession),\n/* harmony export */   P: () => (/* binding */ requestPasswordResetCallback),\n/* harmony export */   Q: () => (/* binding */ requestPasswordReset),\n/* harmony export */   R: () => (/* binding */ forgetPasswordCallback),\n/* harmony export */   S: () => (/* binding */ deleteUser),\n/* harmony export */   T: () => (/* binding */ setPassword),\n/* harmony export */   U: () => (/* binding */ changePassword),\n/* harmony export */   V: () => (/* binding */ changeEmail),\n/* harmony export */   W: () => (/* binding */ sendVerificationEmail),\n/* harmony export */   X: () => (/* binding */ verifyEmail),\n/* harmony export */   Y: () => (/* binding */ resetPassword),\n/* harmony export */   Z: () => (/* binding */ forgetPassword),\n/* harmony export */   _: () => (/* binding */ signInEmail),\n/* harmony export */   a: () => (/* binding */ validateToken),\n/* harmony export */   a0: () => (/* binding */ callbackOAuth),\n/* harmony export */   a1: () => (/* binding */ signInSocial),\n/* harmony export */   a2: () => (/* binding */ requestOnlySessionMiddleware),\n/* harmony export */   a3: () => (/* binding */ socialProviderList),\n/* harmony export */   a4: () => (/* binding */ SocialProviderListEnum),\n/* harmony export */   a5: () => (/* binding */ apple),\n/* harmony export */   a6: () => (/* binding */ getApplePublicKey),\n/* harmony export */   a7: () => (/* binding */ discord),\n/* harmony export */   a8: () => (/* binding */ dropbox),\n/* harmony export */   a9: () => (/* binding */ facebook),\n/* harmony export */   aa: () => (/* binding */ github),\n/* harmony export */   ab: () => (/* binding */ linear),\n/* harmony export */   ac: () => (/* binding */ linkedin),\n/* harmony export */   ad: () => (/* binding */ gitlab),\n/* harmony export */   ae: () => (/* binding */ google),\n/* harmony export */   af: () => (/* binding */ kick),\n/* harmony export */   ag: () => (/* binding */ microsoft),\n/* harmony export */   ah: () => (/* binding */ notion),\n/* harmony export */   ai: () => (/* binding */ reddit),\n/* harmony export */   aj: () => (/* binding */ roblox),\n/* harmony export */   ak: () => (/* binding */ spotify),\n/* harmony export */   al: () => (/* binding */ tiktok),\n/* harmony export */   am: () => (/* binding */ twitch),\n/* harmony export */   an: () => (/* binding */ twitter),\n/* harmony export */   ao: () => (/* binding */ LANG),\n/* harmony export */   ap: () => (/* binding */ vk),\n/* harmony export */   aq: () => (/* binding */ zoom),\n/* harmony export */   ar: () => (/* binding */ huggingface),\n/* harmony export */   as: () => (/* binding */ slack),\n/* harmony export */   b: () => (/* binding */ generateCodeChallenge),\n/* harmony export */   c: () => (/* binding */ createAuthorizationURL),\n/* harmony export */   d: () => (/* binding */ getOAuth2Tokens),\n/* harmony export */   e: () => (/* binding */ encodeOAuthParameter),\n/* harmony export */   f: () => (/* binding */ decryptOAuthToken),\n/* harmony export */   g: () => (/* binding */ generateState),\n/* harmony export */   h: () => (/* binding */ handleOAuthUserInfo),\n/* harmony export */   i: () => (/* binding */ createAuthMiddleware),\n/* harmony export */   j: () => (/* binding */ createAuthEndpoint),\n/* harmony export */   k: () => (/* binding */ getSessionFromCtx),\n/* harmony export */   l: () => (/* binding */ sessionMiddleware),\n/* harmony export */   m: () => (/* binding */ getSession),\n/* harmony export */   n: () => (/* binding */ freshSessionMiddleware),\n/* harmony export */   o: () => (/* binding */ originCheck),\n/* harmony export */   p: () => (/* binding */ parseState),\n/* harmony export */   q: () => (/* binding */ optionsMiddleware),\n/* harmony export */   r: () => (/* binding */ refreshAccessToken),\n/* harmony export */   s: () => (/* binding */ setTokenUtil),\n/* harmony export */   t: () => (/* binding */ socialProviders),\n/* harmony export */   u: () => (/* binding */ sendVerificationEmailFn),\n/* harmony export */   v: () => (/* binding */ validateAuthorizationCode),\n/* harmony export */   w: () => (/* binding */ createEmailVerificationToken),\n/* harmony export */   x: () => (/* binding */ wildcardMatch),\n/* harmony export */   y: () => (/* binding */ listSessions),\n/* harmony export */   z: () => (/* binding */ updateUser)\n/* harmony export */ });\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! zod/v4 */ \"(action-browser)/../../node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! zod/v4 */ \"(action-browser)/../../node_modules/zod/v4/classic/coerce.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(action-browser)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../crypto/index.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-fetch/fetch */ \"(action-browser)/../../node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! jose */ \"(action-browser)/../../node_modules/jose/dist/node/esm/jwt/verify.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! jose */ \"(action-browser)/../../node_modules/jose/dist/node/esm/util/decode_protected_header.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! jose */ \"(action-browser)/../../node_modules/jose/dist/node/esm/util/decode_jwt.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! jose */ \"(action-browser)/../../node_modules/jose/dist/node/esm/key/import.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! jose */ \"(action-browser)/../../node_modules/jose/dist/node/esm/jwks/remote.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./better-auth.VTXNLFMT.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var jose_errors__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! jose/errors */ \"(action-browser)/../../node_modules/jose/dist/node/esm/util/errors.js\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @better-auth/utils/random */ \"(action-browser)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.DBGfIDnh.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.n2KFGwjY.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! defu */ \"(action-browser)/../../node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst optionsMiddleware = (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createMiddleware)(async () => {\n  return {};\n});\nconst createAuthMiddleware = better_call__WEBPACK_IMPORTED_MODULE_0__.createMiddleware.create({\n  use: [\n    optionsMiddleware,\n    /**\n     * Only use for post hooks\n     */\n    (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createMiddleware)(async () => {\n      return {};\n    })\n  ]\n});\nconst createAuthEndpoint = better_call__WEBPACK_IMPORTED_MODULE_0__.createEndpoint.create({\n  use: [optionsMiddleware]\n});\n\nfunction escapeRegExpChar(char) {\n  if (char === \"-\" || char === \"^\" || char === \"$\" || char === \"+\" || char === \".\" || char === \"(\" || char === \")\" || char === \"|\" || char === \"[\" || char === \"]\" || char === \"{\" || char === \"}\" || char === \"*\" || char === \"?\" || char === \"\\\\\") {\n    return `\\\\${char}`;\n  } else {\n    return char;\n  }\n}\nfunction escapeRegExpString(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += escapeRegExpChar(str[i]);\n  }\n  return result;\n}\nfunction transform(pattern, separator = true) {\n  if (Array.isArray(pattern)) {\n    let regExpPatterns = pattern.map((p) => `^${transform(p, separator)}$`);\n    return `(?:${regExpPatterns.join(\"|\")})`;\n  }\n  let separatorSplitter = \"\";\n  let separatorMatcher = \"\";\n  let wildcard = \".\";\n  if (separator === true) {\n    separatorSplitter = \"/\";\n    separatorMatcher = \"[/\\\\\\\\]\";\n    wildcard = \"[^/\\\\\\\\]\";\n  } else if (separator) {\n    separatorSplitter = separator;\n    separatorMatcher = escapeRegExpString(separatorSplitter);\n    if (separatorMatcher.length > 1) {\n      separatorMatcher = `(?:${separatorMatcher})`;\n      wildcard = `((?!${separatorMatcher}).)`;\n    } else {\n      wildcard = `[^${separatorMatcher}]`;\n    }\n  }\n  let requiredSeparator = separator ? `${separatorMatcher}+?` : \"\";\n  let optionalSeparator = separator ? `${separatorMatcher}*?` : \"\";\n  let segments = separator ? pattern.split(separatorSplitter) : [pattern];\n  let result = \"\";\n  for (let s = 0; s < segments.length; s++) {\n    let segment = segments[s];\n    let nextSegment = segments[s + 1];\n    let currentSeparator = \"\";\n    if (!segment && s > 0) {\n      continue;\n    }\n    if (separator) {\n      if (s === segments.length - 1) {\n        currentSeparator = optionalSeparator;\n      } else if (nextSegment !== \"**\") {\n        currentSeparator = requiredSeparator;\n      } else {\n        currentSeparator = \"\";\n      }\n    }\n    if (separator && segment === \"**\") {\n      if (currentSeparator) {\n        result += s === 0 ? \"\" : currentSeparator;\n        result += `(?:${wildcard}*?${currentSeparator})*?`;\n      }\n      continue;\n    }\n    for (let c = 0; c < segment.length; c++) {\n      let char = segment[c];\n      if (char === \"\\\\\") {\n        if (c < segment.length - 1) {\n          result += escapeRegExpChar(segment[c + 1]);\n          c++;\n        }\n      } else if (char === \"?\") {\n        result += wildcard;\n      } else if (char === \"*\") {\n        result += `${wildcard}*?`;\n      } else {\n        result += escapeRegExpChar(char);\n      }\n    }\n    result += currentSeparator;\n  }\n  return result;\n}\nfunction isMatch(regexp, sample) {\n  if (typeof sample !== \"string\") {\n    throw new TypeError(`Sample must be a string, but ${typeof sample} given`);\n  }\n  return regexp.test(sample);\n}\nfunction wildcardMatch(pattern, options) {\n  if (typeof pattern !== \"string\" && !Array.isArray(pattern)) {\n    throw new TypeError(\n      `The first argument must be a single pattern string or an array of patterns, but ${typeof pattern} given`\n    );\n  }\n  if (typeof options === \"string\" || typeof options === \"boolean\") {\n    options = { separator: options };\n  }\n  if (arguments.length === 2 && !(typeof options === \"undefined\" || typeof options === \"object\" && options !== null && !Array.isArray(options))) {\n    throw new TypeError(\n      `The second argument must be an options object or a string/boolean separator, but ${typeof options} given`\n    );\n  }\n  options = options || {};\n  if (options.separator === \"\\\\\") {\n    throw new Error(\n      \"\\\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead\"\n    );\n  }\n  let regexpPattern = transform(pattern, options.separator);\n  let regexp = new RegExp(`^${regexpPattern}$`, options.flags);\n  let fn = isMatch.bind(null, regexp);\n  fn.options = options;\n  fn.pattern = pattern;\n  fn.regexp = regexp;\n  return fn;\n}\n\nconst originCheckMiddleware = createAuthMiddleware(async (ctx) => {\n  if (ctx.request?.method !== \"POST\" || !ctx.request) {\n    return;\n  }\n  const { body, query, context } = ctx;\n  const originHeader = ctx.headers?.get(\"origin\") || ctx.headers?.get(\"referer\") || \"\";\n  const callbackURL = body?.callbackURL || query?.callbackURL;\n  const redirectURL = body?.redirectTo;\n  const errorCallbackURL = body?.errorCallbackURL;\n  const newUserCallbackURL = body?.newUserCallbackURL;\n  const trustedOrigins = Array.isArray(context.options.trustedOrigins) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const usesCookies = ctx.headers?.has(\"cookie\");\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      if (pattern.includes(\"://\")) {\n        return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) || url);\n      }\n      return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.b)(url));\n    }\n    const protocol = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.c)(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(url)\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  if (usesCookies && !ctx.context.options.advanced?.disableCSRFCheck) {\n    validateURL(originHeader, \"origin\");\n  }\n  callbackURL && validateURL(callbackURL, \"callbackURL\");\n  redirectURL && validateURL(redirectURL, \"redirectURL\");\n  errorCallbackURL && validateURL(errorCallbackURL, \"errorCallbackURL\");\n  newUserCallbackURL && validateURL(newUserCallbackURL, \"newUserCallbackURL\");\n});\nconst originCheck = (getValue) => createAuthMiddleware(async (ctx) => {\n  if (!ctx.request) {\n    return;\n  }\n  const { context } = ctx;\n  const callbackURL = getValue(ctx);\n  const trustedOrigins = Array.isArray(\n    context.options.trustedOrigins\n  ) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      if (pattern.includes(\"://\")) {\n        return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) || url);\n      }\n      return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.b)(url));\n    }\n    const protocol = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.c)(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(\n        url\n      )\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  const callbacks = Array.isArray(callbackURL) ? callbackURL : [callbackURL];\n  for (const url of callbacks) {\n    validateURL(url, \"callbackURL\");\n  }\n});\n\nconst BASE_ERROR_CODES = {\n  USER_NOT_FOUND: \"User not found\",\n  FAILED_TO_CREATE_USER: \"Failed to create user\",\n  FAILED_TO_CREATE_SESSION: \"Failed to create session\",\n  FAILED_TO_UPDATE_USER: \"Failed to update user\",\n  FAILED_TO_GET_SESSION: \"Failed to get session\",\n  INVALID_PASSWORD: \"Invalid password\",\n  INVALID_EMAIL: \"Invalid email\",\n  INVALID_EMAIL_OR_PASSWORD: \"Invalid email or password\",\n  SOCIAL_ACCOUNT_ALREADY_LINKED: \"Social account already linked\",\n  PROVIDER_NOT_FOUND: \"Provider not found\",\n  INVALID_TOKEN: \"invalid token\",\n  ID_TOKEN_NOT_SUPPORTED: \"id_token not supported\",\n  FAILED_TO_GET_USER_INFO: \"Failed to get user info\",\n  USER_EMAIL_NOT_FOUND: \"User email not found\",\n  EMAIL_NOT_VERIFIED: \"Email not verified\",\n  PASSWORD_TOO_SHORT: \"Password too short\",\n  PASSWORD_TOO_LONG: \"Password too long\",\n  USER_ALREADY_EXISTS: \"User already exists\",\n  EMAIL_CAN_NOT_BE_UPDATED: \"Email can not be updated\",\n  CREDENTIAL_ACCOUNT_NOT_FOUND: \"Credential account not found\",\n  SESSION_EXPIRED: \"Session expired. Re-authenticate to perform this action.\",\n  FAILED_TO_UNLINK_LAST_ACCOUNT: \"You can't unlink your last account\",\n  ACCOUNT_NOT_FOUND: \"Account not found\",\n  USER_ALREADY_HAS_PASSWORD: \"User already has a password. Provide that to delete the account.\"\n};\n\nconst getSession = () => createAuthEndpoint(\n  \"/get-session\",\n  {\n    method: \"GET\",\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_20__.optional(\n      zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n        /**\n         * If cookie cache is enabled, it will disable the cache\n         * and fetch the session from the database\n         */\n        disableCookieCache: zod_v4__WEBPACK_IMPORTED_MODULE_21__.boolean().meta({\n          description: \"Disable cookie cache and fetch session from database\"\n        }).optional(),\n        disableRefresh: zod_v4__WEBPACK_IMPORTED_MODULE_21__.boolean().meta({\n          description: \"Disable session refresh. Useful for checking session status, without updating the session\"\n        }).optional()\n      })\n    ),\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Get the current session\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    session: {\n                      $ref: \"#/components/schemas/Session\"\n                    },\n                    user: {\n                      $ref: \"#/components/schemas/User\"\n                    }\n                  },\n                  required: [\"session\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessionCookieToken = await ctx.getSignedCookie(\n        ctx.context.authCookies.sessionToken.name,\n        ctx.context.secret\n      );\n      if (!sessionCookieToken) {\n        return null;\n      }\n      const sessionDataCookie = ctx.getCookie(\n        ctx.context.authCookies.sessionData.name\n      );\n      const sessionDataPayload = sessionDataCookie ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_11__.s)(_better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_13__.binary.decode(_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64.decode(sessionDataCookie))) : null;\n      if (sessionDataPayload) {\n        const isValid = await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_12__.createHMAC)(\"SHA-256\", \"base64urlnopad\").verify(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionDataPayload.session,\n            expiresAt: sessionDataPayload.expiresAt\n          }),\n          sessionDataPayload.signature\n        );\n        if (!isValid) {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n          return ctx.json(null);\n        }\n      }\n      const dontRememberMe = await ctx.getSignedCookie(\n        ctx.context.authCookies.dontRememberToken.name,\n        ctx.context.secret\n      );\n      if (sessionDataPayload?.session && ctx.context.options.session?.cookieCache?.enabled && !ctx.query?.disableCookieCache) {\n        const session2 = sessionDataPayload.session;\n        const hasExpired = sessionDataPayload.expiresAt < Date.now() || session2.session.expiresAt < /* @__PURE__ */ new Date();\n        if (!hasExpired) {\n          ctx.context.session = session2;\n          return ctx.json(\n            session2\n          );\n        } else {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n        }\n      }\n      const session = await ctx.context.internalAdapter.findSession(sessionCookieToken);\n      ctx.context.session = session;\n      if (!session || session.session.expiresAt < /* @__PURE__ */ new Date()) {\n        (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n        if (session) {\n          await ctx.context.internalAdapter.deleteSession(\n            session.session.token\n          );\n        }\n        return ctx.json(null);\n      }\n      if (dontRememberMe || ctx.query?.disableRefresh) {\n        return ctx.json(\n          session\n        );\n      }\n      const expiresIn = ctx.context.sessionConfig.expiresIn;\n      const updateAge = ctx.context.sessionConfig.updateAge;\n      const sessionIsDueToBeUpdatedDate = session.session.expiresAt.valueOf() - expiresIn * 1e3 + updateAge * 1e3;\n      const shouldBeUpdated = sessionIsDueToBeUpdatedDate <= Date.now();\n      if (shouldBeUpdated && (!ctx.query?.disableRefresh || !ctx.context.options.session?.disableSessionRefresh)) {\n        const updatedSession = await ctx.context.internalAdapter.updateSession(\n          session.session.token,\n          {\n            expiresAt: (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(ctx.context.sessionConfig.expiresIn, \"sec\"),\n            updatedAt: /* @__PURE__ */ new Date()\n          }\n        );\n        if (!updatedSession) {\n          (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n          return ctx.json(null, { status: 401 });\n        }\n        const maxAge = (updatedSession.expiresAt.valueOf() - Date.now()) / 1e3;\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(\n          ctx,\n          {\n            session: updatedSession,\n            user: session.user\n          },\n          false,\n          {\n            maxAge\n          }\n        );\n        return ctx.json({\n          session: updatedSession,\n          user: session.user\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setCookieCache)(ctx, session);\n      return ctx.json(\n        session\n      );\n    } catch (error) {\n      ctx.context.logger.error(\"INTERNAL_SERVER_ERROR\", error);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n  }\n);\nconst getSessionFromCtx = async (ctx, config) => {\n  if (ctx.context.session) {\n    return ctx.context.session;\n  }\n  const session = await getSession()({\n    ...ctx,\n    asResponse: false,\n    headers: ctx.headers,\n    returnHeaders: false,\n    query: {\n      ...config,\n      ...ctx.query\n    }\n  }).catch((e) => {\n    return null;\n  });\n  ctx.context.session = session;\n  return session;\n};\nconst sessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n  }\n  return {\n    session\n  };\n});\nconst requestOnlySessionMiddleware = createAuthMiddleware(\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session?.session && (ctx.request || ctx.headers)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    return { session };\n  }\n);\nconst freshSessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n  }\n  if (ctx.context.sessionConfig.freshAge === 0) {\n    return {\n      session\n    };\n  }\n  const freshAge = ctx.context.sessionConfig.freshAge;\n  const lastUpdated = session.session.updatedAt?.valueOf() || session.session.createdAt.valueOf();\n  const now = Date.now();\n  const isFresh = now - lastUpdated < freshAge * 1e3;\n  if (!isFresh) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n      message: \"Session is not fresh\"\n    });\n  }\n  return {\n    session\n  };\n});\nconst listSessions = () => createAuthEndpoint(\n  \"/list-sessions\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"List all active sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    $ref: \"#/components/schemas/Session\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessions = await ctx.context.internalAdapter.listSessions(\n        ctx.context.session.user.id\n      );\n      const activeSessions = sessions.filter((session) => {\n        return session.expiresAt > /* @__PURE__ */ new Date();\n      });\n      return ctx.json(\n        activeSessions\n      );\n    } catch (e) {\n      ctx.context.logger.error(e);\n      throw ctx.error(\"INTERNAL_SERVER_ERROR\");\n    }\n  }\n);\nconst revokeSession = createAuthEndpoint(\n  \"/revoke-session\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The token to revoke\"\n      })\n    }),\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke a single session\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  token: {\n                    type: \"string\",\n                    description: \"The token to revoke\"\n                  }\n                },\n                required: [\"token\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the session was revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token;\n    const findSession = await ctx.context.internalAdapter.findSession(token);\n    if (!findSession) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Session not found\"\n      });\n    }\n    if (findSession.session.userId !== ctx.context.session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    try {\n      await ctx.context.internalAdapter.deleteSession(token);\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeSessions = createAuthEndpoint(\n  \"/revoke-sessions\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke all sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      await ctx.context.internalAdapter.deleteSessions(\n        ctx.context.session.user.id\n      );\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeOtherSessions = createAuthEndpoint(\n  \"/revoke-other-sessions\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Revoke all other sessions for the user except the current one\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all other sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    if (!session.user) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    const sessions = await ctx.context.internalAdapter.listSessions(\n      session.user.id\n    );\n    const activeSessions = sessions.filter((session2) => {\n      return session2.expiresAt > /* @__PURE__ */ new Date();\n    });\n    const otherSessions = activeSessions.filter(\n      (session2) => session2.token !== ctx.context.session.session.token\n    );\n    await Promise.all(\n      otherSessions.map(\n        (session2) => ctx.context.internalAdapter.deleteSession(session2.token)\n      )\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nasync function createEmailVerificationToken(secret, email, updateTo, expiresIn = 3600) {\n  const token = await (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_4__.signJWT)(\n    {\n      email: email.toLowerCase(),\n      updateTo\n    },\n    secret,\n    expiresIn\n  );\n  return token;\n}\nasync function sendVerificationEmailFn(ctx, user) {\n  if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n    ctx.context.logger.error(\"Verification email isn't enabled.\");\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"Verification email isn't enabled\"\n    });\n  }\n  const token = await createEmailVerificationToken(\n    ctx.context.secret,\n    user.email,\n    void 0,\n    ctx.context.options.emailVerification?.expiresIn\n  );\n  const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n  await ctx.context.options.emailVerification.sendVerificationEmail(\n    {\n      user,\n      url,\n      token\n    },\n    ctx.request\n  );\n}\nconst sendVerificationEmail = createAuthEndpoint(\n  \"/send-verification-email\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.email().meta({\n        description: \"The email to send the verification email to\"\n      }),\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to use for email verification callback\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a verification email to the user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  email: {\n                    type: \"string\",\n                    description: \"The email to send the verification email to\",\n                    example: \"user@example.com\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\",\n                    example: \"https://example.com/callback\",\n                    nullable: true\n                  }\n                },\n                required: [\"email\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was sent successfully\",\n                      example: true\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            description: \"Bad Request\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Error message\",\n                      example: \"Verification email isn't enabled\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const { email } = ctx.body;\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      const user = await ctx.context.internalAdapter.findUserByEmail(email);\n      if (!user) {\n        return ctx.json({\n          status: true\n        });\n      }\n      await sendVerificationEmailFn(ctx, user.user);\n      return ctx.json({\n        status: true\n      });\n    }\n    if (session?.user.emailVerified) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to an unverified email\"\n      });\n    }\n    if (session?.user.email !== email) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to your own email\"\n      });\n    }\n    await sendVerificationEmailFn(ctx, session.user);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst verifyEmail = createAuthEndpoint(\n  \"/verify-email\",\n  {\n    method: \"GET\",\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The token to verify the email\"\n      }),\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Verify the email of the user\",\n        parameters: [\n          {\n            name: \"token\",\n            in: \"query\",\n            description: \"The token to verify the email\",\n            required: true,\n            schema: {\n              type: \"string\"\n            }\n          },\n          {\n            name: \"callbackURL\",\n            in: \"query\",\n            description: \"The URL to redirect to after email verification\",\n            required: false,\n            schema: {\n              type: \"string\"\n            }\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"User ID\"\n                        },\n                        email: {\n                          type: \"string\",\n                          description: \"User email\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"User name\"\n                        },\n                        image: {\n                          type: \"string\",\n                          description: \"User image URL\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Indicates if the user email is verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          description: \"User creation date\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          description: \"User update date\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"image\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    },\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was verified successfully\"\n                    }\n                  },\n                  required: [\"user\", \"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    function redirectOnError(error) {\n      if (ctx.query.callbackURL) {\n        if (ctx.query.callbackURL.includes(\"?\")) {\n          throw ctx.redirect(`${ctx.query.callbackURL}&error=${error}`);\n        }\n        throw ctx.redirect(`${ctx.query.callbackURL}?error=${error}`);\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: error\n      });\n    }\n    const { token } = ctx.query;\n    let jwt;\n    try {\n      jwt = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(\n        token,\n        new TextEncoder().encode(ctx.context.secret),\n        {\n          algorithms: [\"HS256\"]\n        }\n      );\n    } catch (e) {\n      if (e instanceof jose_errors__WEBPACK_IMPORTED_MODULE_23__.JWTExpired) {\n        return redirectOnError(\"token_expired\");\n      }\n      return redirectOnError(\"invalid_token\");\n    }\n    const schema = zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().email(),\n      updateTo: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n    });\n    const parsed = schema.parse(jwt.payload);\n    const user = await ctx.context.internalAdapter.findUserByEmail(\n      parsed.email\n    );\n    if (!user) {\n      return redirectOnError(\"user_not_found\");\n    }\n    if (parsed.updateTo) {\n      const session = await getSessionFromCtx(ctx);\n      if (!session) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      if (session.user.email !== parsed.email) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      const updatedUser2 = await ctx.context.internalAdapter.updateUserByEmail(\n        parsed.email,\n        {\n          email: parsed.updateTo,\n          emailVerified: false\n        },\n        ctx\n      );\n      const newToken = await createEmailVerificationToken(\n        ctx.context.secret,\n        parsed.updateTo\n      );\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: updatedUser2,\n          url: `${ctx.context.baseURL}/verify-email?token=${newToken}&callbackURL=${ctx.query.callbackURL || \"/\"}`,\n          token: newToken\n        },\n        ctx.request\n      );\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n        session: session.session,\n        user: {\n          ...session.user,\n          email: parsed.updateTo,\n          emailVerified: false\n        }\n      });\n      if (ctx.query.callbackURL) {\n        throw ctx.redirect(ctx.query.callbackURL);\n      }\n      return ctx.json({\n        status: true,\n        user: {\n          id: updatedUser2.id,\n          email: updatedUser2.email,\n          name: updatedUser2.name,\n          image: updatedUser2.image,\n          emailVerified: updatedUser2.emailVerified,\n          createdAt: updatedUser2.createdAt,\n          updatedAt: updatedUser2.updatedAt\n        }\n      });\n    }\n    if (ctx.context.options.emailVerification?.onEmailVerification) {\n      await ctx.context.options.emailVerification.onEmailVerification(\n        user.user,\n        ctx.request\n      );\n    }\n    const updatedUser = await ctx.context.internalAdapter.updateUserByEmail(\n      parsed.email,\n      {\n        emailVerified: true\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.afterEmailVerification) {\n      await ctx.context.options.emailVerification.afterEmailVerification(\n        updatedUser,\n        ctx.request\n      );\n    }\n    if (ctx.context.options.emailVerification?.autoSignInAfterVerification) {\n      const currentSession = await getSessionFromCtx(ctx);\n      if (!currentSession || currentSession.user.email !== parsed.email) {\n        const session = await ctx.context.internalAdapter.createSession(\n          user.user.id,\n          ctx\n        );\n        if (!session) {\n          throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n            message: \"Failed to create session\"\n          });\n        }\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n          session,\n          user: {\n            ...user.user,\n            emailVerified: true\n          }\n        });\n      } else {\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n          session: currentSession.session,\n          user: {\n            ...currentSession.user,\n            emailVerified: true\n          }\n        });\n      }\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL);\n    }\n    return ctx.json({\n      status: true,\n      user: null\n    });\n  }\n);\n\nconst HIDE_METADATA = {\n  isAction: false\n};\n\nasync function generateState(c, link) {\n  const callbackURL = c.body?.callbackURL || c.context.options.baseURL;\n  if (!callbackURL) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"callbackURL is required\"\n    });\n  }\n  const codeVerifier = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(128);\n  const state = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(32);\n  const data = JSON.stringify({\n    callbackURL,\n    codeVerifier,\n    errorURL: c.body?.errorCallbackURL,\n    newUserURL: c.body?.newUserCallbackURL,\n    link,\n    /**\n     * This is the actual expiry time of the state\n     */\n    expiresAt: Date.now() + 10 * 60 * 1e3,\n    requestSignUp: c.body?.requestSignUp\n  });\n  const expiresAt = /* @__PURE__ */ new Date();\n  expiresAt.setMinutes(expiresAt.getMinutes() + 10);\n  const verification = await c.context.internalAdapter.createVerificationValue(\n    {\n      value: data,\n      identifier: state,\n      expiresAt\n    },\n    c\n  );\n  if (!verification) {\n    c.context.logger.error(\n      \"Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database\"\n    );\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n      message: \"Unable to create verification\"\n    });\n  }\n  return {\n    state: verification.identifier,\n    codeVerifier\n  };\n}\nasync function parseState(c) {\n  const state = c.query.state || c.body.state;\n  const data = await c.context.internalAdapter.findVerificationValue(state);\n  if (!data) {\n    c.context.logger.error(\"State Mismatch. Verification not found\", {\n      state\n    });\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  const parsedData = zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n    callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string(),\n    codeVerifier: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string(),\n    errorURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n    newUserURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n    expiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_20__.number(),\n    link: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string(),\n      userId: zod_v4__WEBPACK_IMPORTED_MODULE_21__.string()\n    }).optional(),\n    requestSignUp: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().optional()\n  }).parse(JSON.parse(data.value));\n  if (!parsedData.errorURL) {\n    parsedData.errorURL = `${c.context.baseURL}/error`;\n  }\n  if (parsedData.expiresAt < Date.now()) {\n    await c.context.internalAdapter.deleteVerificationValue(data.id);\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  await c.context.internalAdapter.deleteVerificationValue(data.id);\n  return parsedData;\n}\n\nasync function generateCodeChallenge(codeVerifier) {\n  const codeChallengeBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_2__.createHash)(\"SHA-256\").digest(codeVerifier);\n  return _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.encode(new Uint8Array(codeChallengeBytes), {\n    padding: false\n  });\n}\nfunction getOAuth2Tokens(data) {\n  return {\n    tokenType: data.token_type,\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    accessTokenExpiresAt: data.expires_in ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(data.expires_in, \"sec\") : void 0,\n    refreshTokenExpiresAt: data.refresh_token_expires_in ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(data.refresh_token_expires_in, \"sec\") : void 0,\n    scopes: data?.scope ? typeof data.scope === \"string\" ? data.scope.split(\" \") : data.scope : [],\n    idToken: data.id_token\n  };\n}\nconst encodeOAuthParameter = (value) => encodeURIComponent(value).replace(/%20/g, \"+\");\nfunction decryptOAuthToken(token, ctx) {\n  if (!token) return token;\n  if (ctx.options.account?.encryptOAuthTokens) {\n    return (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_4__.symmetricDecrypt)({\n      key: ctx.secret,\n      data: token\n    });\n  }\n  return token;\n}\nfunction setTokenUtil(token, ctx) {\n  if (ctx.options.account?.encryptOAuthTokens && token) {\n    return (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_4__.symmetricEncrypt)({\n      key: ctx.secret,\n      data: token\n    });\n  }\n  return token;\n}\n\nasync function handleOAuthUserInfo(c, {\n  userInfo,\n  account,\n  callbackURL,\n  disableSignUp,\n  overrideUserInfo\n}) {\n  const dbUser = await c.context.internalAdapter.findOAuthUser(\n    userInfo.email.toLowerCase(),\n    account.accountId,\n    account.providerId\n  ).catch((e) => {\n    _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(\n      \"Better auth was unable to query your database.\\nError: \",\n      e\n    );\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=internal_server_error`);\n  });\n  let user = dbUser?.user;\n  let isRegister = !user;\n  if (dbUser) {\n    const hasBeenLinked = dbUser.accounts.find(\n      (a) => a.providerId === account.providerId && a.accountId === account.accountId\n    );\n    if (!hasBeenLinked) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        account.providerId\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        if (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_17__.b) {\n          _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.warn(\n            `User already exist but account isn't linked to ${account.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`\n          );\n        }\n        return {\n          error: \"account not linked\",\n          data: null\n        };\n      }\n      try {\n        await c.context.internalAdapter.linkAccount(\n          {\n            providerId: account.providerId,\n            accountId: userInfo.id.toString(),\n            userId: dbUser.user.id,\n            accessToken: await setTokenUtil(account.accessToken, c.context),\n            refreshToken: await setTokenUtil(account.refreshToken, c.context),\n            idToken: account.idToken,\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          },\n          c\n        );\n      } catch (e) {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(\"Unable to link account\", e);\n        return {\n          error: \"unable to link account\",\n          data: null\n        };\n      }\n    } else {\n      if (c.context.options.account?.updateAccountOnSignIn !== false) {\n        const updateData = Object.fromEntries(\n          Object.entries({\n            idToken: account.idToken,\n            accessToken: await setTokenUtil(account.accessToken, c.context),\n            refreshToken: await setTokenUtil(account.refreshToken, c.context),\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          }).filter(([_, value]) => value !== void 0)\n        );\n        if (Object.keys(updateData).length > 0) {\n          await c.context.internalAdapter.updateAccount(\n            hasBeenLinked.id,\n            updateData,\n            c\n          );\n        }\n      }\n    }\n    if (overrideUserInfo) {\n      const { id: _, ...restUserInfo } = userInfo;\n      await c.context.internalAdapter.updateUser(dbUser.user.id, {\n        ...restUserInfo,\n        email: userInfo.email.toLowerCase(),\n        emailVerified: userInfo.email.toLowerCase() === dbUser.user.email ? dbUser.user.emailVerified || userInfo.emailVerified : userInfo.emailVerified\n      });\n    }\n  } else {\n    if (disableSignUp) {\n      return {\n        error: \"signup disabled\",\n        data: null,\n        isRegister: false\n      };\n    }\n    try {\n      const { id: _, ...restUserInfo } = userInfo;\n      user = await c.context.internalAdapter.createOAuthUser(\n        {\n          ...restUserInfo,\n          email: userInfo.email.toLowerCase()\n        },\n        {\n          accessToken: await setTokenUtil(account.accessToken, c.context),\n          refreshToken: await setTokenUtil(account.refreshToken, c.context),\n          idToken: account.idToken,\n          accessTokenExpiresAt: account.accessTokenExpiresAt,\n          refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n          scope: account.scope,\n          providerId: account.providerId,\n          accountId: userInfo.id.toString()\n        },\n        c\n      ).then((res) => res?.user);\n      if (!userInfo.emailVerified && user && c.context.options.emailVerification?.sendOnSignUp) {\n        const token = await createEmailVerificationToken(\n          c.context.secret,\n          user.email,\n          void 0,\n          c.context.options.emailVerification?.expiresIn\n        );\n        const url = `${c.context.baseURL}/verify-email?token=${token}&callbackURL=${callbackURL}`;\n        await c.context.options.emailVerification?.sendVerificationEmail?.(\n          {\n            user,\n            url,\n            token\n          },\n          c.request\n        );\n      }\n    } catch (e) {\n      _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(e);\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n        return {\n          error: e.message,\n          data: null,\n          isRegister: false\n        };\n      }\n      return {\n        error: \"unable to create user\",\n        data: null,\n        isRegister: false\n      };\n    }\n  }\n  if (!user) {\n    return {\n      error: \"unable to create user\",\n      data: null,\n      isRegister: false\n    };\n  }\n  const session = await c.context.internalAdapter.createSession(user.id, c);\n  if (!session) {\n    return {\n      error: \"unable to create session\",\n      data: null,\n      isRegister: false\n    };\n  }\n  return {\n    data: {\n      session,\n      user\n    },\n    error: null,\n    isRegister\n  };\n}\n\nasync function createAuthorizationURL({\n  id,\n  options,\n  authorizationEndpoint,\n  state,\n  codeVerifier,\n  scopes,\n  claims,\n  redirectURI,\n  duration,\n  prompt,\n  accessType,\n  responseType,\n  display,\n  loginHint,\n  hd,\n  responseMode,\n  additionalParams,\n  scopeJoiner\n}) {\n  const url = new URL(authorizationEndpoint);\n  url.searchParams.set(\"response_type\", responseType || \"code\");\n  url.searchParams.set(\"client_id\", options.clientId);\n  url.searchParams.set(\"state\", state);\n  url.searchParams.set(\"scope\", scopes.join(scopeJoiner || \" \"));\n  url.searchParams.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  duration && url.searchParams.set(\"duration\", duration);\n  display && url.searchParams.set(\"display\", display);\n  loginHint && url.searchParams.set(\"login_hint\", loginHint);\n  prompt && url.searchParams.set(\"prompt\", prompt);\n  hd && url.searchParams.set(\"hd\", hd);\n  accessType && url.searchParams.set(\"access_type\", accessType);\n  responseMode && url.searchParams.set(\"response_mode\", responseMode);\n  if (codeVerifier) {\n    const codeChallenge = await generateCodeChallenge(codeVerifier);\n    url.searchParams.set(\"code_challenge_method\", \"S256\");\n    url.searchParams.set(\"code_challenge\", codeChallenge);\n  }\n  if (claims) {\n    const claimsObj = claims.reduce(\n      (acc, claim) => {\n        acc[claim] = null;\n        return acc;\n      },\n      {}\n    );\n    url.searchParams.set(\n      \"claims\",\n      JSON.stringify({\n        id_token: { email: null, email_verified: null, ...claimsObj }\n      })\n    );\n  }\n  if (additionalParams) {\n    Object.entries(additionalParams).forEach(([key, value]) => {\n      url.searchParams.set(key, value);\n    });\n  }\n  return url;\n}\n\nasync function validateAuthorizationCode({\n  code,\n  codeVerifier,\n  redirectURI,\n  options,\n  tokenEndpoint,\n  authentication,\n  deviceId,\n  headers,\n  additionalParams = {}\n}) {\n  const body = new URLSearchParams();\n  const requestHeaders = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\",\n    \"user-agent\": \"better-auth\",\n    ...headers\n  };\n  body.set(\"grant_type\", \"authorization_code\");\n  body.set(\"code\", code);\n  codeVerifier && body.set(\"code_verifier\", codeVerifier);\n  options.clientKey && body.set(\"client_key\", options.clientKey);\n  deviceId && body.set(\"device_id\", deviceId);\n  body.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  body.set(\"client_id\", options.clientId);\n  if (authentication === \"basic\") {\n    const encodedCredentials = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64.encode(\n      `${options.clientId}:${options.clientSecret}`\n    );\n    requestHeaders[\"authorization\"] = `Basic ${encodedCredentials}`;\n  } else {\n    body.set(\"client_secret\", options.clientSecret);\n  }\n  for (const [key, value] of Object.entries(additionalParams)) {\n    if (!body.has(key)) body.append(key, value);\n  }\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers: requestHeaders\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = getOAuth2Tokens(data);\n  return tokens;\n}\nasync function validateToken(token, jwksEndpoint) {\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(jwksEndpoint, {\n    method: \"GET\",\n    headers: {\n      accept: \"application/json\",\n      \"user-agent\": \"better-auth\"\n    }\n  });\n  if (error) {\n    throw error;\n  }\n  const keys = data[\"keys\"];\n  const header = JSON.parse(atob(token.split(\".\")[0]));\n  const key = keys.find((key2) => key2.kid === header.kid);\n  if (!key) {\n    throw new Error(\"Key not found\");\n  }\n  const verified = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(token, key);\n  return verified;\n}\n\nasync function refreshAccessToken({\n  refreshToken,\n  options,\n  tokenEndpoint,\n  authentication,\n  extraParams,\n  grantType = \"refresh_token\"\n}) {\n  const body = new URLSearchParams();\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\"\n  };\n  body.set(\"grant_type\", grantType);\n  body.set(\"refresh_token\", refreshToken);\n  if (authentication === \"basic\") {\n    headers[\"authorization\"] = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64.encode(\n      `${options.clientId}:${options.clientSecret}`\n    );\n  } else {\n    body.set(\"client_id\", options.clientId);\n    body.set(\"client_secret\", options.clientSecret);\n  }\n  if (extraParams) {\n    for (const [key, value] of Object.entries(extraParams)) {\n      body.set(key, value);\n    }\n  }\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = {\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    tokenType: data.token_type,\n    scopes: data.scope?.split(\" \"),\n    idToken: data.id_token\n  };\n  if (data.expires_in) {\n    const now = /* @__PURE__ */ new Date();\n    tokens.accessTokenExpiresAt = new Date(\n      now.getTime() + data.expires_in * 1e3\n    );\n  }\n  return tokens;\n}\n\nconst apple = (options) => {\n  const tokenEndpoint = \"https://appleid.apple.com/auth/token\";\n  return {\n    id: \"apple\",\n    name: \"Apple\",\n    async createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scope = options.disableDefaultScope ? [] : [\"email\", \"name\"];\n      options.scope && _scope.push(...options.scope);\n      scopes && _scope.push(...scopes);\n      const url = await createAuthorizationURL({\n        id: \"apple\",\n        options,\n        authorizationEndpoint: \"https://appleid.apple.com/auth/authorize\",\n        scopes: _scope,\n        state,\n        redirectURI,\n        responseMode: \"form_post\",\n        responseType: \"code id_token\"\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const decodedHeader = (0,jose__WEBPACK_IMPORTED_MODULE_24__.decodeProtectedHeader)(token);\n      const { kid, alg: jwtAlg } = decodedHeader;\n      if (!kid || !jwtAlg) return false;\n      const publicKey = await getApplePublicKey(kid);\n      const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(token, publicKey, {\n        algorithms: [jwtAlg],\n        issuer: \"https://appleid.apple.com\",\n        audience: options.appBundleIdentifier || options.clientId,\n        maxTokenAge: \"1h\"\n      });\n      [\"email_verified\", \"is_private_email\"].forEach((field) => {\n        if (jwtClaims[field] !== void 0) {\n          jwtClaims[field] = Boolean(jwtClaims[field]);\n        }\n      });\n      if (nonce && jwtClaims.nonce !== nonce) {\n        return false;\n      }\n      return !!jwtClaims;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://appleid.apple.com/auth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const profile = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n      if (!profile) {\n        return null;\n      }\n      const name = token.user ? `${token.user.name?.firstName} ${token.user.name?.lastName}` : profile.name || profile.email;\n      const emailVerified = typeof profile.email_verified === \"boolean\" ? profile.email_verified : profile.email_verified === \"true\";\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name,\n          emailVerified,\n          email: profile.email,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\nconst getApplePublicKey = async (kid) => {\n  const APPLE_BASE_URL = \"https://appleid.apple.com\";\n  const JWKS_APPLE_URI = \"/auth/keys\";\n  const { data } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(`${APPLE_BASE_URL}${JWKS_APPLE_URI}`);\n  if (!data?.keys) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"Keys not found\"\n    });\n  }\n  const jwk = data.keys.find((key) => key.kid === kid);\n  if (!jwk) {\n    throw new Error(`JWK with kid ${kid} not found`);\n  }\n  return await (0,jose__WEBPACK_IMPORTED_MODULE_26__.importJWK)(jwk, jwk.alg);\n};\n\nconst discord = (options) => {\n  return {\n    id: \"discord\",\n    name: \"Discord\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identify\", \"email\"];\n      scopes && _scopes.push(...scopes);\n      options.scope && _scopes.push(...options.scope);\n      return new URL(\n        `https://discord.com/api/oauth2/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"none\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://discord.com/api/users/@me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (profile.avatar === null) {\n        const defaultAvatarNumber = profile.discriminator === \"0\" ? Number(BigInt(profile.id) >> BigInt(22)) % 6 : parseInt(profile.discriminator) % 5;\n        profile.image_url = `https://cdn.discordapp.com/embed/avatars/${defaultAvatarNumber}.png`;\n      } else {\n        const format = profile.avatar.startsWith(\"a_\") ? \"gif\" : \"png\";\n        profile.image_url = `https://cdn.discordapp.com/avatars/${profile.id}/${profile.avatar}.${format}`;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.global_name || profile.username || \"\",\n          email: profile.email,\n          emailVerified: profile.verified,\n          image: profile.image_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst facebook = (options) => {\n  return {\n    id: \"facebook\",\n    name: \"Facebook\",\n    async createAuthorizationURL({ state, scopes, redirectURI, loginHint }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"public_profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: \"facebook\",\n        options,\n        authorizationEndpoint: \"https://www.facebook.com/v21.0/dialog/oauth\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        additionalParams: options.configId ? {\n          config_id: options.configId\n        } : {}\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://graph.facebook.com/oauth/access_token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      if (token.split(\".\").length === 3) {\n        try {\n          const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(\n            token,\n            (0,jose__WEBPACK_IMPORTED_MODULE_27__.createRemoteJWKSet)(\n              // https://developers.facebook.com/docs/facebook-login/limited-login/token/#jwks\n              new URL(\n                \"https://limited.facebook.com/.well-known/oauth/openid/jwks/\"\n              )\n            ),\n            {\n              algorithms: [\"RS256\"],\n              audience: options.clientId,\n              issuer: \"https://www.facebook.com\"\n            }\n          );\n          if (nonce && jwtClaims.nonce !== nonce) {\n            return false;\n          }\n          return !!jwtClaims;\n        } catch (error) {\n          return false;\n        }\n      }\n      return true;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://graph.facebook.com/v18.0/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (token.idToken && token.idToken.split(\".\").length === 3) {\n        const profile2 = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n        const user = {\n          id: profile2.sub,\n          name: profile2.name,\n          email: profile2.email,\n          picture: {\n            data: {\n              url: profile2.picture,\n              height: 100,\n              width: 100,\n              is_silhouette: false\n            }\n          }\n        };\n        const userMap2 = await options.mapProfileToUser?.({\n          ...user,\n          email_verified: true\n        });\n        return {\n          user: {\n            ...user,\n            emailVerified: true,\n            ...userMap2\n          },\n          data: profile2\n        };\n      }\n      const fields = [\n        \"id\",\n        \"name\",\n        \"email\",\n        \"picture\",\n        ...options?.fields || []\n      ];\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://graph.facebook.com/me?fields=\" + fields.join(\",\"),\n        {\n          auth: {\n            type: \"Bearer\",\n            token: token.accessToken\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.picture.data.url,\n          emailVerified: profile.email_verified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst github = (options) => {\n  const tokenEndpoint = \"https://github.com/login/oauth/access_token\";\n  return {\n    id: \"github\",\n    name: \"GitHub\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"read:user\", \"user:email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"github\",\n        options,\n        authorizationEndpoint: \"https://github.com/login/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://github.com/login/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.github.com/user\",\n        {\n          headers: {\n            \"User-Agent\": \"better-auth\",\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const { data: emails } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\"https://api.github.com/user/emails\", {\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`,\n          \"User-Agent\": \"better-auth\"\n        }\n      });\n      if (!profile.email && emails) {\n        profile.email = (emails.find((e) => e.primary) ?? emails[0])?.email;\n      }\n      const emailVerified = emails?.find((e) => e.email === profile.email)?.verified ?? false;\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id.toString(),\n          name: profile.name || profile.login,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst google = (options) => {\n  return {\n    id: \"google\",\n    name: \"Google\",\n    async createAuthorizationURL({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI,\n      loginHint,\n      display\n    }) {\n      if (!options.clientId || !options.clientSecret) {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(\n          \"Client Id and Client Secret is required for Google. Make sure to provide them in the options.\"\n        );\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_19__.B(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      if (!codeVerifier) {\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_19__.B(\"codeVerifier is required for Google\");\n      }\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"profile\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      if (options.prompt === \"select_account+consent\")\n        options.prompt = \"select_account consent\";\n      const url = await createAuthorizationURL({\n        id: \"google\",\n        options,\n        authorizationEndpoint: \"https://accounts.google.com/o/oauth2/auth\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI,\n        prompt: options.prompt,\n        accessType: options.accessType,\n        display: display || options.display,\n        loginHint,\n        hd: options.hd,\n        additionalParams: {\n          include_granted_scopes: \"true\"\n        }\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://oauth2.googleapis.com/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.googleapis.com/oauth2/v4/token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const googlePublicKeyUrl = `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${token}`;\n      const { data: tokenInfo } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(googlePublicKeyUrl);\n      if (!tokenInfo) {\n        return false;\n      }\n      const isValid = tokenInfo.aud === options.clientId && (tokenInfo.iss === \"https://accounts.google.com\" || tokenInfo.iss === \"accounts.google.com\");\n      return isValid;\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: user.email_verified,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    options\n  };\n};\n\nconst kick = (options) => {\n  return {\n    id: \"kick\",\n    name: \"Kick\",\n    createAuthorizationURL({ state, scopes, redirectURI, codeVerifier }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"kick\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.kick.com/oauth/authorize\",\n        scopes: _scopes,\n        codeVerifier,\n        state\n      });\n    },\n    async validateAuthorizationCode({ code, redirectURI, codeVerifier }) {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.kick.com/oauth/token\",\n        codeVerifier\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\"https://api.kick.com/public/v1/users\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      if (error) {\n        return null;\n      }\n      const profile = data.data[0];\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user_id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.profile_picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst huggingface = (options) => {\n  return {\n    id: \"huggingface\",\n    name: \"Hugging Face\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"huggingface\",\n        options,\n        authorizationEndpoint: \"https://huggingface.co/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://huggingface.co/oauth/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://huggingface.co/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://huggingface.co/oauth/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name || profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: profile.email_verified ?? false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst microsoft = (options) => {\n  const tenant = options.tenantId || \"common\";\n  const authorizationEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/authorize`;\n  const tokenEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/token`;\n  return {\n    id: \"microsoft\",\n    name: \"Microsoft EntraID\",\n    createAuthorizationURL(data) {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      data.scopes && scopes.push(...data.scopes);\n      return createAuthorizationURL({\n        id: \"microsoft\",\n        options,\n        authorizationEndpoint,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        scopes,\n        redirectURI: data.redirectURI,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode({ code, codeVerifier, redirectURI }) {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n      const profilePhotoSize = options.profilePhotoSize || 48;\n      await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        `https://graph.microsoft.com/v1.0/me/photos/${profilePhotoSize}x${profilePhotoSize}/$value`,\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          },\n          async onResponse(context) {\n            if (options.disableProfilePhoto || !context.response.ok) {\n              return;\n            }\n            try {\n              const response = context.response.clone();\n              const pictureBuffer = await response.arrayBuffer();\n              const pictureBase64 = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64.encode(pictureBuffer);\n              user.picture = `data:image/jpeg;base64, ${pictureBase64}`;\n            } catch (e) {\n              _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(\n                e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n                e\n              );\n            }\n          }\n        }\n      );\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientSecret: options.clientSecret\n        },\n        extraParams: {\n          scope: scopes.join(\" \")\n          // Include the scopes in request to microsoft\n        },\n        tokenEndpoint\n      });\n    },\n    options\n  };\n};\n\nconst slack = (options) => {\n  return {\n    id: \"slack\",\n    name: \"Slack\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      scopes && _scopes.push(...scopes);\n      options.scope && _scopes.push(...options.scope);\n      const url = new URL(\"https://slack.com/openid/connect/authorize\");\n      url.searchParams.set(\"scope\", _scopes.join(\" \"));\n      url.searchParams.set(\"response_type\", \"code\");\n      url.searchParams.set(\"client_id\", options.clientId);\n      url.searchParams.set(\"redirect_uri\", options.redirectURI || redirectURI);\n      url.searchParams.set(\"state\", state);\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://slack.com/api/openid.connect.token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://slack.com/api/openid.connect.token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://slack.com/api/openid.connect.userInfo\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile[\"https://slack.com/user_id\"],\n          name: profile.name || \"\",\n          email: profile.email,\n          emailVerified: profile.email_verified,\n          image: profile.picture || profile[\"https://slack.com/user_image_512\"],\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst notion = (options) => {\n  const tokenEndpoint = \"https://api.notion.com/v1/oauth/token\";\n  return {\n    id: \"notion\",\n    name: \"Notion\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"notion\",\n        options,\n        authorizationEndpoint: \"https://api.notion.com/v1/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        additionalParams: {\n          owner: \"user\"\n        }\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint,\n        authentication: \"basic\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\"https://api.notion.com/v1/users/me\", {\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`,\n          \"Notion-Version\": \"2022-06-28\"\n        }\n      });\n      if (error || !profile) {\n        return null;\n      }\n      const userProfile = profile.bot?.owner?.user;\n      if (!userProfile) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(userProfile);\n      return {\n        user: {\n          id: userProfile.id,\n          name: userProfile.name || \"Notion User\",\n          email: userProfile.person?.email || null,\n          image: userProfile.avatar_url,\n          emailVerified: !!userProfile.person?.email,\n          ...userMap\n        },\n        data: userProfile\n      };\n    },\n    options\n  };\n};\n\nconst spotify = (options) => {\n  return {\n    id: \"spotify\",\n    name: \"Spotify\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user-read-email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"spotify\",\n        options,\n        authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.spotify.com/v1/me\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          email: profile.email,\n          image: profile.images[0]?.url,\n          emailVerified: false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitch = (options) => {\n  return {\n    id: \"twitch\",\n    name: \"Twitch\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read:email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"twitch\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.twitch.tv/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        claims: options.claims || [\n          \"email\",\n          \"email_verified\",\n          \"preferred_username\",\n          \"picture\"\n        ]\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const idToken = token.idToken;\n      if (!idToken) {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(\"No idToken found in token\");\n        return null;\n      }\n      const profile = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(idToken);\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: profile.email_verified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitter = (options) => {\n  return {\n    id: \"twitter\",\n    name: \"Twitter\",\n    createAuthorizationURL(data) {\n      const _scopes = options.disableDefaultScope ? [] : [\"users.read\", \"tweet.read\", \"offline.access\", \"users.email\"];\n      options.scope && _scopes.push(...options.scope);\n      data.scopes && _scopes.push(...data.scopes);\n      return createAuthorizationURL({\n        id: \"twitter\",\n        options,\n        authorizationEndpoint: \"https://x.com/i/oauth2/authorize\",\n        scopes: _scopes,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        redirectURI: data.redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        authentication: \"basic\",\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error: profileError } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.x.com/2/users/me?user.fields=profile_image_url\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (profileError) {\n        return null;\n      }\n      const { data: emailData, error: emailError } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\"https://api.x.com/2/users/me?user.fields=confirmed_email\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      let emailVerified = false;\n      if (!emailError && emailData?.data?.confirmed_email) {\n        profile.data.email = emailData.data.confirmed_email;\n        emailVerified = true;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.data.id,\n          name: profile.data.name,\n          email: profile.data.email || profile.data.username || null,\n          image: profile.data.profile_image_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst dropbox = (options) => {\n  const tokenEndpoint = \"https://api.dropboxapi.com/oauth2/token\";\n  return {\n    id: \"dropbox\",\n    name: \"Dropbox\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"account_info.read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const additionalParams = {};\n      if (options.accessType) {\n        additionalParams.token_access_type = options.accessType;\n      }\n      return await createAuthorizationURL({\n        id: \"dropbox\",\n        options,\n        authorizationEndpoint: \"https://www.dropbox.com/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier,\n        additionalParams\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return await validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.dropbox.com/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.dropboxapi.com/2/users/get_current_account\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.account_id,\n          name: profile.name?.display_name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.profile_photo_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst linear = (options) => {\n  const tokenEndpoint = \"https://api.linear.app/oauth/token\";\n  return {\n    id: \"linear\",\n    name: \"Linear\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"linear\",\n        options,\n        authorizationEndpoint: \"https://linear.app/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.linear.app/graphql\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token.accessToken}`\n          },\n          body: JSON.stringify({\n            query: `\n\t\t\t\t\t\t\tquery {\n\t\t\t\t\t\t\t\tviewer {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\temail\n\t\t\t\t\t\t\t\t\tavatarUrl\n\t\t\t\t\t\t\t\t\tactive\n\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t`\n          })\n        }\n      );\n      if (error || !profile?.data?.viewer) {\n        return null;\n      }\n      const userData = profile.data.viewer;\n      const userMap = await options.mapProfileToUser?.(userData);\n      return {\n        user: {\n          id: profile.data.viewer.id,\n          name: profile.data.viewer.name,\n          email: profile.data.viewer.email,\n          image: profile.data.viewer.avatarUrl,\n          emailVerified: true,\n          ...userMap\n        },\n        data: userData\n      };\n    },\n    options\n  };\n};\n\nconst linkedin = (options) => {\n  const authorizationEndpoint = \"https://www.linkedin.com/oauth/v2/authorization\";\n  const tokenEndpoint = \"https://www.linkedin.com/oauth/v2/accessToken\";\n  return {\n    id: \"linkedin\",\n    name: \"Linkedin\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      redirectURI,\n      loginHint\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"profile\", \"email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: \"linkedin\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        loginHint,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return await validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.linkedin.com/v2/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.picture,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst cleanDoubleSlashes = (input = \"\") => {\n  return input.split(\"://\").map((str) => str.replace(/\\/{2,}/g, \"/\")).join(\"://\");\n};\nconst issuerToEndpoints = (issuer) => {\n  let baseUrl = issuer || \"https://gitlab.com\";\n  return {\n    authorizationEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/authorize`),\n    tokenEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/token`),\n    userinfoEndpoint: cleanDoubleSlashes(`${baseUrl}/api/v4/user`)\n  };\n};\nconst gitlab = (options) => {\n  const { authorizationEndpoint, tokenEndpoint, userinfoEndpoint } = issuerToEndpoints(options.issuer);\n  const issuerId = \"gitlab\";\n  const issuerName = \"Gitlab\";\n  return {\n    id: issuerId,\n    name: issuerName,\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      loginHint,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"read_user\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: issuerId,\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        codeVerifier,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://gitlab.com/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        userinfoEndpoint,\n        { headers: { authorization: `Bearer ${token.accessToken}` } }\n      );\n      if (error || profile.state !== \"active\" || profile.locked) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id.toString(),\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst tiktok = (options) => {\n  return {\n    id: \"tiktok\",\n    name: \"TikTok\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user.info.profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://www.tiktok.com/v2/auth/authorize?scope=${_scopes.join(\n          \",\"\n        )}&response_type=code&client_key=${options.clientKey}&client_secret=${options.clientSecret}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const fields = [\n        \"open_id\",\n        \"avatar_large_url\",\n        \"display_name\",\n        \"username\"\n      ];\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        `https://open.tiktokapis.com/v2/user/info/?fields=${fields.join(\",\")}`,\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      return {\n        user: {\n          email: profile.data.user.email || profile.data.user.username,\n          id: profile.data.user.open_id,\n          name: profile.data.user.display_name || profile.data.user.username,\n          image: profile.data.user.avatar_large_url,\n          /** @note Tiktok does not provide emailVerified or even email*/\n          emailVerified: profile.data.user.email ? true : false\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst reddit = (options) => {\n  return {\n    id: \"reddit\",\n    name: \"Reddit\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identity\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"reddit\",\n        options,\n        authorizationEndpoint: \"https://www.reddit.com/api/v1/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        duration: options.duration\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      const body = new URLSearchParams({\n        grant_type: \"authorization_code\",\n        code,\n        redirect_uri: options.redirectURI || redirectURI\n      });\n      const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n        accept: \"text/plain\",\n        \"user-agent\": \"better-auth\",\n        Authorization: `Basic ${_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64.encode(\n          `${options.clientId}:${options.clientSecret}`\n        )}`\n      };\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://www.reddit.com/api/v1/access_token\",\n        {\n          method: \"POST\",\n          headers,\n          body: body.toString()\n        }\n      );\n      if (error) {\n        throw error;\n      }\n      return getOAuth2Tokens(data);\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.reddit.com/api/v1/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://oauth.reddit.com/api/v1/me\",\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`,\n            \"User-Agent\": \"better-auth\"\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.oauth_client_id,\n          emailVerified: profile.has_verified_email,\n          image: profile.icon_img?.split(\"?\")[0],\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst roblox = (options) => {\n  return {\n    id: \"roblox\",\n    name: \"Roblox\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://apis.roblox.com/oauth/v1/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"select_account+consent\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\",\n        authentication: \"post\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://apis.roblox.com/oauth/v1/userinfo\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.nickname || profile.preferred_username || \"\",\n          image: profile.picture,\n          email: profile.preferred_username || null,\n          // Roblox does not provide email\n          emailVerified: true,\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    },\n    options\n  };\n};\n\nvar LANG = /* @__PURE__ */ ((LANG2) => {\n  LANG2[LANG2[\"RUS\"] = 0] = \"RUS\";\n  LANG2[LANG2[\"UKR\"] = 1] = \"UKR\";\n  LANG2[LANG2[\"ENG\"] = 3] = \"ENG\";\n  LANG2[LANG2[\"SPA\"] = 4] = \"SPA\";\n  LANG2[LANG2[\"GERMAN\"] = 6] = \"GERMAN\";\n  LANG2[LANG2[\"POL\"] = 15] = \"POL\";\n  LANG2[LANG2[\"FRA\"] = 16] = \"FRA\";\n  LANG2[LANG2[\"TURKEY\"] = 82] = \"TURKEY\";\n  return LANG2;\n})(LANG || {});\nconst vk = (options) => {\n  return {\n    id: \"vk\",\n    name: \"VK\",\n    async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"phone\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const authorizationEndpoint = \"https://id.vk.com/authorize\";\n      return createAuthorizationURL({\n        id: \"vk\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier\n      });\n    },\n    validateAuthorizationCode: async ({\n      code,\n      codeVerifier,\n      redirectURI,\n      deviceId\n    }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        deviceId,\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    async getUserInfo(data) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(data);\n      }\n      if (!data.accessToken) {\n        return null;\n      }\n      const formBody = new URLSearchParams({\n        access_token: data.accessToken,\n        client_id: options.clientId\n      }).toString();\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://id.vk.com/oauth2/user_info\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: formBody\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (!profile.user.email) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user.user_id,\n          first_name: profile.user.first_name,\n          last_name: profile.user.last_name,\n          email: profile.user.email,\n          image: profile.user.avatar,\n          /** @note VK does not provide emailVerified*/\n          emailVerified: !!profile.user.email,\n          birthday: profile.user.birthday,\n          sex: profile.user.sex,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst zoom = (userOptions) => {\n  const options = {\n    pkce: true,\n    ...userOptions\n  };\n  return {\n    id: \"zoom\",\n    name: \"Zoom\",\n    createAuthorizationURL: async ({ state, redirectURI, codeVerifier }) => {\n      const params = new URLSearchParams({\n        response_type: \"code\",\n        redirect_uri: options.redirectURI ? options.redirectURI : redirectURI,\n        client_id: options.clientId,\n        state\n      });\n      if (options.pkce) {\n        const codeChallenge = await generateCodeChallenge(codeVerifier);\n        params.set(\"code_challenge_method\", \"S256\");\n        params.set(\"code_challenge\", codeChallenge);\n      }\n      const url = new URL(\"https://zoom.us/oauth/authorize\");\n      url.search = params.toString();\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        codeVerifier,\n        options,\n        tokenEndpoint: \"https://zoom.us/oauth/token\",\n        authentication: \"post\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.zoom.us/v2/users/me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          image: profile.pic_url,\n          email: profile.email,\n          emailVerified: Boolean(profile.verified),\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    }\n  };\n};\n\nconst socialProviders = {\n  apple,\n  discord,\n  facebook,\n  github,\n  microsoft,\n  google,\n  huggingface,\n  slack,\n  spotify,\n  twitch,\n  twitter,\n  dropbox,\n  kick,\n  linear,\n  linkedin,\n  gitlab,\n  tiktok,\n  reddit,\n  roblox,\n  vk,\n  zoom,\n  notion\n};\nconst socialProviderList = Object.keys(socialProviders);\nconst SocialProviderListEnum = zod_v4__WEBPACK_IMPORTED_MODULE_20__[\"enum\"](socialProviderList).or(zod_v4__WEBPACK_IMPORTED_MODULE_20__.string());\n\nconst signInSocial = createAuthEndpoint(\n  \"/sign-in/social\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * Callback URL to redirect to after the user\n       * has signed in.\n       */\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Callback URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * callback url to redirect if the user is newly registered.\n       *\n       * useful if you have different routes for existing users and new users\n       */\n      newUserCallbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n      /**\n       * Callback url to redirect to if an error happens\n       *\n       * If it's initiated from the client sdk this defaults to\n       * the current url.\n       */\n      errorCallbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Callback URL to redirect to if an error happens\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use`\n       */\n      provider: SocialProviderListEnum,\n      /**\n       * Disable automatic redirection to the provider\n       *\n       * This is useful if you want to handle the redirection\n       * yourself like in a popup or a different tab.\n       */\n      disableRedirect: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().meta({\n        description: \"Disable automatic redirection to the provider. Useful for handling the redirection yourself\"\n      }).optional(),\n      /**\n       * ID token from the provider\n       *\n       * This is used to sign in the user\n       * if the user is already signed in with the\n       * provider in the frontend.\n       *\n       * Only applicable if the provider supports\n       * it. Currently only `apple` and `google` is\n       * supported out of the box.\n       */\n      idToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.optional(\n        zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n          /**\n           * ID token from the provider\n           */\n          token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n            description: \"ID token from the provider\"\n          }),\n          /**\n           * The nonce used to generate the token\n           */\n          nonce: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n            description: \"Nonce used to generate the token\"\n          }).optional(),\n          /**\n           * Access token from the provider\n           */\n          accessToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n            description: \"Access token from the provider\"\n          }).optional(),\n          /**\n           * Refresh token from the provider\n           */\n          refreshToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n            description: \"Refresh token from the provider\"\n          }).optional(),\n          /**\n           * Expiry date of the token\n           */\n          expiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_20__.number().meta({\n            description: \"Expiry date of the token\"\n          }).optional()\n        })\n      ),\n      scopes: zod_v4__WEBPACK_IMPORTED_MODULE_20__.array(zod_v4__WEBPACK_IMPORTED_MODULE_20__.string()).meta({\n        description: \"Array of scopes to request from the provider. This will override the default scopes passed.\"\n      }).optional(),\n      /**\n       * Explicitly request sign-up\n       *\n       * Should be used to allow sign up when\n       * disableImplicitSignUp for this provider is\n       * true\n       */\n      requestSignUp: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().meta({\n        description: \"Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider\"\n      }).optional(),\n      /**\n       * The login hint to use for the authorization code request\n       */\n      loginHint: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The login hint to use for the authorization code request\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with a social provider\",\n        operationId: \"socialSignIn\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\",\n                      url: {\n                        type: \"null\",\n                        nullable: true\n                      },\n                      user: {\n                        type: \"object\",\n                        properties: {\n                          id: { type: \"string\" },\n                          email: { type: \"string\" },\n                          name: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          image: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          emailVerified: {\n                            type: \"boolean\"\n                          },\n                          createdAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          },\n                          updatedAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          }\n                        },\n                        required: [\n                          \"id\",\n                          \"email\",\n                          \"emailVerified\",\n                          \"createdAt\",\n                          \"updatedAt\"\n                        ]\n                      }\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const userInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!userInfo || !userInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!userInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const data = await handleOAuthUserInfo(c, {\n        userInfo: {\n          ...userInfo.user,\n          email: userInfo.user.email,\n          id: userInfo.user.id,\n          name: userInfo.user.name || \"\",\n          image: userInfo.user.image,\n          emailVerified: userInfo.user.emailVerified || false\n        },\n        account: {\n          providerId: provider.id,\n          accountId: userInfo.user.id,\n          accessToken: c.body.idToken.accessToken\n        },\n        callbackURL: c.body.callbackURL,\n        disableSignUp: provider.disableImplicitSignUp && !c.body.requestSignUp || provider.disableSignUp\n      });\n      if (data.error) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: data.error\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(c, data.data);\n      return c.json({\n        redirect: false,\n        token: data.data.session.token,\n        url: void 0,\n        user: {\n          id: data.data.user.id,\n          email: data.data.user.email,\n          name: data.data.user.name,\n          image: data.data.user.image,\n          emailVerified: data.data.user.emailVerified,\n          createdAt: data.data.user.createdAt,\n          updatedAt: data.data.user.updatedAt\n        }\n      });\n    }\n    const { codeVerifier, state } = await generateState(c);\n    const url = await provider.createAuthorizationURL({\n      state,\n      codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes,\n      loginHint: c.body.loginHint\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: !c.body.disableRedirect\n    });\n  }\n);\nconst signInEmail = createAuthEndpoint(\n  \"/sign-in/email\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * Email of the user\n       */\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Email of the user\"\n      }),\n      /**\n       * Password of the user\n       */\n      password: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Password of the user\"\n      }),\n      /**\n       * Callback URL to use as a redirect for email\n       * verification and for possible redirects\n       */\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Callback URL to use as a redirect for email verification\"\n      }).optional(),\n      /**\n       * If this is false, the session will not be remembered\n       * @default true\n       */\n      rememberMe: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().meta({\n        description: \"If this is false, the session will not be remembered. Default is `true`.\"\n      }).default(true).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with email and password\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\"\n                    },\n                    url: {\n                      type: \"null\",\n                      nullable: true\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: { type: \"string\" },\n                        email: { type: \"string\" },\n                        name: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        image: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options?.emailAndPassword?.enabled) {\n      ctx.context.logger.error(\n        \"Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Email and password is not enabled\"\n      });\n    }\n    const { email, password } = ctx.body;\n    const isValidEmail = zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL\n      });\n    }\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      await ctx.context.password.hash(password);\n      ctx.context.logger.error(\"User not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const credentialAccount = user.accounts.find(\n      (a) => a.providerId === \"credential\"\n    );\n    if (!credentialAccount) {\n      ctx.context.logger.error(\"Credential account not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const currentPassword = credentialAccount?.password;\n    if (!currentPassword) {\n      ctx.context.logger.error(\"Password not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const validPassword = await ctx.context.password.verify({\n      hash: currentPassword,\n      password\n    });\n    if (!validPassword) {\n      ctx.context.logger.error(\"Invalid password\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    if (ctx.context.options?.emailAndPassword?.requireEmailVerification && !user.user.emailVerified) {\n      if (!ctx.context.options?.emailVerification?.sendVerificationEmail) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n          message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n        });\n      }\n      if (ctx.context.options?.emailVerification?.sendOnSignIn) {\n        const token = await createEmailVerificationToken(\n          ctx.context.secret,\n          user.user.email,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: user.user,\n            url,\n            token\n          },\n          ctx.request\n        );\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      user.user.id,\n      ctx,\n      ctx.body.rememberMe === false\n    );\n    if (!session) {\n      ctx.context.logger.error(\"Failed to create session\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(\n      ctx,\n      {\n        session,\n        user: user.user\n      },\n      ctx.body.rememberMe === false\n    );\n    return ctx.json({\n      redirect: !!ctx.body.callbackURL,\n      token: session.token,\n      url: ctx.body.callbackURL,\n      user: {\n        id: user.user.id,\n        email: user.user.email,\n        name: user.user.name,\n        image: user.user.image,\n        emailVerified: user.user.emailVerified,\n        createdAt: user.user.createdAt,\n        updatedAt: user.user.updatedAt\n      }\n    });\n  }\n);\n\nconst schema = zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  device_id: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  error_description: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  state: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n});\nconst callbackOAuth = createAuthEndpoint(\n  \"/callback/:id\",\n  {\n    method: [\"GET\", \"POST\"],\n    body: schema.optional(),\n    query: schema.optional(),\n    metadata: HIDE_METADATA\n  },\n  async (c) => {\n    let queryOrBody;\n    const defaultErrorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    try {\n      if (c.method === \"GET\") {\n        queryOrBody = schema.parse(c.query);\n      } else if (c.method === \"POST\") {\n        queryOrBody = schema.parse(c.body);\n      } else {\n        throw new Error(\"Unsupported method\");\n      }\n    } catch (e) {\n      c.context.logger.error(\"INVALID_CALLBACK_REQUEST\", e);\n      throw c.redirect(`${defaultErrorURL}?error=invalid_callback_request`);\n    }\n    const { code, error, state, error_description, device_id } = queryOrBody;\n    if (error) {\n      throw c.redirect(\n        `${defaultErrorURL}?error=${error}&error_description=${error_description}`\n      );\n    }\n    if (!state) {\n      c.context.logger.error(\"State not found\", error);\n      throw c.redirect(`${defaultErrorURL}?error=state_not_found`);\n    }\n    const {\n      codeVerifier,\n      callbackURL,\n      link,\n      errorURL,\n      newUserURL,\n      requestSignUp\n    } = await parseState(c);\n    function redirectOnError(error2) {\n      let url = errorURL || defaultErrorURL;\n      if (url.includes(\"?\")) {\n        url = `${url}&error=${error2}`;\n      } else {\n        url = `${url}?error=${error2}`;\n      }\n      throw c.redirect(url);\n    }\n    if (!code) {\n      c.context.logger.error(\"Code not found\");\n      throw redirectOnError(\"no_code\");\n    }\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.params.id\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Oauth provider with id\",\n        c.params.id,\n        \"not found\"\n      );\n      throw redirectOnError(\"oauth_provider_not_found\");\n    }\n    let tokens;\n    try {\n      tokens = await provider.validateAuthorizationCode({\n        code,\n        codeVerifier,\n        deviceId: device_id,\n        redirectURI: `${c.context.baseURL}/callback/${provider.id}`\n      });\n    } catch (e) {\n      c.context.logger.error(\"\", e);\n      throw redirectOnError(\"invalid_code\");\n    }\n    const userInfo = await provider.getUserInfo({\n      ...tokens,\n      user: c.body?.user ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_11__.s)(c.body.user) : void 0\n    }).then((res) => res?.user);\n    if (!userInfo) {\n      c.context.logger.error(\"Unable to get user info\");\n      return redirectOnError(\"unable_to_get_user_info\");\n    }\n    if (!callbackURL) {\n      c.context.logger.error(\"No callback URL found\");\n      throw redirectOnError(\"no_callback_url\");\n    }\n    if (link) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        provider.id\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        c.context.logger.error(\"Unable to link account - untrusted provider\");\n        return redirectOnError(\"unable_to_link_account\");\n      }\n      const existingAccount = await c.context.internalAdapter.findAccount(\n        userInfo.id\n      );\n      if (existingAccount) {\n        if (existingAccount.userId.toString() !== link.userId.toString()) {\n          return redirectOnError(\"account_already_linked_to_different_user\");\n        }\n        const updateData = Object.fromEntries(\n          Object.entries({\n            accessToken: await setTokenUtil(tokens.accessToken, c.context),\n            refreshToken: await setTokenUtil(tokens.refreshToken, c.context),\n            idToken: tokens.idToken,\n            accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n            refreshTokenExpiresAt: tokens.refreshTokenExpiresAt,\n            scope: tokens.scopes?.join(\",\")\n          }).filter(([_, value]) => value !== void 0)\n        );\n        await c.context.internalAdapter.updateAccount(\n          existingAccount.id,\n          updateData\n        );\n      } else {\n        const newAccount = await c.context.internalAdapter.createAccount(\n          {\n            userId: link.userId,\n            providerId: provider.id,\n            accountId: userInfo.id,\n            ...tokens,\n            accessToken: await setTokenUtil(tokens.accessToken, c.context),\n            refreshToken: await setTokenUtil(tokens.refreshToken, c.context),\n            scope: tokens.scopes?.join(\",\")\n          },\n          c\n        );\n        if (!newAccount) {\n          return redirectOnError(\"unable_to_link_account\");\n        }\n      }\n      let toRedirectTo2;\n      try {\n        const url = callbackURL;\n        toRedirectTo2 = url.toString();\n      } catch {\n        toRedirectTo2 = callbackURL;\n      }\n      throw c.redirect(toRedirectTo2);\n    }\n    if (!userInfo.email) {\n      c.context.logger.error(\n        \"Provider did not return email. This could be due to misconfiguration in the provider settings.\"\n      );\n      return redirectOnError(\"email_not_found\");\n    }\n    const result = await handleOAuthUserInfo(c, {\n      userInfo: {\n        ...userInfo,\n        email: userInfo.email,\n        name: userInfo.name || userInfo.email\n      },\n      account: {\n        providerId: provider.id,\n        accountId: userInfo.id,\n        ...tokens,\n        scope: tokens.scopes?.join(\",\")\n      },\n      callbackURL,\n      disableSignUp: provider.disableImplicitSignUp && !requestSignUp || provider.options?.disableSignUp,\n      overrideUserInfo: provider.options?.overrideUserInfoOnSignIn\n    });\n    if (result.error) {\n      c.context.logger.error(result.error.split(\" \").join(\"_\"));\n      return redirectOnError(result.error.split(\" \").join(\"_\"));\n    }\n    const { session, user } = result.data;\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(c, {\n      session,\n      user\n    });\n    let toRedirectTo;\n    try {\n      const url = result.isRegister ? newUserURL || callbackURL : callbackURL;\n      toRedirectTo = url.toString();\n    } catch {\n      toRedirectTo = result.isRegister ? newUserURL || callbackURL : callbackURL;\n    }\n    throw c.redirect(toRedirectTo);\n  }\n);\n\nconst signOut = createAuthEndpoint(\n  \"/sign-out\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Sign out the current user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const sessionCookieToken = await ctx.getSignedCookie(\n      ctx.context.authCookies.sessionToken.name,\n      ctx.context.secret\n    );\n    if (!sessionCookieToken) {\n      (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n    await ctx.context.internalAdapter.deleteSession(sessionCookieToken);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n    return ctx.json({\n      success: true\n    });\n  }\n);\n\nfunction redirectError(ctx, callbackURL, query) {\n  const url = callbackURL ? new URL(callbackURL, ctx.baseURL) : new URL(`${ctx.baseURL}/error`);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nfunction redirectCallback(ctx, callbackURL, query) {\n  const url = new URL(callbackURL, ctx.baseURL);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nconst requestPasswordReset = createAuthEndpoint(\n  \"/request-password-reset\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.email().meta({\n        description: \"The email address of the user to send a password reset email to\"\n      }),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.g)(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst forgetPassword = createAuthEndpoint(\n  \"/forget-password\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().email().meta({\n        description: \"The email address of the user to send a password reset email to\"\n      }),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.g)(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst requestPasswordResetCallback = createAuthEndpoint(\n  \"/reset-password/:token\",\n  {\n    method: \"GET\",\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect the user to reset their password\"\n      })\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Redirects the user to the callback URL with the token\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { token } = ctx.params;\n    const { callbackURL } = ctx.query;\n    if (!token || !callbackURL) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    const verification = await ctx.context.internalAdapter.findVerificationValue(\n      `reset-password:${token}`\n    );\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    throw ctx.redirect(redirectCallback(ctx.context, callbackURL, { token }));\n  }\n);\nconst forgetPasswordCallback = requestPasswordResetCallback;\nconst resetPassword = createAuthEndpoint(\n  \"/reset-password\",\n  {\n    method: \"POST\",\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n    }).optional(),\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      newPassword: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The new password to set\"\n      }),\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The token to reset the password\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Reset the password for a user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token || ctx.query?.token;\n    if (!token) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const { newPassword } = ctx.body;\n    const minLength = ctx.context.password?.config.minPasswordLength;\n    const maxLength = ctx.context.password?.config.maxPasswordLength;\n    if (newPassword.length < minLength) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    if (newPassword.length > maxLength) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const id = `reset-password:${token}`;\n    const verification = await ctx.context.internalAdapter.findVerificationValue(id);\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const userId = verification.value;\n    const hashedPassword = await ctx.context.password.hash(newPassword);\n    const accounts = await ctx.context.internalAdapter.findAccounts(userId);\n    const account = accounts.find((ac) => ac.providerId === \"credential\");\n    if (!account) {\n      await ctx.context.internalAdapter.createAccount(\n        {\n          userId,\n          providerId: \"credential\",\n          password: hashedPassword,\n          accountId: userId\n        },\n        ctx\n      );\n    } else {\n      await ctx.context.internalAdapter.updatePassword(\n        userId,\n        hashedPassword,\n        ctx\n      );\n    }\n    await ctx.context.internalAdapter.deleteVerificationValue(verification.id);\n    if (ctx.context.options.emailAndPassword?.onPasswordReset) {\n      const user = await ctx.context.internalAdapter.findUserById(userId);\n      if (user) {\n        await ctx.context.options.emailAndPassword.onPasswordReset(\n          {\n            user\n          },\n          ctx.request\n        );\n      }\n    }\n    if (ctx.context.options.emailAndPassword?.revokeSessionsOnPasswordReset) {\n      await ctx.context.internalAdapter.deleteSessions(userId);\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nconst updateUser = () => createAuthEndpoint(\n  \"/update-user\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.record(\n      zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Field name must be a string\"\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_20__.any()\n    ),\n    use: [sessionMiddleware],\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Update the current user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  image: {\n                    type: \"string\",\n                    description: \"The image of the user\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the update was successful\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const body = ctx.body;\n    if (body.email) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.EMAIL_CAN_NOT_BE_UPDATED\n      });\n    }\n    const { name, image, ...rest } = body;\n    const session = ctx.context.session;\n    if (image === void 0 && name === void 0 && Object.keys(rest).length === 0) {\n      return ctx.json({\n        status: true\n      });\n    }\n    const additionalFields = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_16__.f)(\n      ctx.context.options,\n      rest,\n      \"update\"\n    );\n    const user = await ctx.context.internalAdapter.updateUser(\n      session.user.id,\n      {\n        name,\n        image,\n        ...additionalFields\n      },\n      ctx\n    );\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n      session: session.session,\n      user\n    });\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst changePassword = createAuthEndpoint(\n  \"/change-password\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * The new password to set\n       */\n      newPassword: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The new password to set\"\n      }),\n      /**\n       * The current password of the user\n       */\n      currentPassword: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The current password is required\"\n      }),\n      /**\n       * revoke all sessions that are not the\n       * current one logged in by the user\n       */\n      revokeOtherSessions: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().meta({\n        description: \"Must be a boolean value\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Change the password of the user\",\n        responses: {\n          \"200\": {\n            description: \"Password successfully changed\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      // Only present if revokeOtherSessions is true\n                      description: \"New session token if other sessions were revoked\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { newPassword, currentPassword, revokeOtherSessions } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    if (!account || !account.password) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n      });\n    }\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    const verify = await ctx.context.password.verify({\n      hash: account.password,\n      password: currentPassword\n    });\n    if (!verify) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_PASSWORD\n      });\n    }\n    await ctx.context.internalAdapter.updateAccount(account.id, {\n      password: passwordHash\n    });\n    let token = null;\n    if (revokeOtherSessions) {\n      await ctx.context.internalAdapter.deleteSessions(session.user.id);\n      const newSession = await ctx.context.internalAdapter.createSession(\n        session.user.id,\n        ctx\n      );\n      if (!newSession) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n        session: newSession,\n        user: session.user\n      });\n      token = newSession.token;\n    }\n    return ctx.json({\n      token,\n      user: {\n        id: session.user.id,\n        email: session.user.email,\n        name: session.user.name,\n        image: session.user.image,\n        emailVerified: session.user.emailVerified,\n        createdAt: session.user.createdAt,\n        updatedAt: session.user.updatedAt\n      }\n    });\n  }\n);\nconst setPassword = createAuthEndpoint(\n  \"/set-password\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * The new password to set\n       */\n      newPassword: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The new password to set is required\"\n      })\n    }),\n    metadata: {\n      SERVER_ONLY: true\n    },\n    use: [sessionMiddleware]\n  },\n  async (ctx) => {\n    const { newPassword } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    if (!account) {\n      await ctx.context.internalAdapter.linkAccount(\n        {\n          userId: session.user.id,\n          providerId: \"credential\",\n          accountId: session.user.id,\n          password: passwordHash\n        },\n        ctx\n      );\n      return ctx.json({\n        status: true\n      });\n    }\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"user already has a password\"\n    });\n  }\n);\nconst deleteUser = createAuthEndpoint(\n  \"/delete-user\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * The callback URL to redirect to after the user is deleted\n       * this is only used on delete user callback\n       */\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The callback URL to redirect to after the user is deleted\"\n      }).optional(),\n      /**\n       * The password of the user. If the password isn't provided, session freshness\n       * will be checked.\n       */\n      password: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The password of the user is required to delete the user\"\n      }).optional(),\n      /**\n       * The token to delete the user. If the token is provided, the user will be deleted\n       */\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The token to delete the user is required\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Delete the user\",\n        responses: {\n          \"200\": {\n            description: \"User deletion processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the operation was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\", \"Verification email sent\"],\n                      description: \"Status message of the deletion process\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\",\n        {\n          session: ctx.context.session\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\");\n    }\n    const session = ctx.context.session;\n    if (ctx.body.password) {\n      const accounts = await ctx.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const account = accounts.find(\n        (account2) => account2.providerId === \"credential\" && account2.password\n      );\n      if (!account || !account.password) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n        });\n      }\n      const verify = await ctx.context.password.verify({\n        hash: account.password,\n        password: ctx.body.password\n      });\n      if (!verify) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.INVALID_PASSWORD\n        });\n      }\n    }\n    if (ctx.body.token) {\n      await deleteUserCallback({\n        ...ctx,\n        query: {\n          token: ctx.body.token\n        }\n      });\n      return ctx.json({\n        success: true,\n        message: \"User deleted\"\n      });\n    }\n    if (ctx.context.options.user.deleteUser?.sendDeleteAccountVerification) {\n      const token = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(32, \"0-9\", \"a-z\");\n      await ctx.context.internalAdapter.createVerificationValue(\n        {\n          value: session.user.id,\n          identifier: `delete-account-${token}`,\n          expiresAt: new Date(\n            Date.now() + (ctx.context.options.user.deleteUser?.deleteTokenExpiresIn || 60 * 60 * 24) * 1e3\n          )\n        },\n        ctx\n      );\n      const url = `${ctx.context.baseURL}/delete-user/callback?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n      await ctx.context.options.user.deleteUser.sendDeleteAccountVerification(\n        {\n          user: session.user,\n          url,\n          token\n        },\n        ctx.request\n      );\n      return ctx.json({\n        success: true,\n        message: \"Verification email sent\"\n      });\n    }\n    if (!ctx.body.password && ctx.context.sessionConfig.freshAge !== 0) {\n      const currentAge = session.session.createdAt.getTime();\n      const freshAge = ctx.context.sessionConfig.freshAge * 1e3;\n      const now = Date.now();\n      if (now - currentAge > freshAge * 1e3) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.SESSION_EXPIRED\n        });\n      }\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst deleteUserCallback = createAuthEndpoint(\n  \"/delete-user/callback\",\n  {\n    method: \"GET\",\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The token to verify the deletion request\"\n      }),\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect to after deletion\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Callback to complete user deletion with verification token\",\n        responses: {\n          \"200\": {\n            description: \"User successfully deleted\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the deletion was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\"],\n                      description: \"Confirmation message\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\");\n    }\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n      });\n    }\n    const token = await ctx.context.internalAdapter.findVerificationValue(\n      `delete-account-${ctx.query.token}`\n    );\n    if (!token || token.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    if (token.value !== session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    await ctx.context.internalAdapter.deleteVerificationValue(token.id);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL || \"/\");\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst changeEmail = createAuthEndpoint(\n  \"/change-email\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      newEmail: zod_v4__WEBPACK_IMPORTED_MODULE_20__.email().meta({\n        description: \"The new email address to set must be a valid email address\"\n      }),\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        responses: {\n          \"200\": {\n            description: \"Email change request processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the request was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"Email updated\", \"Verification email sent\"],\n                      description: \"Status message of the email change process\",\n                      nullable: true\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.changeEmail?.enabled) {\n      ctx.context.logger.error(\"Change email is disabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Change email is disabled\"\n      });\n    }\n    const newEmail = ctx.body.newEmail.toLowerCase();\n    if (newEmail === ctx.context.session.user.email) {\n      ctx.context.logger.error(\"Email is the same\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Email is the same\"\n      });\n    }\n    const existingUser = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n    if (existingUser) {\n      ctx.context.logger.error(\"Email already exists\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Couldn't update your email\"\n      });\n    }\n    if (ctx.context.session.user.emailVerified !== true) {\n      const existing = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n      if (existing) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n          message: BASE_ERROR_CODES.USER_ALREADY_EXISTS\n        });\n      }\n      await ctx.context.internalAdapter.updateUserByEmail(\n        ctx.context.session.user.email,\n        {\n          email: newEmail\n        },\n        ctx\n      );\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n        session: ctx.context.session.session,\n        user: {\n          ...ctx.context.session.user,\n          email: newEmail\n        }\n      });\n      if (ctx.context.options.emailVerification?.sendVerificationEmail) {\n        const token2 = await createEmailVerificationToken(\n          ctx.context.secret,\n          newEmail,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url2 = `${ctx.context.baseURL}/verify-email?token=${token2}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: {\n              ...ctx.context.session.user,\n              email: newEmail\n            },\n            url: url2,\n            token: token2\n          },\n          ctx.request\n        );\n      }\n      return ctx.json({\n        status: true\n      });\n    }\n    if (!ctx.context.options.user.changeEmail.sendChangeEmailVerification) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const token = await createEmailVerificationToken(\n      ctx.context.secret,\n      ctx.context.session.user.email,\n      newEmail,\n      ctx.context.options.emailVerification?.expiresIn\n    );\n    const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n    await ctx.context.options.user.changeEmail.sendChangeEmailVerification(\n      {\n        user: ctx.context.session.user,\n        newEmail,\n        url,\n        token\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nfunction sanitize(input) {\n  return input.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n}\nconst html = (errorCode = \"Unknown\") => `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Authentication Error</title>\n    <style>\n        :root {\n            --bg-color: #f8f9fa;\n            --text-color: #212529;\n            --accent-color: #000000;\n            --error-color: #dc3545;\n            --border-color: #e9ecef;\n        }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            line-height: 1.5;\n        }\n        .error-container {\n            background-color: #ffffff;\n            border-radius: 12px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n            padding: 2.5rem;\n            text-align: center;\n            max-width: 90%;\n            width: 400px;\n        }\n        h1 {\n            color: var(--error-color);\n            font-size: 1.75rem;\n            margin-bottom: 1rem;\n            font-weight: 600;\n        }\n        p {\n            margin-bottom: 1.5rem;\n            color: #495057;\n        }\n        .btn {\n            background-color: var(--accent-color);\n            color: #ffffff;\n            text-decoration: none;\n            padding: 0.75rem 1.5rem;\n            border-radius: 6px;\n            transition: all 0.3s ease;\n            display: inline-block;\n            font-weight: 500;\n            border: 2px solid var(--accent-color);\n        }\n        .btn:hover {\n            background-color: #131721;\n        }\n        .error-code {\n            font-size: 0.875rem;\n            color: #6c757d;\n            margin-top: 1.5rem;\n            padding-top: 1.5rem;\n            border-top: 1px solid var(--border-color);\n        }\n        .icon {\n            font-size: 3rem;\n            margin-bottom: 1rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"error-container\">\n        <div class=\"icon\">\\u26A0\\uFE0F</div>\n        <h1>Better Auth Error</h1>\n        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>\n        <a href=\"/\" id=\"returnLink\" class=\"btn\">Return to Application</a>\n        <div class=\"error-code\">Error Code: <span id=\"errorCode\">${sanitize(\n  errorCode\n)}</span></div>\n    </div>\n</body>\n</html>`;\nconst error = createAuthEndpoint(\n  \"/error\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Displays an error page\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"text/html\": {\n                schema: {\n                  type: \"string\",\n                  description: \"The HTML content of the error page\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const query = new URL(c.request?.url || \"\").searchParams.get(\"error\") || \"Unknown\";\n    return new Response(html(query), {\n      headers: {\n        \"Content-Type\": \"text/html\"\n      }\n    });\n  }\n);\n\nconst ok = createAuthEndpoint(\n  \"/ok\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Check if the API is working\",\n        responses: {\n          \"200\": {\n            description: \"API is working\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    ok: {\n                      type: \"boolean\",\n                      description: \"Indicates if the API is working\"\n                    }\n                  },\n                  required: [\"ok\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    return ctx.json({\n      ok: true\n    });\n  }\n);\n\nconst listUserAccounts = createAuthEndpoint(\n  \"/list-accounts\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"List all accounts linked to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\"\n                      },\n                      provider: {\n                        type: \"string\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      }\n                    },\n                    accountId: {\n                      type: \"string\"\n                    },\n                    scopes: {\n                      type: \"array\",\n                      items: {\n                        type: \"string\"\n                      }\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"provider\",\n                    \"createdAt\",\n                    \"updatedAt\",\n                    \"accountId\",\n                    \"scopes\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const accounts = await c.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    return c.json(\n      accounts.map((a) => ({\n        id: a.id,\n        provider: a.providerId,\n        createdAt: a.createdAt,\n        updatedAt: a.updatedAt,\n        accountId: a.accountId,\n        scopes: a.scope?.split(\",\") || []\n      }))\n    );\n  }\n);\nconst linkSocialAccount = createAuthEndpoint(\n  \"/link-social\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * Callback URL to redirect to after the user has signed in.\n       */\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use\n       */\n      provider: SocialProviderListEnum,\n      /**\n       * ID Token for direct authentication without redirect\n       */\n      idToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n        token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string(),\n        nonce: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n        accessToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n        refreshToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n        scopes: zod_v4__WEBPACK_IMPORTED_MODULE_20__.array(zod_v4__WEBPACK_IMPORTED_MODULE_20__.string()).optional()\n      }).optional(),\n      /**\n       * Whether to allow sign up for new users\n       */\n      requestSignUp: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().optional(),\n      /**\n       * Additional scopes to request when linking the account.\n       * This is useful for requesting additional permissions when\n       * linking a social account compared to the initial authentication.\n       */\n      scopes: zod_v4__WEBPACK_IMPORTED_MODULE_20__.array(zod_v4__WEBPACK_IMPORTED_MODULE_20__.string()).meta({\n        description: \"Additional scopes to request from the provider\"\n      }).optional(),\n      /**\n       * The URL to redirect to if there is an error during the link process.\n       */\n      errorCallbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect to if there is an error during the link process\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Link a social account to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    url: {\n                      type: \"string\",\n                      description: \"The authorization URL to redirect the user to\"\n                    },\n                    redirect: {\n                      type: \"boolean\",\n                      description: \"Indicates if the user should be redirected to the authorization URL\"\n                    },\n                    status: {\n                      type: \"boolean\"\n                    }\n                  },\n                  required: [\"redirect\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const linkingUserInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!linkingUserInfo || !linkingUserInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!linkingUserInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const existingAccounts = await c.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const hasBeenLinked = existingAccounts.find(\n        (a) => a.providerId === provider.id && a.accountId === linkingUserInfo.user.id\n      );\n      if (hasBeenLinked) {\n        return c.json({\n          redirect: false,\n          url: \"\",\n          // this is for type inference\n          status: true\n        });\n      }\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(provider.id);\n      if (!isTrustedProvider && !linkingUserInfo.user.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - linking not allowed\"\n        });\n      }\n      if (linkingUserInfo.user.email !== session.user.email && c.context.options.account?.accountLinking?.allowDifferentEmails !== true) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - different emails not allowed\"\n        });\n      }\n      try {\n        await c.context.internalAdapter.createAccount(\n          {\n            userId: session.user.id,\n            providerId: provider.id,\n            accountId: linkingUserInfo.user.id.toString(),\n            accessToken: c.body.idToken.accessToken,\n            idToken: token,\n            refreshToken: c.body.idToken.refreshToken,\n            scope: c.body.idToken.scopes?.join(\",\")\n          },\n          c\n        );\n      } catch (e) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"EXPECTATION_FAILED\", {\n          message: \"Account not linked - unable to create account\"\n        });\n      }\n      if (c.context.options.account?.accountLinking?.updateUserInfoOnLink === true) {\n        try {\n          await c.context.internalAdapter.updateUser(session.user.id, {\n            name: linkingUserInfo.user?.name,\n            image: linkingUserInfo.user?.image\n          });\n        } catch (e) {\n          console.warn(\"Could not update user - \" + e.toString());\n        }\n      }\n      return c.json({\n        redirect: false,\n        url: \"\",\n        // this is for type inference\n        status: true\n      });\n    }\n    const state = await generateState(c, {\n      userId: session.user.id,\n      email: session.user.email\n    });\n    const url = await provider.createAuthorizationURL({\n      state: state.state,\n      codeVerifier: state.codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: true\n    });\n  }\n);\nconst unlinkAccount = createAuthEndpoint(\n  \"/unlink-account\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      providerId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string(),\n      accountId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n    }),\n    use: [freshSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Unlink an account\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId } = ctx.body;\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      ctx.context.session.user.id\n    );\n    if (accounts.length === 1 && !ctx.context.options.account?.accountLinking?.allowUnlinkingAll) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_UNLINK_LAST_ACCOUNT\n      });\n    }\n    const accountExist = accounts.find(\n      (account) => accountId ? account.accountId === accountId && account.providerId === providerId : account.providerId === providerId\n    );\n    if (!accountExist) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.ACCOUNT_NOT_FOUND\n      });\n    }\n    await ctx.context.internalAdapter.deleteAccount(accountExist.id);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst getAccessToken = createAuthEndpoint(\n  \"/get-access-token\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      providerId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Get a valid access token, doing a refresh if needed\",\n        responses: {\n          200: {\n            description: \"A Valid access token\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    if (!ctx.context.socialProviders.find((p) => p.id === providerId)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} is not supported.`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    try {\n      let newTokens = null;\n      const accessTokenExpired = account.accessTokenExpiresAt && new Date(account.accessTokenExpiresAt).getTime() - Date.now() < 5e3;\n      if (account.refreshToken && accessTokenExpired && provider.refreshAccessToken) {\n        newTokens = await provider.refreshAccessToken(\n          account.refreshToken\n        );\n        await ctx.context.internalAdapter.updateAccount(account.id, {\n          accessToken: await setTokenUtil(newTokens.accessToken, ctx.context),\n          accessTokenExpiresAt: newTokens.accessTokenExpiresAt,\n          refreshToken: await setTokenUtil(newTokens.refreshToken, ctx.context),\n          refreshTokenExpiresAt: newTokens.refreshTokenExpiresAt\n        });\n      }\n      const tokens = {\n        accessToken: await decryptOAuthToken(\n          newTokens?.accessToken ?? account.accessToken ?? \"\",\n          ctx.context\n        ),\n        accessTokenExpiresAt: newTokens?.accessTokenExpiresAt ?? account.accessTokenExpiresAt ?? void 0,\n        scopes: account.scope?.split(\",\") ?? [],\n        idToken: newTokens?.idToken ?? account.idToken ?? void 0\n      };\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Failed to get a valid access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst refreshToken = createAuthEndpoint(\n  \"/refresh-token\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      providerId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Refresh the access token using a refresh token\",\n        responses: {\n          200: {\n            description: \"Access token refreshed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    if (!provider.refreshAccessToken) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} does not support token refreshing.`\n      });\n    }\n    try {\n      const tokens = await provider.refreshAccessToken(\n        account.refreshToken\n      );\n      await ctx.context.internalAdapter.updateAccount(account.id, {\n        accessToken: await setTokenUtil(tokens.accessToken, ctx.context),\n        refreshToken: await setTokenUtil(tokens.refreshToken, ctx.context),\n        accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n        refreshTokenExpiresAt: tokens.refreshTokenExpiresAt\n      });\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Failed to refresh access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst accountInfo = createAuthEndpoint(\n  \"/account-info\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Get the account info provided by the provider\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        name: {\n                          type: \"string\"\n                        },\n                        email: {\n                          type: \"string\"\n                        },\n                        image: {\n                          type: \"string\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        }\n                      },\n                      required: [\"id\", \"emailVerified\"]\n                    },\n                    data: {\n                      type: \"object\",\n                      properties: {},\n                      additionalProperties: true\n                    }\n                  },\n                  required: [\"user\", \"data\"],\n                  additionalProperties: false\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      accountId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The provider given account id for which to get the account info\"\n      })\n    })\n  },\n  async (ctx) => {\n    const account = await ctx.context.internalAdapter.findAccount(\n      ctx.body.accountId\n    );\n    if (!account || account.userId !== ctx.context.session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === account.providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: `Provider account provider is ${account.providerId} but it is not configured`\n      });\n    }\n    const tokens = await getAccessToken({\n      ...ctx,\n      body: {\n        accountId: account.id,\n        providerId: account.providerId\n      },\n      returnHeaders: false\n    });\n    if (!tokens.accessToken) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Access token not found\"\n      });\n    }\n    const info = await provider.getUserInfo({\n      ...tokens,\n      accessToken: tokens.accessToken\n    });\n    return ctx.json(info);\n  }\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/adapters/prisma-adapter/index.mjs":
/*!*****************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/adapters/prisma-adapter/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prismaAdapter: () => (/* binding */ prismaAdapter)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/better-auth.gBl3F_xa.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/better-auth.DORkW_Ge.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/better-auth.DBGfIDnh.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! better-call */ \"(rsc)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst prismaAdapter = (prisma, config) => (0,_shared_better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n  config: {\n    adapterId: \"prisma\",\n    adapterName: \"Prisma Adapter\",\n    usePlural: config.usePlural ?? false,\n    debugLogs: config.debugLogs ?? false\n  },\n  adapter: ({ getFieldName }) => {\n    const db = prisma;\n    const convertSelect = (select, model) => {\n      if (!select || !model) return void 0;\n      return select.reduce((prev, cur) => {\n        return {\n          ...prev,\n          [getFieldName({ model, field: cur })]: true\n        };\n      }, {});\n    };\n    function operatorToPrismaOperator(operator) {\n      switch (operator) {\n        case \"starts_with\":\n          return \"startsWith\";\n        case \"ends_with\":\n          return \"endsWith\";\n        case \"ne\":\n          return \"not\";\n        default:\n          return operator;\n      }\n    }\n    const convertWhereClause = (model, where) => {\n      if (!where) return {};\n      if (where.length === 1) {\n        const w = where[0];\n        if (!w) {\n          return;\n        }\n        return {\n          [getFieldName({ model, field: w.field })]: w.operator === \"eq\" || !w.operator ? w.value : {\n            [operatorToPrismaOperator(w.operator)]: w.value\n          }\n        };\n      }\n      const and = where.filter((w) => w.connector === \"AND\" || !w.connector);\n      const or = where.filter((w) => w.connector === \"OR\");\n      const andClause = and.map((w) => {\n        return {\n          [getFieldName({ model, field: w.field })]: w.operator === \"eq\" || !w.operator ? w.value : {\n            [operatorToPrismaOperator(w.operator)]: w.value\n          }\n        };\n      });\n      const orClause = or.map((w) => {\n        return {\n          [getFieldName({ model, field: w.field })]: w.operator === \"eq\" || !w.operator ? w.value : {\n            [operatorToPrismaOperator(w.operator)]: w.value\n          }\n        };\n      });\n      return {\n        ...andClause.length ? { AND: andClause } : {},\n        ...orClause.length ? { OR: orClause } : {}\n      };\n    };\n    return {\n      async create({ model, data: values, select }) {\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].create({\n          data: values,\n          select: convertSelect(select, model)\n        });\n      },\n      async findOne({ model, where, select }) {\n        const whereClause = convertWhereClause(model, where);\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].findFirst({\n          where: whereClause,\n          select: convertSelect(select, model)\n        });\n      },\n      async findMany({ model, where, limit, offset, sortBy }) {\n        const whereClause = convertWhereClause(model, where);\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].findMany({\n          where: whereClause,\n          take: limit || 100,\n          skip: offset || 0,\n          ...sortBy?.field ? {\n            orderBy: {\n              [getFieldName({ model, field: sortBy.field })]: sortBy.direction === \"desc\" ? \"desc\" : \"asc\"\n            }\n          } : {}\n        });\n      },\n      async count({ model, where }) {\n        const whereClause = convertWhereClause(model, where);\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].count({\n          where: whereClause\n        });\n      },\n      async update({ model, where, update }) {\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        const whereClause = convertWhereClause(model, where);\n        return await db[model].update({\n          where: whereClause,\n          data: update\n        });\n      },\n      async updateMany({ model, where, update }) {\n        const whereClause = convertWhereClause(model, where);\n        const result = await db[model].updateMany({\n          where: whereClause,\n          data: update\n        });\n        return result ? result.count : 0;\n      },\n      async delete({ model, where }) {\n        const whereClause = convertWhereClause(model, where);\n        try {\n          await db[model].delete({\n            where: whereClause\n          });\n        } catch (e) {\n        }\n      },\n      async deleteMany({ model, where }) {\n        const whereClause = convertWhereClause(model, where);\n        const result = await db[model].deleteMany({\n          where: whereClause\n        });\n        return result ? result.count : 0;\n      },\n      options: config\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/adapters/prisma-adapter/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/api/index.mjs":
/*!*********************************************************!*\
  !*** ../../node_modules/better-auth/dist/api/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: () => (/* reexport safe */ better_call__WEBPACK_IMPORTED_MODULE_0__.APIError),\n/* harmony export */   accountInfo: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.E),\n/* harmony export */   callbackOAuth: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.a0),\n/* harmony export */   changeEmail: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.V),\n/* harmony export */   changePassword: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.U),\n/* harmony export */   createAuthEndpoint: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.j),\n/* harmony export */   createAuthMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.i),\n/* harmony export */   createEmailVerificationToken: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.w),\n/* harmony export */   deleteUser: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.S),\n/* harmony export */   deleteUserCallback: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.J),\n/* harmony export */   error: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.C),\n/* harmony export */   forgetPassword: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Z),\n/* harmony export */   forgetPasswordCallback: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.R),\n/* harmony export */   freshSessionMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.n),\n/* harmony export */   getAccessToken: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.F),\n/* harmony export */   getEndpoints: () => (/* binding */ getEndpoints),\n/* harmony export */   getSession: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.m),\n/* harmony export */   getSessionFromCtx: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.k),\n/* harmony export */   linkSocialAccount: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.L),\n/* harmony export */   listSessions: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.y),\n/* harmony export */   listUserAccounts: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.K),\n/* harmony export */   ok: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.D),\n/* harmony export */   optionsMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.q),\n/* harmony export */   originCheck: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.o),\n/* harmony export */   originCheckMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.A),\n/* harmony export */   refreshToken: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.G),\n/* harmony export */   requestOnlySessionMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.a2),\n/* harmony export */   requestPasswordReset: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Q),\n/* harmony export */   requestPasswordResetCallback: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.P),\n/* harmony export */   resetPassword: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Y),\n/* harmony export */   revokeOtherSessions: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.M),\n/* harmony export */   revokeSession: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.O),\n/* harmony export */   revokeSessions: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.N),\n/* harmony export */   router: () => (/* binding */ router),\n/* harmony export */   sendVerificationEmail: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.W),\n/* harmony export */   sendVerificationEmailFn: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.u),\n/* harmony export */   sessionMiddleware: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.l),\n/* harmony export */   setPassword: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.T),\n/* harmony export */   signInEmail: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__._),\n/* harmony export */   signInSocial: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.a1),\n/* harmony export */   signOut: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.$),\n/* harmony export */   signUpEmail: () => (/* binding */ signUpEmail),\n/* harmony export */   unlinkAccount: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.I),\n/* harmony export */   updateUser: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.z),\n/* harmony export */   verifyEmail: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.X)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/better-auth.z3dsxLxE.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/../../node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(rsc)/../../node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _shared_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/better-auth.n2KFGwjY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/better-auth.8zoxzg-F.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/better-auth.DBGfIDnh.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _shared_better_auth_DcfNPS8q_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/better-auth.DcfNPS8q.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! defu */ \"(rsc)/../../node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../crypto/index.mjs */ \"(rsc)/../../node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/../../node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../shared/better-auth.VTXNLFMT.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/../../node_modules/@better-auth/utils/dist/binary.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst signUpEmail = () => (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(\n  \"/sign-up/email\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_22__.record(zod_v4__WEBPACK_IMPORTED_MODULE_22__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_22__.any()),\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Sign up a user using email and password\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  email: {\n                    type: \"string\",\n                    description: \"The email of the user\"\n                  },\n                  password: {\n                    type: \"string\",\n                    description: \"The password of the user\"\n                  },\n                  image: {\n                    type: \"string\",\n                    description: \"The profile image URL of the user\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\"\n                  },\n                  rememberMe: {\n                    type: \"boolean\",\n                    description: \"If this is false, the session will not be remembered. Default is `true`.\"\n                  }\n                },\n                required: [\"name\", \"email\", \"password\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Successfully created user\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      description: \"Authentication token for the session\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                  // token is optional\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.enabled || ctx.context.options.emailAndPassword?.disableSignUp) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Email and password sign up is not enabled\"\n      });\n    }\n    const body = ctx.body;\n    const {\n      name,\n      email,\n      password,\n      image,\n      callbackURL,\n      rememberMe,\n      ...additionalFields\n    } = body;\n    const isValidEmail = zod_v4__WEBPACK_IMPORTED_MODULE_22__.email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.INVALID_EMAIL\n      });\n    }\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (password.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (password.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.PASSWORD_TOO_LONG\n      });\n    }\n    const dbUser = await ctx.context.internalAdapter.findUserByEmail(email);\n    if (dbUser?.user) {\n      ctx.context.logger.info(`Sign-up attempt for existing email: ${email}`);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.USER_ALREADY_EXISTS\n      });\n    }\n    const additionalData = (0,_shared_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_3__.f)(\n      ctx.context.options,\n      additionalFields\n    );\n    const hash = await ctx.context.password.hash(password);\n    let createdUser;\n    try {\n      createdUser = await ctx.context.internalAdapter.createUser(\n        {\n          email: email.toLowerCase(),\n          name,\n          image,\n          ...additionalData,\n          emailVerified: false\n        },\n        ctx\n      );\n      if (!createdUser) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER\n        });\n      }\n    } catch (e) {\n      if (_shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_4__.b) {\n        ctx.context.logger.error(\"Failed to create user\", e);\n      }\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n        throw e;\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER,\n        details: e\n      });\n    }\n    if (!createdUser) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER\n      });\n    }\n    await ctx.context.internalAdapter.linkAccount(\n      {\n        userId: createdUser.id,\n        providerId: \"credential\",\n        accountId: createdUser.id,\n        password: hash\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.sendOnSignUp || ctx.context.options.emailAndPassword.requireEmailVerification) {\n      const token = await (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(\n        ctx.context.secret,\n        createdUser.email,\n        void 0,\n        ctx.context.options.emailVerification?.expiresIn\n      );\n      const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${body.callbackURL || \"/\"}`;\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: createdUser,\n          url,\n          token\n        },\n        ctx.request\n      );\n    }\n    if (ctx.context.options.emailAndPassword.autoSignIn === false || ctx.context.options.emailAndPassword.requireEmailVerification) {\n      return ctx.json({\n        token: null,\n        user: {\n          id: createdUser.id,\n          email: createdUser.email,\n          name: createdUser.name,\n          image: createdUser.image,\n          emailVerified: createdUser.emailVerified,\n          createdAt: createdUser.createdAt,\n          updatedAt: createdUser.updatedAt\n        }\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      createdUser.id,\n      ctx,\n      rememberMe === false\n    );\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_2__.setSessionCookie)(\n      ctx,\n      {\n        session,\n        user: createdUser\n      },\n      rememberMe === false\n    );\n    return ctx.json({\n      token: session.token,\n      user: {\n        id: createdUser.id,\n        email: createdUser.email,\n        name: createdUser.name,\n        image: createdUser.image,\n        emailVerified: createdUser.emailVerified,\n        createdAt: createdUser.createdAt,\n        updatedAt: createdUser.updatedAt\n      }\n    });\n  }\n);\n\nfunction shouldRateLimit(max, window, rateLimitData) {\n  const now = Date.now();\n  const windowInMs = window * 1e3;\n  const timeSinceLastRequest = now - rateLimitData.lastRequest;\n  return timeSinceLastRequest < windowInMs && rateLimitData.count >= max;\n}\nfunction rateLimitResponse(retryAfter) {\n  return new Response(\n    JSON.stringify({\n      message: \"Too many requests. Please try again later.\"\n    }),\n    {\n      status: 429,\n      statusText: \"Too Many Requests\",\n      headers: {\n        \"X-Retry-After\": retryAfter.toString()\n      }\n    }\n  );\n}\nfunction getRetryAfter(lastRequest, window) {\n  const now = Date.now();\n  const windowInMs = window * 1e3;\n  return Math.ceil((lastRequest + windowInMs - now) / 1e3);\n}\nfunction createDBStorage(ctx) {\n  const model = \"rateLimit\";\n  const db = ctx.adapter;\n  return {\n    get: async (key) => {\n      const res = await db.findMany({\n        model,\n        where: [{ field: \"key\", value: key }]\n      });\n      const data = res[0];\n      if (typeof data?.lastRequest === \"bigint\") {\n        data.lastRequest = Number(data.lastRequest);\n      }\n      return data;\n    },\n    set: async (key, value, _update) => {\n      try {\n        if (_update) {\n          await db.updateMany({\n            model,\n            where: [{ field: \"key\", value: key }],\n            update: {\n              count: value.count,\n              lastRequest: value.lastRequest\n            }\n          });\n        } else {\n          await db.create({\n            model,\n            data: {\n              key,\n              count: value.count,\n              lastRequest: value.lastRequest\n            }\n          });\n        }\n      } catch (e) {\n        ctx.logger.error(\"Error setting rate limit\", e);\n      }\n    }\n  };\n}\nconst memory = /* @__PURE__ */ new Map();\nfunction getRateLimitStorage(ctx) {\n  if (ctx.options.rateLimit?.customStorage) {\n    return ctx.options.rateLimit.customStorage;\n  }\n  if (ctx.rateLimit.storage === \"secondary-storage\") {\n    return {\n      get: async (key) => {\n        const stringified = await ctx.options.secondaryStorage?.get(key);\n        return stringified ? JSON.parse(stringified) : void 0;\n      },\n      set: async (key, value) => {\n        await ctx.options.secondaryStorage?.set?.(key, JSON.stringify(value));\n      }\n    };\n  }\n  const storage = ctx.rateLimit.storage;\n  if (storage === \"memory\") {\n    return {\n      async get(key) {\n        return memory.get(key);\n      },\n      async set(key, value, _update) {\n        memory.set(key, value);\n      }\n    };\n  }\n  return createDBStorage(ctx);\n}\nasync function onRequestRateLimit(req, ctx) {\n  if (!ctx.rateLimit.enabled) {\n    return;\n  }\n  const path = new URL(req.url).pathname.replace(\n    ctx.options.basePath || \"/api/auth\",\n    \"\"\n  );\n  let window = ctx.rateLimit.window;\n  let max = ctx.rateLimit.max;\n  const ip = (0,_shared_better_auth_DcfNPS8q_mjs__WEBPACK_IMPORTED_MODULE_6__.g)(req, ctx.options);\n  if (!ip) {\n    console.warn(\"No IP address found for rate limiting\");\n    return;\n  }\n  const key = ip + path;\n  const specialRules = getDefaultSpecialRules();\n  const specialRule = specialRules.find((rule) => rule.pathMatcher(path));\n  if (specialRule) {\n    window = specialRule.window;\n    max = specialRule.max;\n  }\n  for (const plugin of ctx.options.plugins || []) {\n    if (plugin.rateLimit) {\n      const matchedRule = plugin.rateLimit.find(\n        (rule) => rule.pathMatcher(path)\n      );\n      if (matchedRule) {\n        window = matchedRule.window;\n        max = matchedRule.max;\n        break;\n      }\n    }\n  }\n  if (ctx.rateLimit.customRules) {\n    const _path = Object.keys(ctx.rateLimit.customRules).find((p) => {\n      if (p.includes(\"*\")) {\n        const isMatch = (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(p)(path);\n        return isMatch;\n      }\n      return p === path;\n    });\n    if (_path) {\n      const customRule = ctx.rateLimit.customRules[_path];\n      const resolved = typeof customRule === \"function\" ? await customRule(req) : customRule;\n      if (resolved) {\n        window = resolved.window;\n        max = resolved.max;\n      }\n    }\n  }\n  const storage = getRateLimitStorage(ctx);\n  const data = await storage.get(key);\n  const now = Date.now();\n  if (!data) {\n    await storage.set(key, {\n      key,\n      count: 1,\n      lastRequest: now\n    });\n  } else {\n    const timeSinceLastRequest = now - data.lastRequest;\n    if (shouldRateLimit(max, window, data)) {\n      const retryAfter = getRetryAfter(data.lastRequest, window);\n      return rateLimitResponse(retryAfter);\n    } else if (timeSinceLastRequest > window * 1e3) {\n      await storage.set(\n        key,\n        {\n          ...data,\n          count: 1,\n          lastRequest: now\n        },\n        true\n      );\n    } else {\n      await storage.set(\n        key,\n        {\n          ...data,\n          count: data.count + 1,\n          lastRequest: now\n        },\n        true\n      );\n    }\n  }\n}\nfunction getDefaultSpecialRules() {\n  const specialRules = [\n    {\n      pathMatcher(path) {\n        return path.startsWith(\"/sign-in\") || path.startsWith(\"/sign-up\") || path.startsWith(\"/change-password\") || path.startsWith(\"/change-email\");\n      },\n      window: 10,\n      max: 3\n    }\n  ];\n  return specialRules;\n}\n\nfunction toAuthEndpoints(endpoints, ctx) {\n  const api = {};\n  for (const [key, endpoint] of Object.entries(endpoints)) {\n    api[key] = async (context) => {\n      const authContext = await ctx;\n      let internalContext = {\n        ...context,\n        context: {\n          ...authContext,\n          returned: void 0,\n          responseHeaders: void 0,\n          session: null\n        },\n        path: endpoint.path,\n        headers: context?.headers ? new Headers(context?.headers) : void 0\n      };\n      const { beforeHooks, afterHooks } = getHooks(authContext);\n      const before = await runBeforeHooks(internalContext, beforeHooks);\n      if (\"context\" in before && before.context && typeof before.context === \"object\") {\n        const { headers, ...rest } = before.context;\n        if (headers) {\n          headers.forEach((value, key2) => {\n            internalContext.headers.set(key2, value);\n          });\n        }\n        internalContext = (0,defu__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(rest, internalContext);\n      } else if (before) {\n        return before;\n      }\n      internalContext.asResponse = false;\n      internalContext.returnHeaders = true;\n      const result = await endpoint(internalContext).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      internalContext.context.returned = result.response;\n      internalContext.context.responseHeaders = result.headers;\n      const after = await runAfterHooks(internalContext, afterHooks);\n      if (after.response) {\n        result.response = after.response;\n      }\n      if (result.response instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError && !context?.asResponse) {\n        throw result.response;\n      }\n      const response = context?.asResponse ? (0,better_call__WEBPACK_IMPORTED_MODULE_0__.toResponse)(result.response, {\n        headers: result.headers\n      }) : context?.returnHeaders ? {\n        headers: result.headers,\n        response: result.response\n      } : result.response;\n      return response;\n    };\n    api[key].path = endpoint.path;\n    api[key].options = endpoint.options;\n  }\n  return api;\n}\nasync function runBeforeHooks(context, hooks) {\n  let modifiedContext = {};\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler({\n        ...context,\n        returnHeaders: false\n      });\n      if (result && typeof result === \"object\") {\n        if (\"context\" in result && typeof result.context === \"object\") {\n          const { headers, ...rest } = result.context;\n          if (headers instanceof Headers) {\n            if (modifiedContext.headers) {\n              headers.forEach((value, key) => {\n                modifiedContext.headers?.set(key, value);\n              });\n            } else {\n              modifiedContext.headers = headers;\n            }\n          }\n          modifiedContext = (0,defu__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(rest, modifiedContext);\n          continue;\n        }\n        return result;\n      }\n    }\n  }\n  return { context: modifiedContext };\n}\nasync function runAfterHooks(context, hooks) {\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler(context).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      if (result.headers) {\n        result.headers.forEach((value, key) => {\n          if (!context.context.responseHeaders) {\n            context.context.responseHeaders = new Headers({\n              [key]: value\n            });\n          } else {\n            if (key.toLowerCase() === \"set-cookie\") {\n              context.context.responseHeaders.append(key, value);\n            } else {\n              context.context.responseHeaders.set(key, value);\n            }\n          }\n        });\n      }\n      if (result.response) {\n        context.context.returned = result.response;\n      }\n    }\n  }\n  return {\n    response: context.context.returned,\n    headers: context.context.responseHeaders\n  };\n}\nfunction getHooks(authContext) {\n  const plugins = authContext.options.plugins || [];\n  const beforeHooks = [];\n  const afterHooks = [];\n  if (authContext.options.hooks?.before) {\n    beforeHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.before\n    });\n  }\n  if (authContext.options.hooks?.after) {\n    afterHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.after\n    });\n  }\n  const pluginBeforeHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.before) {\n      return plugin.hooks.before;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  const pluginAfterHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.after) {\n      return plugin.hooks.after;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  pluginBeforeHooks.length && beforeHooks.push(...pluginBeforeHooks);\n  pluginAfterHooks.length && afterHooks.push(...pluginAfterHooks);\n  return {\n    beforeHooks,\n    afterHooks\n  };\n}\n\nfunction getEndpoints(ctx, options) {\n  const pluginEndpoints = options.plugins?.reduce(\n    (acc, plugin) => {\n      return {\n        ...acc,\n        ...plugin.endpoints\n      };\n    },\n    {}\n  );\n  const middlewares = options.plugins?.map(\n    (plugin) => plugin.middlewares?.map((m) => {\n      const middleware = async (context) => {\n        return m.middleware({\n          ...context,\n          context: {\n            ...ctx,\n            ...context.context\n          }\n        });\n      };\n      middleware.options = m.middleware.options;\n      return {\n        path: m.path,\n        middleware\n      };\n    })\n  ).filter((plugin) => plugin !== void 0).flat() || [];\n  const baseEndpoints = {\n    signInSocial: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.a1,\n    callbackOAuth: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.a0,\n    getSession: (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(),\n    signOut: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.$,\n    signUpEmail: signUpEmail(),\n    signInEmail: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__._,\n    forgetPassword: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Z,\n    resetPassword: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Y,\n    verifyEmail: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.X,\n    sendVerificationEmail: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.W,\n    changeEmail: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.V,\n    changePassword: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.U,\n    setPassword: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.T,\n    updateUser: (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.z)(),\n    deleteUser: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.S,\n    forgetPasswordCallback: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.R,\n    requestPasswordReset: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.Q,\n    requestPasswordResetCallback: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.P,\n    listSessions: (0,_shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.y)(),\n    revokeSession: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.O,\n    revokeSessions: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.N,\n    revokeOtherSessions: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.M,\n    linkSocialAccount: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.L,\n    listUserAccounts: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.K,\n    deleteUserCallback: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.J,\n    unlinkAccount: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.I,\n    refreshToken: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.G,\n    getAccessToken: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.F,\n    accountInfo: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.E\n  };\n  const endpoints = {\n    ...baseEndpoints,\n    ...pluginEndpoints,\n    ok: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.D,\n    error: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.C\n  };\n  const api = toAuthEndpoints(endpoints, ctx);\n  return {\n    api,\n    middlewares\n  };\n}\nconst router = (ctx, options) => {\n  const { api, middlewares } = getEndpoints(ctx, options);\n  const basePath = new URL(ctx.baseURL).pathname;\n  return (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createRouter)(api, {\n    routerContext: ctx,\n    openapi: {\n      disabled: true\n    },\n    basePath,\n    routerMiddleware: [\n      {\n        path: \"/**\",\n        middleware: _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_1__.A\n      },\n      ...middlewares\n    ],\n    async onRequest(req) {\n      const disabledPaths = ctx.options.disabledPaths || [];\n      const path = new URL(req.url).pathname.replace(basePath, \"\");\n      if (disabledPaths.includes(path)) {\n        return new Response(\"Not Found\", { status: 404 });\n      }\n      for (const plugin of ctx.options.plugins || []) {\n        if (plugin.onRequest) {\n          const response = await plugin.onRequest(req, ctx);\n          if (response && \"response\" in response) {\n            return response.response;\n          }\n        }\n      }\n      return onRequestRateLimit(req, ctx);\n    },\n    async onResponse(res) {\n      for (const plugin of ctx.options.plugins || []) {\n        if (plugin.onResponse) {\n          const response = await plugin.onResponse(res, ctx);\n          if (response) {\n            return response.response;\n          }\n        }\n      }\n      return res;\n    },\n    onError(e) {\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError && e.status === \"FOUND\") {\n        return;\n      }\n      if (options.onAPIError?.throw) {\n        throw e;\n      }\n      if (options.onAPIError?.onError) {\n        options.onAPIError.onError(e, ctx);\n        return;\n      }\n      const optLogLevel = options.logger?.level;\n      const log = optLogLevel === \"error\" || optLogLevel === \"warn\" || optLogLevel === \"debug\" ? _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_5__.a : void 0;\n      if (options.logger?.disabled !== true) {\n        if (e && typeof e === \"object\" && \"message\" in e && typeof e.message === \"string\") {\n          if (e.message.includes(\"no column\") || e.message.includes(\"column\") || e.message.includes(\"relation\") || e.message.includes(\"table\") || e.message.includes(\"does not exist\")) {\n            ctx.logger?.error(e.message);\n            return;\n          }\n        }\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          if (e.status === \"INTERNAL_SERVER_ERROR\") {\n            ctx.logger.error(e.status, e);\n          }\n          log?.error(e.message);\n        } else {\n          ctx.logger?.error(\n            e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n            e\n          );\n        }\n      }\n    }\n  });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/api/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs":
/*!*************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BunSqliteAdapter: () => (/* binding */ BunSqliteAdapter),\n/* harmony export */   BunSqliteDialect: () => (/* binding */ BunSqliteDialect),\n/* harmony export */   BunSqliteDriver: () => (/* binding */ BunSqliteDriver),\n/* harmony export */   BunSqliteIntrospector: () => (/* binding */ BunSqliteIntrospector),\n/* harmony export */   BunSqliteQueryCompiler: () => (/* binding */ BunSqliteQueryCompiler)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/query-compiler/compiled-query.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/migration/migrator.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/raw-builder/sql.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js\");\n\n\nclass BunSqliteAdapter {\n  get supportsCreateIfNotExists() {\n    return true;\n  }\n  get supportsTransactionalDdl() {\n    return false;\n  }\n  get supportsReturning() {\n    return true;\n  }\n  async acquireMigrationLock() {\n  }\n  async releaseMigrationLock() {\n  }\n  get supportsOutput() {\n    return true;\n  }\n}\nclass BunSqliteDriver {\n  #config;\n  #connectionMutex = new ConnectionMutex();\n  #db;\n  #connection;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  async init() {\n    this.#db = this.#config.database;\n    this.#connection = new BunSqliteConnection(this.#db);\n    if (this.#config.onCreateConnection) {\n      await this.#config.onCreateConnection(this.#connection);\n    }\n  }\n  async acquireConnection() {\n    await this.#connectionMutex.lock();\n    return this.#connection;\n  }\n  async beginTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"begin\"));\n  }\n  async commitTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"commit\"));\n  }\n  async rollbackTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"rollback\"));\n  }\n  async releaseConnection() {\n    this.#connectionMutex.unlock();\n  }\n  async destroy() {\n    this.#db?.close();\n  }\n}\nclass BunSqliteConnection {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  executeQuery(compiledQuery) {\n    const { sql: sql2, parameters } = compiledQuery;\n    const stmt = this.#db.prepare(sql2);\n    return Promise.resolve({\n      rows: stmt.all(parameters)\n    });\n  }\n  async *streamQuery() {\n    throw new Error(\"Streaming query is not supported by SQLite driver.\");\n  }\n}\nclass ConnectionMutex {\n  #promise;\n  #resolve;\n  async lock() {\n    while (this.#promise) {\n      await this.#promise;\n    }\n    this.#promise = new Promise((resolve) => {\n      this.#resolve = resolve;\n    });\n  }\n  unlock() {\n    const resolve = this.#resolve;\n    this.#promise = void 0;\n    this.#resolve = void 0;\n    resolve?.();\n  }\n}\nclass BunSqliteIntrospector {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  async getSchemas() {\n    return [];\n  }\n  async getTables(options = { withInternalKyselyTables: false }) {\n    let query = this.#db.selectFrom(\"sqlite_schema\").where(\"type\", \"=\", \"table\").where(\"name\", \"not like\", \"sqlite_%\").select(\"name\").$castTo();\n    if (!options.withInternalKyselyTables) {\n      query = query.where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_TABLE).where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_LOCK_TABLE);\n    }\n    const tables = await query.execute();\n    return Promise.all(tables.map(({ name }) => this.#getTableMetadata(name)));\n  }\n  async getMetadata(options) {\n    return {\n      tables: await this.getTables(options)\n    };\n  }\n  async #getTableMetadata(table) {\n    const db = this.#db;\n    const createSql = await db.selectFrom(\"sqlite_master\").where(\"name\", \"=\", table).select(\"sql\").$castTo().execute();\n    const autoIncrementCol = createSql[0]?.sql?.split(/[\\(\\),]/)?.find((it) => it.toLowerCase().includes(\"autoincrement\"))?.split(/\\s+/)?.[0]?.replace(/[\"`]/g, \"\");\n    const columns = await db.selectFrom(\n      (0,kysely__WEBPACK_IMPORTED_MODULE_2__.sql)`pragma_table_info(${table})`.as(\"table_info\")\n    ).select([\"name\", \"type\", \"notnull\", \"dflt_value\"]).execute();\n    return {\n      name: table,\n      columns: columns.map((col) => ({\n        name: col.name,\n        dataType: col.type,\n        isNullable: !col.notnull,\n        isAutoIncrementing: col.name === autoIncrementCol,\n        hasDefaultValue: col.dflt_value != null\n      })),\n      isView: true\n    };\n  }\n}\nclass BunSqliteQueryCompiler extends kysely__WEBPACK_IMPORTED_MODULE_3__.DefaultQueryCompiler {\n  getCurrentParameterPlaceholder() {\n    return \"?\";\n  }\n  getLeftIdentifierWrapper() {\n    return '\"';\n  }\n  getRightIdentifierWrapper() {\n    return '\"';\n  }\n  getAutoIncrement() {\n    return \"autoincrement\";\n  }\n}\nclass BunSqliteDialect {\n  #config;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  createDriver() {\n    return new BunSqliteDriver(this.#config);\n  }\n  createQueryCompiler() {\n    return new BunSqliteQueryCompiler();\n  }\n  createAdapter() {\n    return new BunSqliteAdapter();\n  }\n  createIntrospector(db) {\n    return new BunSqliteIntrospector(db);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3QvY2h1bmtzL2J1bi1zcWxpdGUtZGlhbGVjdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXlIOztBQUV6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsaURBQWE7QUFDL0M7QUFDQTtBQUNBLGtDQUFrQyxpREFBYTtBQUMvQztBQUNBO0FBQ0Esa0NBQWtDLGlEQUFhO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixpQ0FBaUM7QUFDL0Q7QUFDQTtBQUNBLHdDQUF3QywyREFBdUIsc0JBQXNCLGdFQUE0QjtBQUNqSDtBQUNBO0FBQ0EscUNBQXFDLE1BQU07QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sMkNBQUcscUJBQXFCLE1BQU07QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHdEQUFvQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU4RyIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jaHVua3MvYnVuLXNxbGl0ZS1kaWFsZWN0Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21waWxlZFF1ZXJ5LCBEZWZhdWx0UXVlcnlDb21waWxlciwgREVGQVVMVF9NSUdSQVRJT05fVEFCTEUsIERFRkFVTFRfTUlHUkFUSU9OX0xPQ0tfVEFCTEUsIHNxbCB9IGZyb20gJ2t5c2VseSc7XG5cbmNsYXNzIEJ1blNxbGl0ZUFkYXB0ZXIge1xuICBnZXQgc3VwcG9ydHNDcmVhdGVJZk5vdEV4aXN0cygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBnZXQgc3VwcG9ydHNUcmFuc2FjdGlvbmFsRGRsKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBnZXQgc3VwcG9ydHNSZXR1cm5pbmcoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgYXN5bmMgYWNxdWlyZU1pZ3JhdGlvbkxvY2soKSB7XG4gIH1cbiAgYXN5bmMgcmVsZWFzZU1pZ3JhdGlvbkxvY2soKSB7XG4gIH1cbiAgZ2V0IHN1cHBvcnRzT3V0cHV0KCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5jbGFzcyBCdW5TcWxpdGVEcml2ZXIge1xuICAjY29uZmlnO1xuICAjY29ubmVjdGlvbk11dGV4ID0gbmV3IENvbm5lY3Rpb25NdXRleCgpO1xuICAjZGI7XG4gICNjb25uZWN0aW9uO1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLiNjb25maWcgPSB7IC4uLmNvbmZpZyB9O1xuICB9XG4gIGFzeW5jIGluaXQoKSB7XG4gICAgdGhpcy4jZGIgPSB0aGlzLiNjb25maWcuZGF0YWJhc2U7XG4gICAgdGhpcy4jY29ubmVjdGlvbiA9IG5ldyBCdW5TcWxpdGVDb25uZWN0aW9uKHRoaXMuI2RiKTtcbiAgICBpZiAodGhpcy4jY29uZmlnLm9uQ3JlYXRlQ29ubmVjdGlvbikge1xuICAgICAgYXdhaXQgdGhpcy4jY29uZmlnLm9uQ3JlYXRlQ29ubmVjdGlvbih0aGlzLiNjb25uZWN0aW9uKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgYWNxdWlyZUNvbm5lY3Rpb24oKSB7XG4gICAgYXdhaXQgdGhpcy4jY29ubmVjdGlvbk11dGV4LmxvY2soKTtcbiAgICByZXR1cm4gdGhpcy4jY29ubmVjdGlvbjtcbiAgfVxuICBhc3luYyBiZWdpblRyYW5zYWN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGVRdWVyeShDb21waWxlZFF1ZXJ5LnJhdyhcImJlZ2luXCIpKTtcbiAgfVxuICBhc3luYyBjb21taXRUcmFuc2FjdGlvbihjb25uZWN0aW9uKSB7XG4gICAgYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlUXVlcnkoQ29tcGlsZWRRdWVyeS5yYXcoXCJjb21taXRcIikpO1xuICB9XG4gIGFzeW5jIHJvbGxiYWNrVHJhbnNhY3Rpb24oY29ubmVjdGlvbikge1xuICAgIGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZVF1ZXJ5KENvbXBpbGVkUXVlcnkucmF3KFwicm9sbGJhY2tcIikpO1xuICB9XG4gIGFzeW5jIHJlbGVhc2VDb25uZWN0aW9uKCkge1xuICAgIHRoaXMuI2Nvbm5lY3Rpb25NdXRleC51bmxvY2soKTtcbiAgfVxuICBhc3luYyBkZXN0cm95KCkge1xuICAgIHRoaXMuI2RiPy5jbG9zZSgpO1xuICB9XG59XG5jbGFzcyBCdW5TcWxpdGVDb25uZWN0aW9uIHtcbiAgI2RiO1xuICBjb25zdHJ1Y3RvcihkYikge1xuICAgIHRoaXMuI2RiID0gZGI7XG4gIH1cbiAgZXhlY3V0ZVF1ZXJ5KGNvbXBpbGVkUXVlcnkpIHtcbiAgICBjb25zdCB7IHNxbDogc3FsMiwgcGFyYW1ldGVycyB9ID0gY29tcGlsZWRRdWVyeTtcbiAgICBjb25zdCBzdG10ID0gdGhpcy4jZGIucHJlcGFyZShzcWwyKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgIHJvd3M6IHN0bXQuYWxsKHBhcmFtZXRlcnMpXG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgKnN0cmVhbVF1ZXJ5KCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmVhbWluZyBxdWVyeSBpcyBub3Qgc3VwcG9ydGVkIGJ5IFNRTGl0ZSBkcml2ZXIuXCIpO1xuICB9XG59XG5jbGFzcyBDb25uZWN0aW9uTXV0ZXgge1xuICAjcHJvbWlzZTtcbiAgI3Jlc29sdmU7XG4gIGFzeW5jIGxvY2soKSB7XG4gICAgd2hpbGUgKHRoaXMuI3Byb21pc2UpIHtcbiAgICAgIGF3YWl0IHRoaXMuI3Byb21pc2U7XG4gICAgfVxuICAgIHRoaXMuI3Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy4jcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSk7XG4gIH1cbiAgdW5sb2NrKCkge1xuICAgIGNvbnN0IHJlc29sdmUgPSB0aGlzLiNyZXNvbHZlO1xuICAgIHRoaXMuI3Byb21pc2UgPSB2b2lkIDA7XG4gICAgdGhpcy4jcmVzb2x2ZSA9IHZvaWQgMDtcbiAgICByZXNvbHZlPy4oKTtcbiAgfVxufVxuY2xhc3MgQnVuU3FsaXRlSW50cm9zcGVjdG9yIHtcbiAgI2RiO1xuICBjb25zdHJ1Y3RvcihkYikge1xuICAgIHRoaXMuI2RiID0gZGI7XG4gIH1cbiAgYXN5bmMgZ2V0U2NoZW1hcygpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgYXN5bmMgZ2V0VGFibGVzKG9wdGlvbnMgPSB7IHdpdGhJbnRlcm5hbEt5c2VseVRhYmxlczogZmFsc2UgfSkge1xuICAgIGxldCBxdWVyeSA9IHRoaXMuI2RiLnNlbGVjdEZyb20oXCJzcWxpdGVfc2NoZW1hXCIpLndoZXJlKFwidHlwZVwiLCBcIj1cIiwgXCJ0YWJsZVwiKS53aGVyZShcIm5hbWVcIiwgXCJub3QgbGlrZVwiLCBcInNxbGl0ZV8lXCIpLnNlbGVjdChcIm5hbWVcIikuJGNhc3RUbygpO1xuICAgIGlmICghb3B0aW9ucy53aXRoSW50ZXJuYWxLeXNlbHlUYWJsZXMpIHtcbiAgICAgIHF1ZXJ5ID0gcXVlcnkud2hlcmUoXCJuYW1lXCIsIFwiIT1cIiwgREVGQVVMVF9NSUdSQVRJT05fVEFCTEUpLndoZXJlKFwibmFtZVwiLCBcIiE9XCIsIERFRkFVTFRfTUlHUkFUSU9OX0xPQ0tfVEFCTEUpO1xuICAgIH1cbiAgICBjb25zdCB0YWJsZXMgPSBhd2FpdCBxdWVyeS5leGVjdXRlKCk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHRhYmxlcy5tYXAoKHsgbmFtZSB9KSA9PiB0aGlzLiNnZXRUYWJsZU1ldGFkYXRhKG5hbWUpKSk7XG4gIH1cbiAgYXN5bmMgZ2V0TWV0YWRhdGEob3B0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICB0YWJsZXM6IGF3YWl0IHRoaXMuZ2V0VGFibGVzKG9wdGlvbnMpXG4gICAgfTtcbiAgfVxuICBhc3luYyAjZ2V0VGFibGVNZXRhZGF0YSh0YWJsZSkge1xuICAgIGNvbnN0IGRiID0gdGhpcy4jZGI7XG4gICAgY29uc3QgY3JlYXRlU3FsID0gYXdhaXQgZGIuc2VsZWN0RnJvbShcInNxbGl0ZV9tYXN0ZXJcIikud2hlcmUoXCJuYW1lXCIsIFwiPVwiLCB0YWJsZSkuc2VsZWN0KFwic3FsXCIpLiRjYXN0VG8oKS5leGVjdXRlKCk7XG4gICAgY29uc3QgYXV0b0luY3JlbWVudENvbCA9IGNyZWF0ZVNxbFswXT8uc3FsPy5zcGxpdCgvW1xcKFxcKSxdLyk/LmZpbmQoKGl0KSA9PiBpdC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwiYXV0b2luY3JlbWVudFwiKSk/LnNwbGl0KC9cXHMrLyk/LlswXT8ucmVwbGFjZSgvW1wiYF0vZywgXCJcIik7XG4gICAgY29uc3QgY29sdW1ucyA9IGF3YWl0IGRiLnNlbGVjdEZyb20oXG4gICAgICBzcWxgcHJhZ21hX3RhYmxlX2luZm8oJHt0YWJsZX0pYC5hcyhcInRhYmxlX2luZm9cIilcbiAgICApLnNlbGVjdChbXCJuYW1lXCIsIFwidHlwZVwiLCBcIm5vdG51bGxcIiwgXCJkZmx0X3ZhbHVlXCJdKS5leGVjdXRlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRhYmxlLFxuICAgICAgY29sdW1uczogY29sdW1ucy5tYXAoKGNvbCkgPT4gKHtcbiAgICAgICAgbmFtZTogY29sLm5hbWUsXG4gICAgICAgIGRhdGFUeXBlOiBjb2wudHlwZSxcbiAgICAgICAgaXNOdWxsYWJsZTogIWNvbC5ub3RudWxsLFxuICAgICAgICBpc0F1dG9JbmNyZW1lbnRpbmc6IGNvbC5uYW1lID09PSBhdXRvSW5jcmVtZW50Q29sLFxuICAgICAgICBoYXNEZWZhdWx0VmFsdWU6IGNvbC5kZmx0X3ZhbHVlICE9IG51bGxcbiAgICAgIH0pKSxcbiAgICAgIGlzVmlldzogdHJ1ZVxuICAgIH07XG4gIH1cbn1cbmNsYXNzIEJ1blNxbGl0ZVF1ZXJ5Q29tcGlsZXIgZXh0ZW5kcyBEZWZhdWx0UXVlcnlDb21waWxlciB7XG4gIGdldEN1cnJlbnRQYXJhbWV0ZXJQbGFjZWhvbGRlcigpIHtcbiAgICByZXR1cm4gXCI/XCI7XG4gIH1cbiAgZ2V0TGVmdElkZW50aWZpZXJXcmFwcGVyKCkge1xuICAgIHJldHVybiAnXCInO1xuICB9XG4gIGdldFJpZ2h0SWRlbnRpZmllcldyYXBwZXIoKSB7XG4gICAgcmV0dXJuICdcIic7XG4gIH1cbiAgZ2V0QXV0b0luY3JlbWVudCgpIHtcbiAgICByZXR1cm4gXCJhdXRvaW5jcmVtZW50XCI7XG4gIH1cbn1cbmNsYXNzIEJ1blNxbGl0ZURpYWxlY3Qge1xuICAjY29uZmlnO1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLiNjb25maWcgPSB7IC4uLmNvbmZpZyB9O1xuICB9XG4gIGNyZWF0ZURyaXZlcigpIHtcbiAgICByZXR1cm4gbmV3IEJ1blNxbGl0ZURyaXZlcih0aGlzLiNjb25maWcpO1xuICB9XG4gIGNyZWF0ZVF1ZXJ5Q29tcGlsZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBCdW5TcWxpdGVRdWVyeUNvbXBpbGVyKCk7XG4gIH1cbiAgY3JlYXRlQWRhcHRlcigpIHtcbiAgICByZXR1cm4gbmV3IEJ1blNxbGl0ZUFkYXB0ZXIoKTtcbiAgfVxuICBjcmVhdGVJbnRyb3NwZWN0b3IoZGIpIHtcbiAgICByZXR1cm4gbmV3IEJ1blNxbGl0ZUludHJvc3BlY3RvcihkYik7XG4gIH1cbn1cblxuZXhwb3J0IHsgQnVuU3FsaXRlQWRhcHRlciwgQnVuU3FsaXRlRGlhbGVjdCwgQnVuU3FsaXRlRHJpdmVyLCBCdW5TcWxpdGVJbnRyb3NwZWN0b3IsIEJ1blNxbGl0ZVF1ZXJ5Q29tcGlsZXIgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/cookies/index.mjs":
/*!*************************************************************!*\
  !*** ../../node_modules/better-auth/dist/cookies/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCookieGetter: () => (/* binding */ createCookieGetter),\n/* harmony export */   deleteSessionCookie: () => (/* binding */ deleteSessionCookie),\n/* harmony export */   getCookieCache: () => (/* binding */ getCookieCache),\n/* harmony export */   getCookies: () => (/* binding */ getCookies),\n/* harmony export */   getSessionCookie: () => (/* binding */ getSessionCookie),\n/* harmony export */   parseCookies: () => (/* binding */ parseCookies),\n/* harmony export */   parseSetCookieHeader: () => (/* binding */ parseSetCookieHeader),\n/* harmony export */   setCookieCache: () => (/* binding */ setCookieCache),\n/* harmony export */   setCookieToHeader: () => (/* binding */ setCookieToHeader),\n/* harmony export */   setSessionCookie: () => (/* binding */ setSessionCookie)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/better-auth.8zoxzg-F.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/better-auth.VTXNLFMT.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/../../node_modules/@better-auth/utils/dist/binary.mjs\");\n\n\n\n\n\n\n\n\n\nconst createTime = (value, format) => {\n  const toMilliseconds = () => {\n    switch (format) {\n      case \"ms\":\n        return value;\n      case \"s\":\n        return value * 1e3;\n      case \"m\":\n        return value * 1e3 * 60;\n      case \"h\":\n        return value * 1e3 * 60 * 60;\n      case \"d\":\n        return value * 1e3 * 60 * 60 * 24;\n      case \"w\":\n        return value * 1e3 * 60 * 60 * 24 * 7;\n      case \"y\":\n        return value * 1e3 * 60 * 60 * 24 * 365;\n    }\n  };\n  const time = {\n    t: `${value}${format}`,\n    value,\n    tFormat: format,\n    toMilliseconds,\n    toSeconds: () => time.toMilliseconds() / 1e3,\n    toMinutes: () => time.toSeconds() / 60,\n    toHours: () => time.toMinutes() / 60,\n    toDays: () => time.toHours() / 24,\n    toWeeks: () => time.toDays() / 7,\n    toYears: () => time.toDays() / 365,\n    getDate: () => new Date(Date.now() + time.toMilliseconds()),\n    add: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return createTime(time.toMilliseconds() + otherMs, \"ms\");\n    },\n    subtract: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return createTime(time.toMilliseconds() - otherMs, \"ms\");\n    },\n    multiply: (factor) => createTime(time.toMilliseconds() * factor, \"ms\"),\n    divide: (divisor) => createTime(time.toMilliseconds() / divisor, \"ms\"),\n    equals: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() === otherMs;\n    },\n    lessThan: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() < otherMs;\n    },\n    greaterThan: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() > otherMs;\n    },\n    format: (pattern) => {\n      const date = time.getDate();\n      return pattern.replace(/YYYY|MM|DD|HH|mm|ss/g, (match) => {\n        switch (match) {\n          case \"YYYY\":\n            return date.getFullYear().toString();\n          case \"MM\":\n            return (date.getMonth() + 1).toString().padStart(2, \"0\");\n          case \"DD\":\n            return date.getDate().toString().padStart(2, \"0\");\n          case \"HH\":\n            return date.getHours().toString().padStart(2, \"0\");\n          case \"mm\":\n            return date.getMinutes().toString().padStart(2, \"0\");\n          case \"ss\":\n            return date.getSeconds().toString().padStart(2, \"0\");\n          default:\n            return match;\n        }\n      });\n    },\n    fromNow: () => {\n      const ms = time.toMilliseconds();\n      if (ms < 0) return time.ago();\n      if (ms < 1e3) return \"in a few seconds\";\n      if (ms < 6e4) return `in ${Math.round(ms / 1e3)} seconds`;\n      if (ms < 36e5) return `in ${Math.round(ms / 6e4)} minutes`;\n      if (ms < 864e5) return `in ${Math.round(ms / 36e5)} hours`;\n      if (ms < 6048e5) return `in ${Math.round(ms / 864e5)} days`;\n      if (ms < 26298e5) return `in ${Math.round(ms / 6048e5)} weeks`;\n      if (ms < 315576e5) return `in ${Math.round(ms / 26298e5)} months`;\n      return `in ${Math.round(ms / 315576e5)} years`;\n    },\n    ago: () => {\n      const ms = -time.toMilliseconds();\n      if (ms < 0) return time.fromNow();\n      if (ms < 1e3) return \"a few seconds ago\";\n      if (ms < 6e4) return `${Math.round(ms / 1e3)} seconds ago`;\n      if (ms < 36e5) return `${Math.round(ms / 6e4)} minutes ago`;\n      if (ms < 864e5) return `${Math.round(ms / 36e5)} hours ago`;\n      if (ms < 6048e5) return `${Math.round(ms / 864e5)} days ago`;\n      if (ms < 26298e5) return `${Math.round(ms / 6048e5)} weeks ago`;\n      if (ms < 315576e5) return `${Math.round(ms / 26298e5)} months ago`;\n      return `${Math.round(ms / 315576e5)} years ago`;\n    }\n  };\n  return time;\n};\nconst parseTime = (time) => {\n  const match = time.match(/^(\\d+)(ms|s|m|h|d|w|y)$/);\n  if (!match) throw new Error(\"Invalid time format\");\n  return createTime(parseInt(match[1]), match[2]);\n};\n\nfunction parseSetCookieHeader(setCookie) {\n  const cookies = /* @__PURE__ */ new Map();\n  const cookieArray = setCookie.split(\", \");\n  cookieArray.forEach((cookieString) => {\n    const parts = cookieString.split(\";\").map((part) => part.trim());\n    const [nameValue, ...attributes] = parts;\n    const [name, ...valueParts] = nameValue.split(\"=\");\n    const value = valueParts.join(\"=\");\n    if (!name || value === void 0) {\n      return;\n    }\n    const attrObj = { value };\n    attributes.forEach((attribute) => {\n      const [attrName, ...attrValueParts] = attribute.split(\"=\");\n      const attrValue = attrValueParts.join(\"=\");\n      const normalizedAttrName = attrName.trim().toLowerCase();\n      switch (normalizedAttrName) {\n        case \"max-age\":\n          attrObj[\"max-age\"] = attrValue ? parseInt(attrValue.trim(), 10) : void 0;\n          break;\n        case \"expires\":\n          attrObj.expires = attrValue ? new Date(attrValue.trim()) : void 0;\n          break;\n        case \"domain\":\n          attrObj.domain = attrValue ? attrValue.trim() : void 0;\n          break;\n        case \"path\":\n          attrObj.path = attrValue ? attrValue.trim() : void 0;\n          break;\n        case \"secure\":\n          attrObj.secure = true;\n          break;\n        case \"httponly\":\n          attrObj.httponly = true;\n          break;\n        case \"samesite\":\n          attrObj.samesite = attrValue ? attrValue.trim().toLowerCase() : void 0;\n          break;\n        default:\n          attrObj[normalizedAttrName] = attrValue ? attrValue.trim() : true;\n          break;\n      }\n    });\n    cookies.set(name, attrObj);\n  });\n  return cookies;\n}\nfunction setCookieToHeader(headers) {\n  return (context) => {\n    const setCookieHeader = context.response.headers.get(\"set-cookie\");\n    if (!setCookieHeader) {\n      return;\n    }\n    const cookieMap = /* @__PURE__ */ new Map();\n    const existingCookiesHeader = headers.get(\"cookie\") || \"\";\n    existingCookiesHeader.split(\";\").forEach((cookie) => {\n      const [name, ...rest] = cookie.trim().split(\"=\");\n      if (name && rest.length > 0) {\n        cookieMap.set(name, rest.join(\"=\"));\n      }\n    });\n    const setCookieHeaders = setCookieHeader.split(\",\");\n    setCookieHeaders.forEach((header) => {\n      const cookies = parseSetCookieHeader(header);\n      cookies.forEach((value, name) => {\n        cookieMap.set(name, value.value);\n      });\n    });\n    const updatedCookies = Array.from(cookieMap.entries()).map(([name, value]) => `${name}=${value}`).join(\"; \");\n    headers.set(\"cookie\", updatedCookies);\n  };\n}\n\nfunction createCookieGetter(options) {\n  const secure = options.advanced?.useSecureCookies !== void 0 ? options.advanced?.useSecureCookies : options.baseURL !== void 0 ? options.baseURL.startsWith(\"https://\") ? true : false : _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.a;\n  const secureCookiePrefix = secure ? \"__Secure-\" : \"\";\n  const crossSubdomainEnabled = !!options.advanced?.crossSubDomainCookies?.enabled;\n  const domain = crossSubdomainEnabled ? options.advanced?.crossSubDomainCookies?.domain || (options.baseURL ? new URL(options.baseURL).hostname : void 0) : void 0;\n  if (crossSubdomainEnabled && !domain) {\n    throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n      \"baseURL is required when crossSubdomainCookies are enabled\"\n    );\n  }\n  function createCookie(cookieName, overrideAttributes = {}) {\n    const prefix = options.advanced?.cookiePrefix || \"better-auth\";\n    const name = options.advanced?.cookies?.[cookieName]?.name || `${prefix}.${cookieName}`;\n    const attributes = options.advanced?.cookies?.[cookieName]?.attributes;\n    return {\n      name: `${secureCookiePrefix}${name}`,\n      attributes: {\n        secure: !!secureCookiePrefix,\n        sameSite: \"lax\",\n        path: \"/\",\n        httpOnly: true,\n        ...crossSubdomainEnabled ? { domain } : {},\n        ...options.advanced?.defaultCookieAttributes,\n        ...overrideAttributes,\n        ...attributes\n      }\n    };\n  }\n  return createCookie;\n}\nfunction getCookies(options) {\n  const createCookie = createCookieGetter(options);\n  const sessionMaxAge = options.session?.expiresIn || createTime(7, \"d\").toSeconds();\n  const sessionToken = createCookie(\"session_token\", {\n    maxAge: sessionMaxAge\n  });\n  const sessionData = createCookie(\"session_data\", {\n    maxAge: options.session?.cookieCache?.maxAge || 60 * 5\n  });\n  const dontRememberToken = createCookie(\"dont_remember\");\n  return {\n    sessionToken: {\n      name: sessionToken.name,\n      options: sessionToken.attributes\n    },\n    /**\n     * This cookie is used to store the session data in the cookie\n     * This is useful for when you want to cache the session in the cookie\n     */\n    sessionData: {\n      name: sessionData.name,\n      options: sessionData.attributes\n    },\n    dontRememberToken: {\n      name: dontRememberToken.name,\n      options: dontRememberToken.attributes\n    }\n  };\n}\nasync function setCookieCache(ctx, session) {\n  const shouldStoreSessionDataInCookie = ctx.context.options.session?.cookieCache?.enabled;\n  if (shouldStoreSessionDataInCookie) {\n    const filteredSession = Object.entries(session.session).reduce(\n      (acc, [key, value]) => {\n        const fieldConfig = ctx.context.options.session?.additionalFields?.[key];\n        if (!fieldConfig || fieldConfig.returned !== false) {\n          acc[key] = value;\n        }\n        return acc;\n      },\n      {}\n    );\n    const sessionData = { session: filteredSession, user: session.user };\n    const expiresAtDate = (0,_shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(\n      ctx.context.authCookies.sessionData.options.maxAge || 60,\n      \"sec\"\n    ).getTime();\n    const data = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.encode(\n      JSON.stringify({\n        session: sessionData,\n        expiresAt: expiresAtDate,\n        signature: await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__.createHMAC)(\"SHA-256\", \"base64urlnopad\").sign(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionData,\n            expiresAt: expiresAtDate\n          })\n        )\n      }),\n      {\n        padding: false\n      }\n    );\n    if (data.length > 4093) {\n      throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n        \"Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data\"\n      );\n    }\n    ctx.setCookie(\n      ctx.context.authCookies.sessionData.name,\n      data,\n      ctx.context.authCookies.sessionData.options\n    );\n  }\n}\nasync function setSessionCookie(ctx, session, dontRememberMe, overrides) {\n  const dontRememberMeCookie = await ctx.getSignedCookie(\n    ctx.context.authCookies.dontRememberToken.name,\n    ctx.context.secret\n  );\n  dontRememberMe = dontRememberMe !== void 0 ? dontRememberMe : !!dontRememberMeCookie;\n  const options = ctx.context.authCookies.sessionToken.options;\n  const maxAge = dontRememberMe ? void 0 : ctx.context.sessionConfig.expiresIn;\n  await ctx.setSignedCookie(\n    ctx.context.authCookies.sessionToken.name,\n    session.session.token,\n    ctx.context.secret,\n    {\n      ...options,\n      maxAge,\n      ...overrides\n    }\n  );\n  if (dontRememberMe) {\n    await ctx.setSignedCookie(\n      ctx.context.authCookies.dontRememberToken.name,\n      \"true\",\n      ctx.context.secret,\n      ctx.context.authCookies.dontRememberToken.options\n    );\n  }\n  await setCookieCache(ctx, session);\n  ctx.context.setNewSession(session);\n  if (ctx.context.options.secondaryStorage) {\n    await ctx.context.secondaryStorage?.set(\n      session.session.token,\n      JSON.stringify({\n        user: session.user,\n        session: session.session\n      }),\n      Math.floor(\n        (new Date(session.session.expiresAt).getTime() - Date.now()) / 1e3\n      )\n    );\n  }\n}\nfunction deleteSessionCookie(ctx, skipDontRememberMe) {\n  ctx.setCookie(ctx.context.authCookies.sessionToken.name, \"\", {\n    ...ctx.context.authCookies.sessionToken.options,\n    maxAge: 0\n  });\n  ctx.setCookie(ctx.context.authCookies.sessionData.name, \"\", {\n    ...ctx.context.authCookies.sessionData.options,\n    maxAge: 0\n  });\n  if (!skipDontRememberMe) {\n    ctx.setCookie(ctx.context.authCookies.dontRememberToken.name, \"\", {\n      ...ctx.context.authCookies.dontRememberToken.options,\n      maxAge: 0\n    });\n  }\n}\nfunction parseCookies(cookieHeader) {\n  const cookies = cookieHeader.split(\"; \");\n  const cookieMap = /* @__PURE__ */ new Map();\n  cookies.forEach((cookie) => {\n    const [name, value] = cookie.split(\"=\");\n    cookieMap.set(name, value);\n  });\n  return cookieMap;\n}\nconst getSessionCookie = (request, config) => {\n  if (config?.cookiePrefix) {\n    if (config.cookieName) {\n      config.cookiePrefix = `${config.cookiePrefix}-`;\n    } else {\n      config.cookiePrefix = `${config.cookiePrefix}.`;\n    }\n  }\n  const headers = \"headers\" in request ? request.headers : request;\n  const req = request instanceof Request ? request : void 0;\n  (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_6__.a)(req?.url, config?.path, req);\n  const cookies = headers.get(\"cookie\");\n  if (!cookies) {\n    return null;\n  }\n  const { cookieName = \"session_token\", cookiePrefix = \"better-auth.\" } = config || {};\n  const name = `${cookiePrefix}${cookieName}`;\n  const secureCookieName = `__Secure-${name}`;\n  const parsedCookie = parseCookies(cookies);\n  const sessionToken = parsedCookie.get(name) || parsedCookie.get(secureCookieName);\n  if (sessionToken) {\n    return sessionToken;\n  }\n  return null;\n};\nconst getCookieCache = async (request, config) => {\n  const headers = request instanceof Headers ? request : request.headers;\n  const cookies = headers.get(\"cookie\");\n  if (!cookies) {\n    return null;\n  }\n  const { cookieName = \"session_data\", cookiePrefix = \"better-auth\" } = config || {};\n  const name = config?.isSecure !== void 0 ? config.isSecure ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}` : _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.a ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}`;\n  const parsedCookie = parseCookies(cookies);\n  const sessionData = parsedCookie.get(name);\n  if (sessionData) {\n    const sessionDataPayload = (0,_shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_5__.s)(_better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__.binary.decode(_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.decode(sessionData)));\n    if (!sessionDataPayload) {\n      return null;\n    }\n    const secret = config?.secret || _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.e.BETTER_AUTH_SECRET;\n    if (!secret) {\n      throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n        \"getCookieCache requires a secret to be provided. Either pass it as an option or set the BETTER_AUTH_SECRET environment variable\"\n      );\n    }\n    const isValid = await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__.createHMAC)(\"SHA-256\", \"base64urlnopad\").verify(\n      secret,\n      JSON.stringify({\n        ...sessionDataPayload.session,\n        expiresAt: sessionDataPayload.expiresAt\n      }),\n      sessionDataPayload.signature\n    );\n    if (!isValid) {\n      return null;\n    }\n    return sessionDataPayload.session;\n  }\n  return null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/cookies/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/crypto/index.mjs":
/*!************************************************************!*\
  !*** ../../node_modules/better-auth/dist/crypto/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareHash: () => (/* binding */ compareHash),\n/* harmony export */   constantTimeEqual: () => (/* binding */ constantTimeEqual),\n/* harmony export */   generateRandomString: () => (/* reexport safe */ _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_4__.g),\n/* harmony export */   hashPassword: () => (/* binding */ hashPassword),\n/* harmony export */   hashToBase64: () => (/* binding */ hashToBase64),\n/* harmony export */   signJWT: () => (/* binding */ signJWT),\n/* harmony export */   symmetricDecrypt: () => (/* binding */ symmetricDecrypt),\n/* harmony export */   symmetricEncrypt: () => (/* binding */ symmetricEncrypt),\n/* harmony export */   verifyPassword: () => (/* binding */ verifyPassword)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @noble/ciphers/chacha */ \"(rsc)/../../node_modules/@noble/ciphers/esm/chacha.js\");\n/* harmony import */ var _noble_ciphers_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @noble/ciphers/utils */ \"(rsc)/../../node_modules/@noble/ciphers/esm/utils.js\");\n/* harmony import */ var _noble_ciphers_webcrypto__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @noble/ciphers/webcrypto */ \"(rsc)/../../node_modules/@noble/ciphers/esm/webcrypto.js\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jose */ \"(rsc)/../../node_modules/jose/dist/node/esm/jwt/sign.js\");\n/* harmony import */ var _noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @noble/hashes/scrypt */ \"(rsc)/../../node_modules/@noble/hashes/esm/scrypt.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @noble/hashes/utils */ \"(rsc)/../../node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function signJWT(payload, secret, expiresIn = 3600) {\n  const jwt = await new jose__WEBPACK_IMPORTED_MODULE_6__.SignJWT(payload).setProtectedHeader({ alg: \"HS256\" }).setIssuedAt().setExpirationTime(Math.floor(Date.now() / 1e3) + expiresIn).sign(new TextEncoder().encode(secret));\n  return jwt;\n}\n\nfunction constantTimeEqual(a, b) {\n  const aBuffer = new Uint8Array(a);\n  const bBuffer = new Uint8Array(b);\n  if (aBuffer.length !== bBuffer.length) {\n    return false;\n  }\n  let c = 0;\n  for (let i = 0; i < aBuffer.length; i++) {\n    c |= aBuffer[i] ^ bBuffer[i];\n  }\n  return c === 0;\n}\n\nasync function hashToBase64(data) {\n  const buffer = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(data);\n  return _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__.base64.encode(buffer);\n}\nasync function compareHash(data, hash) {\n  const buffer = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(\n    typeof data === \"string\" ? new TextEncoder().encode(data) : data\n  );\n  const hashBuffer = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_1__.base64.decode(hash);\n  return constantTimeEqual(buffer, hashBuffer);\n}\n\nconst config = {\n  N: 16384,\n  r: 16,\n  p: 1,\n  dkLen: 64\n};\nasync function generateKey(password, salt) {\n  return await (0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_7__.scryptAsync)(password.normalize(\"NFKC\"), salt, {\n    N: config.N,\n    p: config.p,\n    r: config.r,\n    dkLen: config.dkLen,\n    maxmem: 128 * config.N * config.r * 2\n  });\n}\nconst hashPassword = async (password) => {\n  const salt = _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_3__.hex.encode((0,_better_auth_utils__WEBPACK_IMPORTED_MODULE_2__.getRandomValues)(new Uint8Array(16)));\n  const key = await generateKey(password, salt);\n  return `${salt}:${_better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_3__.hex.encode(key)}`;\n};\nconst verifyPassword = async ({\n  hash,\n  password\n}) => {\n  const [salt, key] = hash.split(\":\");\n  const targetKey = await generateKey(password, salt);\n  return constantTimeEqual(targetKey, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_8__.hexToBytes)(key));\n};\n\nconst symmetricEncrypt = async ({\n  key,\n  data\n}) => {\n  const keyAsBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(key);\n  const dataAsBytes = (0,_noble_ciphers_utils__WEBPACK_IMPORTED_MODULE_9__.utf8ToBytes)(data);\n  const chacha = (0,_noble_ciphers_webcrypto__WEBPACK_IMPORTED_MODULE_10__.managedNonce)(_noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_11__.xchacha20poly1305)(new Uint8Array(keyAsBytes));\n  return (0,_noble_ciphers_utils__WEBPACK_IMPORTED_MODULE_9__.bytesToHex)(chacha.encrypt(dataAsBytes));\n};\nconst symmetricDecrypt = async ({\n  key,\n  data\n}) => {\n  const keyAsBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"SHA-256\").digest(key);\n  const dataAsBytes = (0,_noble_ciphers_utils__WEBPACK_IMPORTED_MODULE_9__.hexToBytes)(data);\n  const chacha = (0,_noble_ciphers_webcrypto__WEBPACK_IMPORTED_MODULE_10__.managedNonce)(_noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_11__.xchacha20poly1305)(new Uint8Array(keyAsBytes));\n  return new TextDecoder().decode(chacha.decrypt(dataAsBytes));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3QvY3J5cHRvL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcUQ7QUFDSztBQUNpQztBQUNuQztBQUNMO0FBQ3BCO0FBQ29CO0FBQ0U7QUFDUjtBQUNJO0FBQzhCO0FBQzVDOztBQUVuQztBQUNBLHdCQUF3Qix5Q0FBTywrQkFBK0IsY0FBYztBQUM1RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixtRUFBVTtBQUNqQyxTQUFTLDZEQUFNO0FBQ2Y7QUFDQTtBQUNBLHVCQUF1QixtRUFBVTtBQUNqQztBQUNBO0FBQ0EscUJBQXFCLDZEQUFNO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlFQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGVBQWUsdURBQUcsUUFBUSxtRUFBZTtBQUN6QztBQUNBLFlBQVksS0FBSyxHQUFHLHVEQUFHLGFBQWE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLHNDQUFzQywrREFBVTtBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsMkJBQTJCLG1FQUFVO0FBQ3JDLHNCQUFzQixpRUFBVztBQUNqQyxpQkFBaUIsdUVBQVksQ0FBQyxxRUFBaUI7QUFDL0MsU0FBUyxnRUFBVTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCwyQkFBMkIsbUVBQVU7QUFDckMsc0JBQXNCLGdFQUFZO0FBQ2xDLGlCQUFpQix1RUFBWSxDQUFDLHFFQUFpQjtBQUMvQztBQUNBOztBQUVtSSIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jcnlwdG8vaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdAYmV0dGVyLWF1dGgvdXRpbHMvaGFzaCc7XG5pbXBvcnQgeyB4Y2hhY2hhMjBwb2x5MTMwNSB9IGZyb20gJ0Bub2JsZS9jaXBoZXJzL2NoYWNoYSc7XG5pbXBvcnQgeyB1dGY4VG9CeXRlcywgYnl0ZXNUb0hleCwgaGV4VG9CeXRlcyBhcyBoZXhUb0J5dGVzJDEgfSBmcm9tICdAbm9ibGUvY2lwaGVycy91dGlscyc7XG5pbXBvcnQgeyBtYW5hZ2VkTm9uY2UgfSBmcm9tICdAbm9ibGUvY2lwaGVycy93ZWJjcnlwdG8nO1xuaW1wb3J0IHsgYmFzZTY0IH0gZnJvbSAnQGJldHRlci1hdXRoL3V0aWxzL2Jhc2U2NCc7XG5pbXBvcnQgeyBTaWduSldUIH0gZnJvbSAnam9zZSc7XG5pbXBvcnQgeyBzY3J5cHRBc3luYyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2NyeXB0JztcbmltcG9ydCB7IGdldFJhbmRvbVZhbHVlcyB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscyc7XG5pbXBvcnQgeyBoZXggfSBmcm9tICdAYmV0dGVyLWF1dGgvdXRpbHMvaGV4JztcbmltcG9ydCB7IGhleFRvQnl0ZXMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3V0aWxzJztcbmV4cG9ydCB7IGcgYXMgZ2VuZXJhdGVSYW5kb21TdHJpbmcgfSBmcm9tICcuLi9zaGFyZWQvYmV0dGVyLWF1dGguQjRRb3hkZ2MubWpzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL3JhbmRvbSc7XG5cbmFzeW5jIGZ1bmN0aW9uIHNpZ25KV1QocGF5bG9hZCwgc2VjcmV0LCBleHBpcmVzSW4gPSAzNjAwKSB7XG4gIGNvbnN0IGp3dCA9IGF3YWl0IG5ldyBTaWduSldUKHBheWxvYWQpLnNldFByb3RlY3RlZEhlYWRlcih7IGFsZzogXCJIUzI1NlwiIH0pLnNldElzc3VlZEF0KCkuc2V0RXhwaXJhdGlvblRpbWUoTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMWUzKSArIGV4cGlyZXNJbikuc2lnbihuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc2VjcmV0KSk7XG4gIHJldHVybiBqd3Q7XG59XG5cbmZ1bmN0aW9uIGNvbnN0YW50VGltZUVxdWFsKGEsIGIpIHtcbiAgY29uc3QgYUJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGEpO1xuICBjb25zdCBiQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYik7XG4gIGlmIChhQnVmZmVyLmxlbmd0aCAhPT0gYkJ1ZmZlci5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGMgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICBjIHw9IGFCdWZmZXJbaV0gXiBiQnVmZmVyW2ldO1xuICB9XG4gIHJldHVybiBjID09PSAwO1xufVxuXG5hc3luYyBmdW5jdGlvbiBoYXNoVG9CYXNlNjQoZGF0YSkge1xuICBjb25zdCBidWZmZXIgPSBhd2FpdCBjcmVhdGVIYXNoKFwiU0hBLTI1NlwiKS5kaWdlc3QoZGF0YSk7XG4gIHJldHVybiBiYXNlNjQuZW5jb2RlKGJ1ZmZlcik7XG59XG5hc3luYyBmdW5jdGlvbiBjb21wYXJlSGFzaChkYXRhLCBoYXNoKSB7XG4gIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGNyZWF0ZUhhc2goXCJTSEEtMjU2XCIpLmRpZ2VzdChcbiAgICB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiA/IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShkYXRhKSA6IGRhdGFcbiAgKTtcbiAgY29uc3QgaGFzaEJ1ZmZlciA9IGJhc2U2NC5kZWNvZGUoaGFzaCk7XG4gIHJldHVybiBjb25zdGFudFRpbWVFcXVhbChidWZmZXIsIGhhc2hCdWZmZXIpO1xufVxuXG5jb25zdCBjb25maWcgPSB7XG4gIE46IDE2Mzg0LFxuICByOiAxNixcbiAgcDogMSxcbiAgZGtMZW46IDY0XG59O1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVLZXkocGFzc3dvcmQsIHNhbHQpIHtcbiAgcmV0dXJuIGF3YWl0IHNjcnlwdEFzeW5jKHBhc3N3b3JkLm5vcm1hbGl6ZShcIk5GS0NcIiksIHNhbHQsIHtcbiAgICBOOiBjb25maWcuTixcbiAgICBwOiBjb25maWcucCxcbiAgICByOiBjb25maWcucixcbiAgICBka0xlbjogY29uZmlnLmRrTGVuLFxuICAgIG1heG1lbTogMTI4ICogY29uZmlnLk4gKiBjb25maWcuciAqIDJcbiAgfSk7XG59XG5jb25zdCBoYXNoUGFzc3dvcmQgPSBhc3luYyAocGFzc3dvcmQpID0+IHtcbiAgY29uc3Qgc2FsdCA9IGhleC5lbmNvZGUoZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDE2KSkpO1xuICBjb25zdCBrZXkgPSBhd2FpdCBnZW5lcmF0ZUtleShwYXNzd29yZCwgc2FsdCk7XG4gIHJldHVybiBgJHtzYWx0fToke2hleC5lbmNvZGUoa2V5KX1gO1xufTtcbmNvbnN0IHZlcmlmeVBhc3N3b3JkID0gYXN5bmMgKHtcbiAgaGFzaCxcbiAgcGFzc3dvcmRcbn0pID0+IHtcbiAgY29uc3QgW3NhbHQsIGtleV0gPSBoYXNoLnNwbGl0KFwiOlwiKTtcbiAgY29uc3QgdGFyZ2V0S2V5ID0gYXdhaXQgZ2VuZXJhdGVLZXkocGFzc3dvcmQsIHNhbHQpO1xuICByZXR1cm4gY29uc3RhbnRUaW1lRXF1YWwodGFyZ2V0S2V5LCBoZXhUb0J5dGVzKGtleSkpO1xufTtcblxuY29uc3Qgc3ltbWV0cmljRW5jcnlwdCA9IGFzeW5jICh7XG4gIGtleSxcbiAgZGF0YVxufSkgPT4ge1xuICBjb25zdCBrZXlBc0J5dGVzID0gYXdhaXQgY3JlYXRlSGFzaChcIlNIQS0yNTZcIikuZGlnZXN0KGtleSk7XG4gIGNvbnN0IGRhdGFBc0J5dGVzID0gdXRmOFRvQnl0ZXMoZGF0YSk7XG4gIGNvbnN0IGNoYWNoYSA9IG1hbmFnZWROb25jZSh4Y2hhY2hhMjBwb2x5MTMwNSkobmV3IFVpbnQ4QXJyYXkoa2V5QXNCeXRlcykpO1xuICByZXR1cm4gYnl0ZXNUb0hleChjaGFjaGEuZW5jcnlwdChkYXRhQXNCeXRlcykpO1xufTtcbmNvbnN0IHN5bW1ldHJpY0RlY3J5cHQgPSBhc3luYyAoe1xuICBrZXksXG4gIGRhdGFcbn0pID0+IHtcbiAgY29uc3Qga2V5QXNCeXRlcyA9IGF3YWl0IGNyZWF0ZUhhc2goXCJTSEEtMjU2XCIpLmRpZ2VzdChrZXkpO1xuICBjb25zdCBkYXRhQXNCeXRlcyA9IGhleFRvQnl0ZXMkMShkYXRhKTtcbiAgY29uc3QgY2hhY2hhID0gbWFuYWdlZE5vbmNlKHhjaGFjaGEyMHBvbHkxMzA1KShuZXcgVWludDhBcnJheShrZXlBc0J5dGVzKSk7XG4gIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoY2hhY2hhLmRlY3J5cHQoZGF0YUFzQnl0ZXMpKTtcbn07XG5cbmV4cG9ydCB7IGNvbXBhcmVIYXNoLCBjb25zdGFudFRpbWVFcXVhbCwgaGFzaFBhc3N3b3JkLCBoYXNoVG9CYXNlNjQsIHNpZ25KV1QsIHN5bW1ldHJpY0RlY3J5cHQsIHN5bW1ldHJpY0VuY3J5cHQsIHZlcmlmeVBhc3N3b3JkIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/crypto/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/index.mjs":
/*!*****************************************************!*\
  !*** ../../node_modules/better-auth/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetterAuthError: () => (/* reexport safe */ _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B),\n/* harmony export */   HIDE_METADATA: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_3__.H),\n/* harmony export */   MissingDependencyError: () => (/* reexport safe */ _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.M),\n/* harmony export */   betterAuth: () => (/* reexport safe */ _shared_better_auth_Cbhy6WDJ_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   capitalizeFirstLetter: () => (/* reexport safe */ _shared_better_auth_D_2CmEwz_mjs__WEBPACK_IMPORTED_MODULE_2__.c),\n/* harmony export */   createLogger: () => (/* reexport safe */ _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.c),\n/* harmony export */   generateId: () => (/* reexport safe */ _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.g),\n/* harmony export */   generateState: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_3__.g),\n/* harmony export */   levels: () => (/* reexport safe */ _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.l),\n/* harmony export */   logger: () => (/* reexport safe */ _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.a),\n/* harmony export */   parseState: () => (/* reexport safe */ _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_3__.p),\n/* harmony export */   shouldPublishLog: () => (/* reexport safe */ _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.s)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_Cbhy6WDJ_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared/better-auth.Cbhy6WDJ.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.Cbhy6WDJ.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_D_2CmEwz_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/better-auth.D-2CmEwz.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs\");\n/* harmony import */ var _shared_better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/better-auth.z3dsxLxE.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs\");\n/* harmony import */ var _shared_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared/better-auth.DBGfIDnh.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _api_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./api/index.mjs */ \"(rsc)/../../node_modules/better-auth/dist/api/index.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! better-call */ \"(rsc)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cookies/index.mjs */ \"(rsc)/../../node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./shared/better-auth.8zoxzg-F.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./shared/better-auth.VTXNLFMT.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/../../node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _shared_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./shared/better-auth.n2KFGwjY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\");\n/* harmony import */ var _shared_better_auth_DcfNPS8q_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./shared/better-auth.DcfNPS8q.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! defu */ \"(rsc)/../../node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./crypto/index.mjs */ \"(rsc)/../../node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _shared_better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./shared/better-auth.ByruPN9q.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs\");\n/* harmony import */ var _shared_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./shared/better-auth.DORkW_Ge.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _shared_better_auth_DwzM_9N1_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./shared/better-auth.DwzM-9N1.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs\");\n/* harmony import */ var _shared_better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./shared/better-auth.gBl3F_xa.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs\");\n/* harmony import */ var _shared_better_auth_DGpadpzN_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./shared/better-auth.DGpadpzN.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs\");\n/* harmony import */ var _shared_better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./shared/better-auth.YwDQhoPc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/../../node_modules/@better-fetch/fetch/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBb0U7QUFDa0M7QUFDdkI7QUFDNkI7QUFDNEI7QUFDL0c7QUFDSjtBQUNMO0FBQ2E7QUFDYztBQUNBO0FBQ1I7QUFDRjtBQUNVO0FBQ0E7QUFDUjtBQUNRO0FBQ0E7QUFDN0I7QUFDYztBQUNLO0FBQ0Y7QUFDRDtBQUNJO0FBQ3BCO0FBQ2dCO0FBQ0Y7QUFDSTtBQUNIO0FBQ2M7QUFDUjtBQUNRO0FBQ0E7QUFDQTtBQUMzQjtBQUMyQjtBQUNBO0FBQ0E7QUFDZDtBQUNSIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBiIGFzIGJldHRlckF1dGggfSBmcm9tICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5DYmh5NldESi5tanMnO1xuZXhwb3J0IHsgQiBhcyBCZXR0ZXJBdXRoRXJyb3IsIE0gYXMgTWlzc2luZ0RlcGVuZGVuY3lFcnJvciB9IGZyb20gJy4vc2hhcmVkL2JldHRlci1hdXRoLkRkelNKZi1uLm1qcyc7XG5leHBvcnQgeyBjIGFzIGNhcGl0YWxpemVGaXJzdExldHRlciB9IGZyb20gJy4vc2hhcmVkL2JldHRlci1hdXRoLkQtMkNtRXd6Lm1qcyc7XG5leHBvcnQgeyBIIGFzIEhJREVfTUVUQURBVEEsIGcgYXMgZ2VuZXJhdGVTdGF0ZSwgcCBhcyBwYXJzZVN0YXRlIH0gZnJvbSAnLi9zaGFyZWQvYmV0dGVyLWF1dGguejNkc3hMeEUubWpzJztcbmV4cG9ydCB7IGMgYXMgY3JlYXRlTG9nZ2VyLCBnIGFzIGdlbmVyYXRlSWQsIGwgYXMgbGV2ZWxzLCBhIGFzIGxvZ2dlciwgcyBhcyBzaG91bGRQdWJsaXNoTG9nIH0gZnJvbSAnLi9zaGFyZWQvYmV0dGVyLWF1dGguREJHZklEbmgubWpzJztcbmltcG9ydCAnLi9hcGkvaW5kZXgubWpzJztcbmltcG9ydCAnYmV0dGVyLWNhbGwnO1xuaW1wb3J0ICd6b2QvdjQnO1xuaW1wb3J0ICcuL2Nvb2tpZXMvaW5kZXgubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguQ1c2RDllU3gubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguOHpveHpnLUYubWpzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2Jhc2U2NCc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9obWFjJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGgudEI1ZVU2RVkubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguVlRYTkxGTVQubWpzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2JpbmFyeSc7XG5pbXBvcnQgJy4vc2hhcmVkL2JldHRlci1hdXRoLm4yS0ZHd2pZLm1qcyc7XG5pbXBvcnQgJy4vc2hhcmVkL2JldHRlci1hdXRoLkRjZk5QUzhxLm1qcyc7XG5pbXBvcnQgJ2RlZnUnO1xuaW1wb3J0ICcuL2NyeXB0by9pbmRleC5tanMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaGFzaCc7XG5pbXBvcnQgJ0Bub2JsZS9jaXBoZXJzL2NoYWNoYSc7XG5pbXBvcnQgJ0Bub2JsZS9jaXBoZXJzL3V0aWxzJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvd2ViY3J5cHRvJztcbmltcG9ydCAnam9zZSc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvc2NyeXB0JztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2hleCc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0ICcuL3NoYXJlZC9iZXR0ZXItYXV0aC5CNFFveGRnYy5tanMnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvcmFuZG9tJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguQnlydVBOOXEubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguRE9Sa1dfR2UubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguRHd6TS05TjEubWpzJztcbmltcG9ydCAna3lzZWx5JztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguZ0JsM0ZfeGEubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguREdwYWRwek4ubWpzJztcbmltcG9ydCAnLi9zaGFyZWQvYmV0dGVyLWF1dGguWXdEUWhvUGMubWpzJztcbmltcG9ydCAnQGJldHRlci1mZXRjaC9mZXRjaCc7XG5pbXBvcnQgJ2pvc2UvZXJyb3JzJztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ isProduction),\n/* harmony export */   b: () => (/* binding */ isDevelopment),\n/* harmony export */   e: () => (/* binding */ env),\n/* harmony export */   i: () => (/* binding */ isTest)\n/* harmony export */ });\nconst _envShim = /* @__PURE__ */ Object.create(null);\nconst _getEnv = (useShim) => globalThis.process?.env || //@ts-expect-error\nglobalThis.Deno?.env.toObject() || //@ts-expect-error\nglobalThis.__env__ || (useShim ? _envShim : globalThis);\nconst env = new Proxy(_envShim, {\n  get(_, prop) {\n    const env2 = _getEnv();\n    return env2[prop] ?? _envShim[prop];\n  },\n  has(_, prop) {\n    const env2 = _getEnv();\n    return prop in env2 || prop in _envShim;\n  },\n  set(_, prop, value) {\n    const env2 = _getEnv(true);\n    env2[prop] = value;\n    return true;\n  },\n  deleteProperty(_, prop) {\n    if (!prop) {\n      return false;\n    }\n    const env2 = _getEnv(true);\n    delete env2[prop];\n    return true;\n  },\n  ownKeys() {\n    const env2 = _getEnv(true);\n    return Object.keys(env2);\n  }\n});\nfunction toBoolean(val) {\n  return val ? val !== \"false\" : false;\n}\nconst nodeENV = typeof process !== \"undefined\" && process.env && \"development\" || \"\";\nconst isProduction = nodeENV === \"production\";\nconst isDevelopment = nodeENV === \"dev\" || nodeENV === \"development\";\nconst isTest = nodeENV === \"test\" || toBoolean(env.TEST);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLjh6b3h6Zy1GLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLGFBQW9CO0FBQ3JGO0FBQ0E7QUFDQTs7QUFFd0UiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWxhbi9EZXNrdG9wL0FwcHMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLjh6b3h6Zy1GLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfZW52U2hpbSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3QgX2dldEVudiA9ICh1c2VTaGltKSA9PiBnbG9iYWxUaGlzLnByb2Nlc3M/LmVudiB8fCAvL0B0cy1leHBlY3QtZXJyb3Jcbmdsb2JhbFRoaXMuRGVubz8uZW52LnRvT2JqZWN0KCkgfHwgLy9AdHMtZXhwZWN0LWVycm9yXG5nbG9iYWxUaGlzLl9fZW52X18gfHwgKHVzZVNoaW0gPyBfZW52U2hpbSA6IGdsb2JhbFRoaXMpO1xuY29uc3QgZW52ID0gbmV3IFByb3h5KF9lbnZTaGltLCB7XG4gIGdldChfLCBwcm9wKSB7XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYoKTtcbiAgICByZXR1cm4gZW52Mltwcm9wXSA/PyBfZW52U2hpbVtwcm9wXTtcbiAgfSxcbiAgaGFzKF8sIHByb3ApIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudigpO1xuICAgIHJldHVybiBwcm9wIGluIGVudjIgfHwgcHJvcCBpbiBfZW52U2hpbTtcbiAgfSxcbiAgc2V0KF8sIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYodHJ1ZSk7XG4gICAgZW52Mltwcm9wXSA9IHZhbHVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkZWxldGVQcm9wZXJ0eShfLCBwcm9wKSB7XG4gICAgaWYgKCFwcm9wKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KHRydWUpO1xuICAgIGRlbGV0ZSBlbnYyW3Byb3BdO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBvd25LZXlzKCkge1xuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KHRydWUpO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhlbnYyKTtcbiAgfVxufSk7XG5mdW5jdGlvbiB0b0Jvb2xlYW4odmFsKSB7XG4gIHJldHVybiB2YWwgPyB2YWwgIT09IFwiZmFsc2VcIiA6IGZhbHNlO1xufVxuY29uc3Qgbm9kZUVOViA9IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8IFwiXCI7XG5jb25zdCBpc1Byb2R1Y3Rpb24gPSBub2RlRU5WID09PSBcInByb2R1Y3Rpb25cIjtcbmNvbnN0IGlzRGV2ZWxvcG1lbnQgPSBub2RlRU5WID09PSBcImRldlwiIHx8IG5vZGVFTlYgPT09IFwiZGV2ZWxvcG1lbnRcIjtcbmNvbnN0IGlzVGVzdCA9IG5vZGVFTlYgPT09IFwidGVzdFwiIHx8IHRvQm9vbGVhbihlbnYuVEVTVCk7XG5cbmV4cG9ydCB7IGlzUHJvZHVjdGlvbiBhcyBhLCBpc0RldmVsb3BtZW50IGFzIGIsIGVudiBhcyBlLCBpc1Rlc3QgYXMgaSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ generateRandomString)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n\n\nconst generateRandomString = (0,_better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__.createRandomStringGenerator)(\n  \"a-z\",\n  \"0-9\",\n  \"A-Z\",\n  \"-_\"\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkI0UW94ZGdjLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RTs7QUFFeEUsNkJBQTZCLHNGQUEyQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVxQyIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQjRRb3hkZ2MubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJhbmRvbVN0cmluZ0dlbmVyYXRvciB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscy9yYW5kb20nO1xuXG5jb25zdCBnZW5lcmF0ZVJhbmRvbVN0cmluZyA9IGNyZWF0ZVJhbmRvbVN0cmluZ0dlbmVyYXRvcihcbiAgXCJhLXpcIixcbiAgXCIwLTlcIixcbiAgXCJBLVpcIixcbiAgXCItX1wiXG4pO1xuXG5leHBvcnQgeyBnZW5lcmF0ZVJhbmRvbVN0cmluZyBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getAdapter),\n/* harmony export */   b: () => (/* binding */ convertToDB),\n/* harmony export */   c: () => (/* binding */ createInternalAdapter),\n/* harmony export */   d: () => (/* binding */ convertFromDB),\n/* harmony export */   e: () => (/* binding */ getMigrations),\n/* harmony export */   f: () => (/* binding */ getSchema),\n/* harmony export */   g: () => (/* binding */ getWithHooks),\n/* harmony export */   m: () => (/* binding */ matchType)\n/* harmony export */ });\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.n2KFGwjY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\");\n/* harmony import */ var _better_auth_DcfNPS8q_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.DcfNPS8q.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs\");\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.DBGfIDnh.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! better-call */ \"(rsc)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./better-auth.DORkW_Ge.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _better_auth_DwzM_9N1_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.DwzM-9N1.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs\");\n/* harmony import */ var _better_auth_DGpadpzN_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.DGpadpzN.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getWithHooks(adapter, ctx) {\n  const hooks = ctx.hooks;\n  async function createWithHooks(data, model, customCreateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.before;\n      if (toRun) {\n        const result = await toRun(actualData, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\" && \"data\" in result;\n        if (isObject) {\n          actualData = {\n            ...actualData,\n            ...result.data\n          };\n        }\n      }\n    }\n    const customCreated = customCreateFn ? await customCreateFn.fn(actualData) : null;\n    const created = !customCreateFn || customCreateFn.executeMainFn ? await adapter.create({\n      model,\n      data: actualData,\n      forceAllowId: true\n    }) : customCreated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.after;\n      if (toRun) {\n        await toRun(created, context);\n      }\n    }\n    return created;\n  }\n  async function updateWithHooks(data, where, model, customUpdateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.update({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  async function updateManyWithHooks(data, where, model, customUpdateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.updateMany({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  return {\n    createWithHooks,\n    updateWithHooks,\n    updateManyWithHooks\n  };\n}\n\nconst createInternalAdapter = (adapter, ctx) => {\n  const options = ctx.options;\n  const secondaryStorage = options.secondaryStorage;\n  const sessionExpiration = options.session?.expiresIn || 60 * 60 * 24 * 7;\n  const { createWithHooks, updateWithHooks, updateManyWithHooks } = getWithHooks(adapter, ctx);\n  return {\n    createOAuthUser: async (user, account, context) => {\n      const createdUser = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...user\n        },\n        \"user\",\n        void 0,\n        context\n      );\n      const createdAccount = await createWithHooks(\n        {\n          ...account,\n          userId: createdUser.id || user.id,\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return {\n        user: createdUser,\n        account: createdAccount\n      };\n    },\n    createUser: async (user, context) => {\n      const createdUser = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          emailVerified: false,\n          ...user,\n          email: user.email?.toLowerCase()\n        },\n        \"user\",\n        void 0,\n        context\n      );\n      return createdUser;\n    },\n    createAccount: async (account, context) => {\n      const createdAccount = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...account\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return createdAccount;\n    },\n    listSessions: async (userId) => {\n      if (secondaryStorage) {\n        const currentList = await secondaryStorage.get(\n          `active-sessions-${userId}`\n        );\n        if (!currentList) return [];\n        const list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n        const now = Date.now();\n        const validSessions = list.filter((s) => s.expiresAt > now);\n        const sessions2 = [];\n        for (const session of validSessions) {\n          const sessionStringified = await secondaryStorage.get(session.token);\n          if (sessionStringified) {\n            const s = JSON.parse(sessionStringified);\n            const parsedSession = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, {\n              ...s.session,\n              expiresAt: new Date(s.session.expiresAt)\n            });\n            sessions2.push(parsedSession);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await adapter.findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return sessions;\n    },\n    listUsers: async (limit, offset, sortBy, where) => {\n      const users = await adapter.findMany({\n        model: \"user\",\n        limit,\n        offset,\n        sortBy,\n        where\n      });\n      return users;\n    },\n    countTotalUsers: async (where) => {\n      const total = await adapter.count({\n        model: \"user\",\n        where\n      });\n      if (typeof total === \"string\") {\n        return parseInt(total);\n      }\n      return total;\n    },\n    deleteUser: async (userId) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(`active-sessions-${userId}`);\n      }\n      if (!secondaryStorage || options.session?.storeSessionInDatabase) {\n        await adapter.deleteMany({\n          model: \"session\",\n          where: [\n            {\n              field: \"userId\",\n              value: userId\n            }\n          ]\n        });\n      }\n      await adapter.deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n    },\n    createSession: async (userId, ctx2, dontRememberMe, override, overrideAll) => {\n      const headers = ctx2.headers || ctx2.request?.headers;\n      const { id: _, ...rest } = override || {};\n      const data = {\n        ipAddress: ctx2.request || ctx2.headers ? (0,_better_auth_DcfNPS8q_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(ctx2.request || ctx2.headers, ctx2.context.options) || \"\" : \"\",\n        userAgent: headers?.get(\"user-agent\") || \"\",\n        ...rest,\n        /**\n         * If the user doesn't want to be remembered\n         * set the session to expire in 1 day.\n         * The cookie will be set to expire at the end of the session\n         */\n        expiresAt: dontRememberMe ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(60 * 60 * 24, \"sec\") : (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(sessionExpiration, \"sec\"),\n        userId,\n        token: (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(32),\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date(),\n        ...overrideAll ? rest : {}\n      };\n      const res = await createWithHooks(\n        data,\n        \"session\",\n        secondaryStorage ? {\n          fn: async (sessionData) => {\n            const currentList = await secondaryStorage.get(\n              `active-sessions-${userId}`\n            );\n            let list = [];\n            const now = Date.now();\n            if (currentList) {\n              list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n              list = list.filter((session) => session.expiresAt > now);\n            }\n            list.push({\n              token: data.token,\n              expiresAt: now + sessionExpiration * 1e3\n            });\n            await secondaryStorage.set(\n              `active-sessions-${userId}`,\n              JSON.stringify(list),\n              sessionExpiration\n            );\n            return sessionData;\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        ctx2\n      );\n      return res;\n    },\n    findSession: async (token) => {\n      if (secondaryStorage) {\n        const sessionStringified = await secondaryStorage.get(token);\n        if (!sessionStringified && !options.session?.storeSessionInDatabase) {\n          return null;\n        }\n        if (sessionStringified) {\n          const s = JSON.parse(sessionStringified);\n          const parsedSession2 = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, {\n            ...s.session,\n            expiresAt: new Date(s.session.expiresAt),\n            createdAt: new Date(s.session.createdAt),\n            updatedAt: new Date(s.session.updatedAt)\n          });\n          const parsedUser2 = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, {\n            ...s.user,\n            createdAt: new Date(s.user.createdAt),\n            updatedAt: new Date(s.user.updatedAt)\n          });\n          return {\n            session: parsedSession2,\n            user: parsedUser2\n          };\n        }\n      }\n      const session = await adapter.findOne({\n        model: \"session\",\n        where: [\n          {\n            value: token,\n            field: \"token\"\n          }\n        ]\n      });\n      if (!session) {\n        return null;\n      }\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            value: session.userId,\n            field: \"id\"\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      const parsedSession = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, session);\n      const parsedUser = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, user);\n      return {\n        session: parsedSession,\n        user: parsedUser\n      };\n    },\n    findSessions: async (sessionTokens) => {\n      if (secondaryStorage) {\n        const sessions2 = [];\n        for (const sessionToken of sessionTokens) {\n          const sessionStringified = await secondaryStorage.get(sessionToken);\n          if (sessionStringified) {\n            const s = JSON.parse(sessionStringified);\n            const session = {\n              session: {\n                ...s.session,\n                expiresAt: new Date(s.session.expiresAt)\n              },\n              user: {\n                ...s.user,\n                createdAt: new Date(s.user.createdAt),\n                updatedAt: new Date(s.user.updatedAt)\n              }\n            };\n            sessions2.push(session);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await adapter.findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: sessionTokens,\n            operator: \"in\"\n          }\n        ]\n      });\n      const userIds = sessions.map((session) => {\n        return session.userId;\n      });\n      if (!userIds.length) return [];\n      const users = await adapter.findMany({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userIds,\n            operator: \"in\"\n          }\n        ]\n      });\n      return sessions.map((session) => {\n        const user = users.find((u) => u.id === session.userId);\n        if (!user) return null;\n        return {\n          session,\n          user\n        };\n      });\n    },\n    updateSession: async (sessionToken, session, context) => {\n      const updatedSession = await updateWithHooks(\n        session,\n        [{ field: \"token\", value: sessionToken }],\n        \"session\",\n        secondaryStorage ? {\n          async fn(data) {\n            const currentSession = await secondaryStorage.get(sessionToken);\n            let updatedSession2 = null;\n            if (currentSession) {\n              const parsedSession = JSON.parse(currentSession);\n              updatedSession2 = {\n                ...parsedSession.session,\n                ...data\n              };\n              return updatedSession2;\n            } else {\n              return null;\n            }\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        context\n      );\n      return updatedSession;\n    },\n    deleteSession: async (token) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(token);\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await adapter.delete({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: token\n          }\n        ]\n      });\n    },\n    deleteAccounts: async (userId) => {\n      await adapter.deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n    },\n    deleteAccount: async (accountId) => {\n      await adapter.delete({\n        model: \"account\",\n        where: [\n          {\n            field: \"id\",\n            value: accountId\n          }\n        ]\n      });\n    },\n    deleteSessions: async (userIdOrSessionTokens) => {\n      if (secondaryStorage) {\n        if (typeof userIdOrSessionTokens === \"string\") {\n          const activeSession = await secondaryStorage.get(\n            `active-sessions-${userIdOrSessionTokens}`\n          );\n          const sessions = activeSession ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(activeSession) : [];\n          if (!sessions) return;\n          for (const session of sessions) {\n            await secondaryStorage.delete(session.token);\n          }\n        } else {\n          for (const sessionToken of userIdOrSessionTokens) {\n            const session = await secondaryStorage.get(sessionToken);\n            if (session) {\n              await secondaryStorage.delete(sessionToken);\n            }\n          }\n        }\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await adapter.deleteMany({\n        model: \"session\",\n        where: [\n          {\n            field: Array.isArray(userIdOrSessionTokens) ? \"token\" : \"userId\",\n            value: userIdOrSessionTokens,\n            operator: Array.isArray(userIdOrSessionTokens) ? \"in\" : void 0\n          }\n        ]\n      });\n    },\n    findOAuthUser: async (email, accountId, providerId) => {\n      const account = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            value: accountId,\n            field: \"accountId\"\n          }\n        ]\n      }).then((accounts) => {\n        return accounts.find((a) => a.providerId === providerId);\n      });\n      if (account) {\n        const user = await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              value: account.userId,\n              field: \"id\"\n            }\n          ]\n        });\n        if (user) {\n          return {\n            user,\n            accounts: [account]\n          };\n        } else {\n          const user2 = await adapter.findOne({\n            model: \"user\",\n            where: [\n              {\n                value: email.toLowerCase(),\n                field: \"email\"\n              }\n            ]\n          });\n          if (user2) {\n            return {\n              user: user2,\n              accounts: [account]\n            };\n          }\n          return null;\n        }\n      } else {\n        const user = await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              value: email.toLowerCase(),\n              field: \"email\"\n            }\n          ]\n        });\n        if (user) {\n          const accounts = await adapter.findMany({\n            model: \"account\",\n            where: [\n              {\n                value: user.id,\n                field: \"userId\"\n              }\n            ]\n          });\n          return {\n            user,\n            accounts: accounts || []\n          };\n        } else {\n          return null;\n        }\n      }\n    },\n    findUserByEmail: async (email, options2) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            value: email.toLowerCase(),\n            field: \"email\"\n          }\n        ]\n      });\n      if (!user) return null;\n      if (options2?.includeAccounts) {\n        const accounts = await adapter.findMany({\n          model: \"account\",\n          where: [\n            {\n              value: user.id,\n              field: \"userId\"\n            }\n          ]\n        });\n        return {\n          user,\n          accounts\n        };\n      }\n      return {\n        user,\n        accounts: []\n      };\n    },\n    findUserById: async (userId) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n      return user;\n    },\n    linkAccount: async (account, context) => {\n      const _account = await createWithHooks(\n        {\n          ...account,\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return _account;\n    },\n    updateUser: async (userId, data, context) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ],\n        \"user\",\n        void 0,\n        context\n      );\n      if (secondaryStorage && user) {\n        const listRaw = await secondaryStorage.get(`active-sessions-${userId}`);\n        if (listRaw) {\n          const now = Date.now();\n          const list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(listRaw) || [];\n          const validSessions = list.filter((s) => s.expiresAt > now);\n          await Promise.all(\n            validSessions.map(async ({ token }) => {\n              const cached = await secondaryStorage.get(token);\n              if (!cached) return;\n              const parsed = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(cached);\n              if (!parsed) return;\n              const sessionTTL = Math.max(\n                Math.floor(\n                  (new Date(parsed.session.expiresAt).getTime() - now) / 1e3\n                ),\n                0\n              );\n              await secondaryStorage.set(\n                token,\n                JSON.stringify({\n                  session: parsed.session,\n                  user\n                }),\n                sessionTTL\n              );\n            })\n          );\n        }\n      }\n      return user;\n    },\n    updateUserByEmail: async (email, data, context) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"email\",\n            value: email.toLowerCase()\n          }\n        ],\n        \"user\",\n        void 0,\n        context\n      );\n      return user;\n    },\n    updatePassword: async (userId, password, context) => {\n      await updateManyWithHooks(\n        {\n          password\n        },\n        [\n          {\n            field: \"userId\",\n            value: userId\n          },\n          {\n            field: \"providerId\",\n            value: \"credential\"\n          }\n        ],\n        \"account\",\n        void 0,\n        context\n      );\n    },\n    findAccounts: async (userId) => {\n      const accounts = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return accounts;\n    },\n    findAccount: async (accountId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByProviderId: async (accountId, providerId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          },\n          {\n            field: \"providerId\",\n            value: providerId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByUserId: async (userId) => {\n      const account = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return account;\n    },\n    updateAccount: async (id, data, context) => {\n      const account = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"account\",\n        void 0,\n        context\n      );\n      return account;\n    },\n    createVerificationValue: async (data, context) => {\n      const verification = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...data\n        },\n        \"verification\",\n        void 0,\n        context\n      );\n      return verification;\n    },\n    findVerificationValue: async (identifier) => {\n      const verification = await adapter.findMany({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ],\n        sortBy: {\n          field: \"createdAt\",\n          direction: \"desc\"\n        },\n        limit: 1\n      });\n      if (!options.verification?.disableCleanup) {\n        await adapter.deleteMany({\n          model: \"verification\",\n          where: [\n            {\n              field: \"expiresAt\",\n              value: /* @__PURE__ */ new Date(),\n              operator: \"lt\"\n            }\n          ]\n        });\n      }\n      const lastVerification = verification[0];\n      return lastVerification;\n    },\n    deleteVerificationValue: async (id) => {\n      await adapter.delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"id\",\n            value: id\n          }\n        ]\n      });\n    },\n    deleteVerificationByIdentifier: async (identifier) => {\n      await adapter.delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ]\n      });\n    },\n    updateVerificationValue: async (id, data, context) => {\n      const verification = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"verification\",\n        void 0,\n        context\n      );\n      return verification;\n    }\n  };\n};\n\nasync function getAdapter(options) {\n  if (!options.database) {\n    const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_13__.g)(options);\n    const memoryDB = Object.keys(tables).reduce((acc, key) => {\n      acc[key] = [];\n      return acc;\n    }, {});\n    _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.a.warn(\n      \"No database configuration provided. Using memory adapter in development\"\n    );\n    return (0,_better_auth_DGpadpzN_mjs__WEBPACK_IMPORTED_MODULE_16__.m)(memoryDB)(options);\n  }\n  if (typeof options.database === \"function\") {\n    return options.database(options);\n  }\n  const { kysely, databaseType } = await (0,_better_auth_DwzM_9N1_mjs__WEBPACK_IMPORTED_MODULE_15__.c)(options);\n  if (!kysely) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_14__.B(\"Failed to initialize database adapter\");\n  }\n  return (0,_better_auth_DwzM_9N1_mjs__WEBPACK_IMPORTED_MODULE_15__.k)(kysely, {\n    type: databaseType || \"sqlite\",\n    debugLogs: \"debugLogs\" in options.database ? options.database.debugLogs : false\n  })(options);\n}\nfunction convertToDB(fields, values) {\n  let result = values.id ? {\n    id: values.id\n  } : {};\n  for (const key in fields) {\n    const field = fields[key];\n    const value = values[key];\n    if (value === void 0) {\n      continue;\n    }\n    result[field.fieldName || key] = value;\n  }\n  return result;\n}\nfunction convertFromDB(fields, values) {\n  if (!values) {\n    return null;\n  }\n  let result = {\n    id: values.id\n  };\n  for (const [key, value] of Object.entries(fields)) {\n    result[key] = values[value.fieldName || key];\n  }\n  return result;\n}\n\nfunction getSchema(config) {\n  const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_13__.g)(config);\n  let schema = {};\n  for (const key in tables) {\n    const table = tables[key];\n    const fields = table.fields;\n    let actualFields = {};\n    Object.entries(fields).forEach(([key2, field]) => {\n      actualFields[field.fieldName || key2] = field;\n      if (field.references) {\n        const refTable = tables[field.references.model];\n        if (refTable) {\n          actualFields[field.fieldName || key2].references = {\n            model: refTable.modelName,\n            field: field.references.field\n          };\n        }\n      }\n    });\n    if (schema[table.modelName]) {\n      schema[table.modelName].fields = {\n        ...schema[table.modelName].fields,\n        ...actualFields\n      };\n      continue;\n    }\n    schema[table.modelName] = {\n      fields: actualFields,\n      order: table.order || Infinity\n    };\n  }\n  return schema;\n}\n\nconst postgresMap = {\n  string: [\"character varying\", \"varchar\", \"text\"],\n  number: [\n    \"int4\",\n    \"integer\",\n    \"bigint\",\n    \"smallint\",\n    \"numeric\",\n    \"real\",\n    \"double precision\"\n  ],\n  boolean: [\"bool\", \"boolean\"],\n  date: [\"timestamp\", \"date\"]\n};\nconst mysqlMap = {\n  string: [\"varchar\", \"text\"],\n  number: [\n    \"integer\",\n    \"int\",\n    \"bigint\",\n    \"smallint\",\n    \"decimal\",\n    \"float\",\n    \"double\"\n  ],\n  boolean: [\"boolean\", \"tinyint\"],\n  date: [\"timestamp\", \"datetime\", \"date\"]\n};\nconst sqliteMap = {\n  string: [\"TEXT\"],\n  number: [\"INTEGER\", \"REAL\"],\n  boolean: [\"INTEGER\", \"BOOLEAN\"],\n  // 0 or 1\n  date: [\"DATE\", \"INTEGER\"]\n};\nconst mssqlMap = {\n  string: [\"text\", \"varchar\"],\n  number: [\"int\", \"bigint\", \"smallint\", \"decimal\", \"float\", \"double\"],\n  boolean: [\"bit\", \"smallint\"],\n  date: [\"datetime\", \"date\"]\n};\nconst map = {\n  postgres: postgresMap,\n  mysql: mysqlMap,\n  sqlite: sqliteMap,\n  mssql: mssqlMap\n};\nfunction matchType(columnDataType, fieldType, dbType) {\n  function normalize(type) {\n    return type.toLowerCase().split(\"(\")[0].trim();\n  }\n  if (fieldType === \"string[]\" || fieldType === \"number[]\") {\n    return columnDataType.toLowerCase().includes(\"json\");\n  }\n  const types = map[dbType];\n  const expected = Array.isArray(fieldType) ? types[\"string\"].map((t) => t.toLowerCase()) : types[fieldType].map((t) => t.toLowerCase());\n  return expected.includes(normalize(columnDataType));\n}\nasync function getMigrations(config) {\n  const betterAuthSchema = getSchema(config);\n  const logger = (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_4__.c)(config.logger);\n  let { kysely: db, databaseType: dbType } = await (0,_better_auth_DwzM_9N1_mjs__WEBPACK_IMPORTED_MODULE_15__.c)(config);\n  if (!dbType) {\n    logger.warn(\n      \"Could not determine database type, defaulting to sqlite. Please provide a type in the database options to avoid this.\"\n    );\n    dbType = \"sqlite\";\n  }\n  if (!db) {\n    logger.error(\n      \"Only kysely adapter is supported for migrations. You can use `generate` command to generate the schema, if you're using a different adapter.\"\n    );\n    process.exit(1);\n  }\n  const tableMetadata = await db.introspection.getTables();\n  const toBeCreated = [];\n  const toBeAdded = [];\n  for (const [key, value] of Object.entries(betterAuthSchema)) {\n    const table = tableMetadata.find((t) => t.name === key);\n    if (!table) {\n      const tIndex = toBeCreated.findIndex((t) => t.table === key);\n      const tableData = {\n        table: key,\n        fields: value.fields,\n        order: value.order || Infinity\n      };\n      const insertIndex = toBeCreated.findIndex(\n        (t) => (t.order || Infinity) > tableData.order\n      );\n      if (insertIndex === -1) {\n        if (tIndex === -1) {\n          toBeCreated.push(tableData);\n        } else {\n          toBeCreated[tIndex].fields = {\n            ...toBeCreated[tIndex].fields,\n            ...value.fields\n          };\n        }\n      } else {\n        toBeCreated.splice(insertIndex, 0, tableData);\n      }\n      continue;\n    }\n    let toBeAddedFields = {};\n    for (const [fieldName, field] of Object.entries(value.fields)) {\n      const column = table.columns.find((c) => c.name === fieldName);\n      if (!column) {\n        toBeAddedFields[fieldName] = field;\n        continue;\n      }\n      if (matchType(column.dataType, field.type, dbType)) {\n        continue;\n      } else {\n        logger.warn(\n          `Field ${fieldName} in table ${key} has a different type in the database. Expected ${field.type} but got ${column.dataType}.`\n        );\n      }\n    }\n    if (Object.keys(toBeAddedFields).length > 0) {\n      toBeAdded.push({\n        table: key,\n        fields: toBeAddedFields,\n        order: value.order || Infinity\n      });\n    }\n  }\n  const migrations = [];\n  function getType(field, fieldName) {\n    const type = field.type;\n    const typeMap = {\n      string: {\n        sqlite: \"text\",\n        postgres: \"text\",\n        mysql: field.unique ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\",\n        mssql: field.unique || field.sortable ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\"\n      },\n      boolean: {\n        sqlite: \"integer\",\n        postgres: \"boolean\",\n        mysql: \"boolean\",\n        mssql: \"smallint\"\n      },\n      number: {\n        sqlite: field.bigint ? \"bigint\" : \"integer\",\n        postgres: field.bigint ? \"bigint\" : \"integer\",\n        mysql: field.bigint ? \"bigint\" : \"integer\",\n        mssql: field.bigint ? \"bigint\" : \"integer\"\n      },\n      date: {\n        sqlite: \"date\",\n        postgres: \"timestamp\",\n        mysql: \"datetime\",\n        mssql: \"datetime\"\n      },\n      id: {\n        postgres: config.advanced?.database?.useNumberId ? \"serial\" : \"text\",\n        mysql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        mssql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        sqlite: config.advanced?.database?.useNumberId ? \"integer\" : \"text\"\n      }\n    };\n    if (fieldName === \"id\" || field.references?.field === \"id\") {\n      return typeMap.id[dbType];\n    }\n    if (dbType === \"sqlite\" && (type === \"string[]\" || type === \"number[]\")) {\n      return \"text\";\n    }\n    if (type === \"string[]\" || type === \"number[]\") {\n      return \"jsonb\";\n    }\n    if (Array.isArray(type)) {\n      return \"text\";\n    }\n    return typeMap[type][dbType || \"sqlite\"];\n  }\n  if (toBeAdded.length) {\n    for (const table of toBeAdded) {\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        const exec = db.schema.alterTable(table.table).addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            );\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          return col;\n        });\n        migrations.push(exec);\n      }\n    }\n  }\n  if (toBeCreated.length) {\n    for (const table of toBeCreated) {\n      let dbT = db.schema.createTable(table.table).addColumn(\n        \"id\",\n        config.advanced?.database?.useNumberId ? dbType === \"postgres\" ? \"serial\" : \"integer\" : dbType === \"mysql\" || dbType === \"mssql\" ? \"varchar(36)\" : \"text\",\n        (col) => {\n          if (config.advanced?.database?.useNumberId) {\n            if (dbType === \"postgres\") {\n              return col.primaryKey().notNull();\n            }\n            return col.autoIncrement().primaryKey().notNull();\n          }\n          return col.primaryKey().notNull();\n        }\n      );\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        dbT = dbT.addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            );\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          return col;\n        });\n      }\n      migrations.push(dbT);\n    }\n  }\n  async function runMigrations() {\n    for (const migration of migrations) {\n      await migration.execute();\n    }\n  }\n  async function compileMigrations() {\n    const compiled = migrations.map((m) => m.compile().sql);\n    return compiled.join(\";\\n\\n\") + \";\";\n  }\n  return { toBeCreated, toBeAdded, runMigrations, compileMigrations };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getDate)\n/* harmony export */ });\nconst getDate = (span, unit = \"ms\") => {\n  return new Date(Date.now() + (unit === \"sec\" ? span * 1e3 : span));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkNXNkQ5ZVN4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBOztBQUV3QiIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ1c2RDllU3gubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdldERhdGUgPSAoc3BhbiwgdW5pdCA9IFwibXNcIikgPT4ge1xuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5ub3coKSArICh1bml0ID09PSBcInNlY1wiID8gc3BhbiAqIDFlMyA6IHNwYW4pKTtcbn07XG5cbmV4cG9ydCB7IGdldERhdGUgYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.Cbhy6WDJ.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.Cbhy6WDJ.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   b: () => (/* binding */ betterAuth)\n/* harmony export */ });\n/* harmony import */ var _api_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/index.mjs */ \"(rsc)/../../node_modules/better-auth/dist/api/index.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! defu */ \"(rsc)/../../node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/index.mjs */ \"(rsc)/../../node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.ByruPN9q.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs\");\n/* harmony import */ var _better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.DORkW_Ge.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./better-auth.n2KFGwjY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(rsc)/../../node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./better-auth.DBGfIDnh.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.z3dsxLxE.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! better-call */ \"(rsc)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.YwDQhoPc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\");\n/* harmony import */ var _better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.VTXNLFMT.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_SECRET = \"better-auth-secret-123456789\";\n\nconst init = async (options) => {\n  const adapter = await (0,_better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(options);\n  const plugins = options.plugins || [];\n  const internalPlugins = getInternalPlugins(options);\n  const logger = (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_7__.c)(options.logger);\n  const baseURL = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_15__.a)(options.baseURL, options.basePath);\n  const secret = options.secret || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__.e.BETTER_AUTH_SECRET || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__.e.AUTH_SECRET || DEFAULT_SECRET;\n  if (secret === DEFAULT_SECRET) {\n    if (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__.a) {\n      logger.error(\n        \"You are using the default secret. Please set `BETTER_AUTH_SECRET` in your environment variables or pass `secret` in your auth config.\"\n      );\n    }\n  }\n  options = {\n    ...options,\n    secret,\n    baseURL: baseURL ? new URL(baseURL).origin : \"\",\n    basePath: options.basePath || \"/api/auth\",\n    plugins: plugins.concat(internalPlugins)\n  };\n  const cookies = (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_6__.getCookies)(options);\n  const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(options);\n  const providers = Object.keys(options.socialProviders || {}).map((key) => {\n    const value = options.socialProviders?.[key];\n    if (!value || value.enabled === false) {\n      return null;\n    }\n    if (!value.clientId) {\n      logger.warn(\n        `Social provider ${key} is missing clientId or clientSecret`\n      );\n    }\n    const provider = _better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_8__.t[key](\n      value\n      // TODO: fix this\n    );\n    provider.disableImplicitSignUp = value.disableImplicitSignUp;\n    return provider;\n  }).filter((x) => x !== null);\n  const generateIdFunc = ({ model, size }) => {\n    if (typeof options.advanced?.generateId === \"function\") {\n      return options.advanced.generateId({ model, size });\n    }\n    if (typeof options?.advanced?.database?.generateId === \"function\") {\n      return options.advanced.database.generateId({ model, size });\n    }\n    return (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_7__.g)(size);\n  };\n  const ctx = {\n    appName: options.appName || \"Better Auth\",\n    socialProviders: providers,\n    options,\n    tables,\n    trustedOrigins: getTrustedOrigins(options),\n    baseURL: baseURL || \"\",\n    sessionConfig: {\n      updateAge: options.session?.updateAge !== void 0 ? options.session.updateAge : 24 * 60 * 60,\n      // 24 hours\n      expiresIn: options.session?.expiresIn || 60 * 60 * 24 * 7,\n      // 7 days\n      freshAge: options.session?.freshAge === void 0 ? 60 * 60 * 24 : options.session.freshAge\n    },\n    secret,\n    rateLimit: {\n      ...options.rateLimit,\n      enabled: options.rateLimit?.enabled ?? _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__.a,\n      window: options.rateLimit?.window || 10,\n      max: options.rateLimit?.max || 100,\n      storage: options.rateLimit?.storage || (options.secondaryStorage ? \"secondary-storage\" : \"memory\")\n    },\n    authCookies: cookies,\n    logger,\n    generateId: generateIdFunc,\n    session: null,\n    secondaryStorage: options.secondaryStorage,\n    password: {\n      hash: options.emailAndPassword?.password?.hash || _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__.hashPassword,\n      verify: options.emailAndPassword?.password?.verify || _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_2__.verifyPassword,\n      config: {\n        minPasswordLength: options.emailAndPassword?.minPasswordLength || 8,\n        maxPasswordLength: options.emailAndPassword?.maxPasswordLength || 128\n      },\n      checkPassword: _better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_14__.c\n    },\n    setNewSession(session) {\n      this.newSession = session;\n    },\n    newSession: null,\n    adapter,\n    internalAdapter: (0,_better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(adapter, {\n      options,\n      hooks: options.databaseHooks ? [options.databaseHooks] : []}),\n    createAuthCookie: (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_6__.createCookieGetter)(options),\n    async runMigrations() {\n      if (!options.database || \"updateMany\" in options.database) {\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__.B(\n          \"Database is not provided or it's an adapter. Migrations are only supported with a database instance.\"\n        );\n      }\n      const { runMigrations } = await (0,_better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(options);\n      await runMigrations();\n    }\n  };\n  let { context } = runPluginInit(ctx);\n  return context;\n};\nfunction runPluginInit(ctx) {\n  let options = ctx.options;\n  const plugins = options.plugins || [];\n  let context = ctx;\n  const dbHooks = [];\n  for (const plugin of plugins) {\n    if (plugin.init) {\n      const result = plugin.init(context);\n      if (typeof result === \"object\") {\n        if (result.options) {\n          const { databaseHooks, ...restOpts } = result.options;\n          if (databaseHooks) {\n            dbHooks.push(databaseHooks);\n          }\n          options = (0,defu__WEBPACK_IMPORTED_MODULE_1__.defu)(options, restOpts);\n        }\n        if (result.context) {\n          context = {\n            ...context,\n            ...result.context\n          };\n        }\n      }\n    }\n  }\n  dbHooks.push(options.databaseHooks);\n  context.internalAdapter = (0,_better_auth_ByruPN9q_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(ctx.adapter, {\n    options,\n    hooks: dbHooks.filter((u) => u !== void 0),\n    generateId: ctx.generateId\n  });\n  context.options = options;\n  return { context };\n}\nfunction getInternalPlugins(options) {\n  const plugins = [];\n  if (options.advanced?.crossSubDomainCookies?.enabled) ;\n  return plugins;\n}\nfunction getTrustedOrigins(options) {\n  const baseURL = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_15__.a)(options.baseURL, options.basePath);\n  if (!baseURL) {\n    return [];\n  }\n  const trustedOrigins = [new URL(baseURL).origin];\n  if (options.trustedOrigins && Array.isArray(options.trustedOrigins)) {\n    trustedOrigins.push(...options.trustedOrigins);\n  }\n  const envTrustedOrigins = _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__.e.BETTER_AUTH_TRUSTED_ORIGINS;\n  if (envTrustedOrigins) {\n    trustedOrigins.push(...envTrustedOrigins.split(\",\"));\n  }\n  if (trustedOrigins.filter((x) => !x).length) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__.B(\n      \"A provided trusted origin is invalid, make sure your trusted origins list is properly defined.\"\n    );\n  }\n  return trustedOrigins;\n}\n\nconst betterAuth = (options) => {\n  const authContext = init(options);\n  const { api } = (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getEndpoints)(authContext, options);\n  const errorCodes = options.plugins?.reduce((acc, plugin) => {\n    if (plugin.$ERROR_CODES) {\n      return {\n        ...acc,\n        ...plugin.$ERROR_CODES\n      };\n    }\n    return acc;\n  }, {});\n  return {\n    handler: async (request) => {\n      const ctx = await authContext;\n      const basePath = ctx.options.basePath || \"/api/auth\";\n      if (!ctx.options.baseURL) {\n        const baseURL = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_15__.a)(void 0, basePath, request);\n        if (baseURL) {\n          ctx.baseURL = baseURL;\n          ctx.options.baseURL = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_15__.g)(ctx.baseURL) || void 0;\n        } else {\n          throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__.B(\n            \"Could not get base URL from request. Please provide a valid base URL.\"\n          );\n        }\n      }\n      ctx.trustedOrigins = [\n        ...options.trustedOrigins ? Array.isArray(options.trustedOrigins) ? options.trustedOrigins : await options.trustedOrigins(request) : [],\n        ctx.options.baseURL\n      ];\n      const { handler } = (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.router)(ctx, options);\n      return handler(request);\n    },\n    api,\n    options,\n    $context: authContext,\n    $Infer: {},\n    $ERROR_CODES: {\n      ...errorCodes,\n      ..._better_auth_z3dsxLxE_mjs__WEBPACK_IMPORTED_MODULE_8__.B\n    }\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.Cbhy6WDJ.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ capitalizeFirstLetter)\n/* harmony export */ });\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkQtMkNtRXd6Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBOztBQUVzQyIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRC0yQ21Fd3oubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcihzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cblxuZXhwb3J0IHsgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIGFzIGMgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ logger),\n/* harmony export */   c: () => (/* binding */ createLogger),\n/* harmony export */   g: () => (/* binding */ generateId),\n/* harmony export */   l: () => (/* binding */ levels),\n/* harmony export */   s: () => (/* binding */ shouldPublishLog)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n\n\nconst generateId = (size) => {\n  return (0,_better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__.createRandomStringGenerator)(\"a-z\", \"A-Z\", \"0-9\")(size || 32);\n};\n\nconst levels = [\"info\", \"success\", \"warn\", \"error\", \"debug\"];\nfunction shouldPublishLog(currentLogLevel, logLevel) {\n  return levels.indexOf(logLevel) <= levels.indexOf(currentLogLevel);\n}\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    red: \"\\x1B[31m\",\n    green: \"\\x1B[32m\",\n    yellow: \"\\x1B[33m\",\n    blue: \"\\x1B[34m\",\n    magenta: \"\\x1B[35m\"}};\nconst levelColors = {\n  info: colors.fg.blue,\n  success: colors.fg.green,\n  warn: colors.fg.yellow,\n  error: colors.fg.red,\n  debug: colors.fg.magenta\n};\nconst formatMessage = (level, message) => {\n  const timestamp = (/* @__PURE__ */ new Date()).toISOString();\n  return `${colors.dim}${timestamp}${colors.reset} ${levelColors[level]}${level.toUpperCase()}${colors.reset} ${colors.bright}[Better Auth]:${colors.reset} ${message}`;\n};\nconst createLogger = (options) => {\n  const enabled = options?.disabled !== true;\n  const logLevel = options?.level ?? \"error\";\n  const LogFunc = (level, message, args = []) => {\n    if (!enabled || !shouldPublishLog(logLevel, level)) {\n      return;\n    }\n    const formattedMessage = formatMessage(level, message);\n    if (!options || typeof options.log !== \"function\") {\n      if (level === \"error\") {\n        console.error(formattedMessage, ...args);\n      } else if (level === \"warn\") {\n        console.warn(formattedMessage, ...args);\n      } else {\n        console.log(formattedMessage, ...args);\n      }\n      return;\n    }\n    options.log(level === \"success\" ? \"info\" : level, message, ...args);\n  };\n  return Object.fromEntries(\n    levels.map((level) => [\n      level,\n      (...[message, ...args]) => LogFunc(level, message, args)\n    ])\n  );\n};\nconst logger = createLogger();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkRCR2ZJRG5oLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBd0U7O0FBRXhFO0FBQ0EsU0FBUyxzRkFBMkI7QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLGNBQWMsZ0JBQWdCLGNBQWMsRUFBRSxRQUFRO0FBQ3RLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrRiIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguREJHZklEbmgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJhbmRvbVN0cmluZ0dlbmVyYXRvciB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscy9yYW5kb20nO1xuXG5jb25zdCBnZW5lcmF0ZUlkID0gKHNpemUpID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVJhbmRvbVN0cmluZ0dlbmVyYXRvcihcImEtelwiLCBcIkEtWlwiLCBcIjAtOVwiKShzaXplIHx8IDMyKTtcbn07XG5cbmNvbnN0IGxldmVscyA9IFtcImluZm9cIiwgXCJzdWNjZXNzXCIsIFwid2FyblwiLCBcImVycm9yXCIsIFwiZGVidWdcIl07XG5mdW5jdGlvbiBzaG91bGRQdWJsaXNoTG9nKGN1cnJlbnRMb2dMZXZlbCwgbG9nTGV2ZWwpIHtcbiAgcmV0dXJuIGxldmVscy5pbmRleE9mKGxvZ0xldmVsKSA8PSBsZXZlbHMuaW5kZXhPZihjdXJyZW50TG9nTGV2ZWwpO1xufVxuY29uc3QgY29sb3JzID0ge1xuICByZXNldDogXCJcXHgxQlswbVwiLFxuICBicmlnaHQ6IFwiXFx4MUJbMW1cIixcbiAgZGltOiBcIlxceDFCWzJtXCIsXG4gIGZnOiB7XG4gICAgcmVkOiBcIlxceDFCWzMxbVwiLFxuICAgIGdyZWVuOiBcIlxceDFCWzMybVwiLFxuICAgIHllbGxvdzogXCJcXHgxQlszM21cIixcbiAgICBibHVlOiBcIlxceDFCWzM0bVwiLFxuICAgIG1hZ2VudGE6IFwiXFx4MUJbMzVtXCJ9fTtcbmNvbnN0IGxldmVsQ29sb3JzID0ge1xuICBpbmZvOiBjb2xvcnMuZmcuYmx1ZSxcbiAgc3VjY2VzczogY29sb3JzLmZnLmdyZWVuLFxuICB3YXJuOiBjb2xvcnMuZmcueWVsbG93LFxuICBlcnJvcjogY29sb3JzLmZnLnJlZCxcbiAgZGVidWc6IGNvbG9ycy5mZy5tYWdlbnRhXG59O1xuY29uc3QgZm9ybWF0TWVzc2FnZSA9IChsZXZlbCwgbWVzc2FnZSkgPT4ge1xuICBjb25zdCB0aW1lc3RhbXAgPSAoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpLnRvSVNPU3RyaW5nKCk7XG4gIHJldHVybiBgJHtjb2xvcnMuZGltfSR7dGltZXN0YW1wfSR7Y29sb3JzLnJlc2V0fSAke2xldmVsQ29sb3JzW2xldmVsXX0ke2xldmVsLnRvVXBwZXJDYXNlKCl9JHtjb2xvcnMucmVzZXR9ICR7Y29sb3JzLmJyaWdodH1bQmV0dGVyIEF1dGhdOiR7Y29sb3JzLnJlc2V0fSAke21lc3NhZ2V9YDtcbn07XG5jb25zdCBjcmVhdGVMb2dnZXIgPSAob3B0aW9ucykgPT4ge1xuICBjb25zdCBlbmFibGVkID0gb3B0aW9ucz8uZGlzYWJsZWQgIT09IHRydWU7XG4gIGNvbnN0IGxvZ0xldmVsID0gb3B0aW9ucz8ubGV2ZWwgPz8gXCJlcnJvclwiO1xuICBjb25zdCBMb2dGdW5jID0gKGxldmVsLCBtZXNzYWdlLCBhcmdzID0gW10pID0+IHtcbiAgICBpZiAoIWVuYWJsZWQgfHwgIXNob3VsZFB1Ymxpc2hMb2cobG9nTGV2ZWwsIGxldmVsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmb3JtYXR0ZWRNZXNzYWdlID0gZm9ybWF0TWVzc2FnZShsZXZlbCwgbWVzc2FnZSk7XG4gICAgaWYgKCFvcHRpb25zIHx8IHR5cGVvZiBvcHRpb25zLmxvZyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBpZiAobGV2ZWwgPT09IFwiZXJyb3JcIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdHRlZE1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgICAgfSBlbHNlIGlmIChsZXZlbCA9PT0gXCJ3YXJuXCIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGZvcm1hdHRlZE1lc3NhZ2UsIC4uLmFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coZm9ybWF0dGVkTWVzc2FnZSwgLi4uYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG9wdGlvbnMubG9nKGxldmVsID09PSBcInN1Y2Nlc3NcIiA/IFwiaW5mb1wiIDogbGV2ZWwsIG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICB9O1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgIGxldmVscy5tYXAoKGxldmVsKSA9PiBbXG4gICAgICBsZXZlbCxcbiAgICAgICguLi5bbWVzc2FnZSwgLi4uYXJnc10pID0+IExvZ0Z1bmMobGV2ZWwsIG1lc3NhZ2UsIGFyZ3MpXG4gICAgXSlcbiAgKTtcbn07XG5jb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoKTtcblxuZXhwb3J0IHsgbG9nZ2VyIGFzIGEsIGNyZWF0ZUxvZ2dlciBhcyBjLCBnZW5lcmF0ZUlkIGFzIGcsIGxldmVscyBhcyBsLCBzaG91bGRQdWJsaXNoTG9nIGFzIHMgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   m: () => (/* binding */ memoryAdapter)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-call */ \"(rsc)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./better-auth.DBGfIDnh.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.gBl3F_xa.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst memoryAdapter = (db, config) => (0,_better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_8__.c)({\n  config: {\n    adapterId: \"memory\",\n    adapterName: \"Memory Adapter\",\n    usePlural: false,\n    debugLogs: config?.debugLogs || false,\n    customTransformInput(props) {\n      if (props.options.advanced?.database?.useNumberId && props.field === \"id\" && props.action === \"create\") {\n        return db[props.model].length + 1;\n      }\n      return props.data;\n    }\n  },\n  adapter: ({ getFieldName, options, debugLog }) => {\n    function convertWhereClause(where, model) {\n      const table = db[model];\n      if (!table) {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_7__.a.error(\n          `[MemoryAdapter] Model ${model} not found in the DB`,\n          Object.keys(db)\n        );\n        throw new Error(`Model ${model} not found`);\n      }\n      return table.filter((record) => {\n        return where.every((clause) => {\n          let { field, value, operator } = clause;\n          if (operator === \"in\") {\n            if (!Array.isArray(value)) {\n              throw new Error(\"Value must be an array\");\n            }\n            return value.includes(record[field]);\n          } else if (operator === \"contains\") {\n            return record[field].includes(value);\n          } else if (operator === \"starts_with\") {\n            return record[field].startsWith(value);\n          } else if (operator === \"ends_with\") {\n            return record[field].endsWith(value);\n          } else {\n            return record[field] === value;\n          }\n        });\n      });\n    }\n    return {\n      create: async ({ model, data }) => {\n        if (options.advanced?.database?.useNumberId) {\n          data.id = db[model].length + 1;\n        }\n        if (!db[model]) {\n          db[model] = [];\n        }\n        db[model].push(data);\n        return data;\n      },\n      findOne: async ({ model, where }) => {\n        const res = convertWhereClause(where, model);\n        const record = res[0] || null;\n        return record;\n      },\n      findMany: async ({ model, where, sortBy, limit, offset }) => {\n        let table = db[model];\n        if (where) {\n          table = convertWhereClause(where, model);\n        }\n        if (sortBy) {\n          table = table.sort((a, b) => {\n            const field = getFieldName({ model, field: sortBy.field });\n            if (sortBy.direction === \"asc\") {\n              return a[field] > b[field] ? 1 : -1;\n            } else {\n              return a[field] < b[field] ? 1 : -1;\n            }\n          });\n        }\n        if (offset !== void 0) {\n          table = table.slice(offset);\n        }\n        if (limit !== void 0) {\n          table = table.slice(0, limit);\n        }\n        return table;\n      },\n      count: async ({ model }) => {\n        return db[model].length;\n      },\n      update: async ({ model, where, update }) => {\n        const res = convertWhereClause(where, model);\n        res.forEach((record) => {\n          Object.assign(record, update);\n        });\n        return res[0] || null;\n      },\n      delete: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, model);\n        db[model] = table.filter((record) => !res.includes(record));\n      },\n      deleteMany: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, model);\n        let count = 0;\n        db[model] = table.filter((record) => {\n          if (res.includes(record)) {\n            count++;\n            return false;\n          }\n          return !res.includes(record);\n        });\n        return count;\n      },\n      updateMany({ model, where, update }) {\n        const res = convertWhereClause(where, model);\n        res.forEach((record) => {\n          Object.assign(record, update);\n        });\n        return res[0] || null;\n      }\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkRHcGFkcHpOLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQW1DO0FBQ25CO0FBQ0s7QUFDWTtBQUNGO0FBQ0Q7QUFDSTtBQUNDO0FBQ3JCO0FBQ2dCO0FBQ0Y7QUFDSTtBQUNIO0FBQ087QUFDcUI7QUFDTzs7QUFFaEUsc0NBQXNDLDREQUFhO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsY0FBYyxpQ0FBaUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsUUFBUSx3REFBTTtBQUNkLG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0E7QUFDQSxpQ0FBaUMsT0FBTztBQUN4QztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUJBQXlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLHVCQUF1QixhQUFhO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1Asd0JBQXdCLGNBQWM7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHlCQUF5QixxQ0FBcUM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDRCQUE0QjtBQUNyRTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxzQkFBc0IsT0FBTztBQUM3QjtBQUNBLE9BQU87QUFDUCx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCx1QkFBdUIsY0FBYztBQUNyQztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsMkJBQTJCLGNBQWM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFNkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWxhbi9EZXNrdG9wL0FwcHMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkRHcGFkcHpOLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9yYW5kb20nO1xuaW1wb3J0ICd6b2QvdjQnO1xuaW1wb3J0ICdiZXR0ZXItY2FsbCc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9oYXNoJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvY2hhY2hhJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvdXRpbHMnO1xuaW1wb3J0ICdAbm9ibGUvY2lwaGVycy93ZWJjcnlwdG8nO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvYmFzZTY0JztcbmltcG9ydCAnam9zZSc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvc2NyeXB0JztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2hleCc7XG5pbXBvcnQgJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0ICcuL2JldHRlci1hdXRoLkI0UW94ZGdjLm1qcyc7XG5pbXBvcnQgeyBhIGFzIGxvZ2dlciB9IGZyb20gJy4vYmV0dGVyLWF1dGguREJHZklEbmgubWpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlQWRhcHRlciB9IGZyb20gJy4vYmV0dGVyLWF1dGguZ0JsM0ZfeGEubWpzJztcblxuY29uc3QgbWVtb3J5QWRhcHRlciA9IChkYiwgY29uZmlnKSA9PiBjcmVhdGVBZGFwdGVyKHtcbiAgY29uZmlnOiB7XG4gICAgYWRhcHRlcklkOiBcIm1lbW9yeVwiLFxuICAgIGFkYXB0ZXJOYW1lOiBcIk1lbW9yeSBBZGFwdGVyXCIsXG4gICAgdXNlUGx1cmFsOiBmYWxzZSxcbiAgICBkZWJ1Z0xvZ3M6IGNvbmZpZz8uZGVidWdMb2dzIHx8IGZhbHNlLFxuICAgIGN1c3RvbVRyYW5zZm9ybUlucHV0KHByb3BzKSB7XG4gICAgICBpZiAocHJvcHMub3B0aW9ucy5hZHZhbmNlZD8uZGF0YWJhc2U/LnVzZU51bWJlcklkICYmIHByb3BzLmZpZWxkID09PSBcImlkXCIgJiYgcHJvcHMuYWN0aW9uID09PSBcImNyZWF0ZVwiKSB7XG4gICAgICAgIHJldHVybiBkYltwcm9wcy5tb2RlbF0ubGVuZ3RoICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wcy5kYXRhO1xuICAgIH1cbiAgfSxcbiAgYWRhcHRlcjogKHsgZ2V0RmllbGROYW1lLCBvcHRpb25zLCBkZWJ1Z0xvZyB9KSA9PiB7XG4gICAgZnVuY3Rpb24gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCBtb2RlbCkge1xuICAgICAgY29uc3QgdGFibGUgPSBkYlttb2RlbF07XG4gICAgICBpZiAoIXRhYmxlKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcihcbiAgICAgICAgICBgW01lbW9yeUFkYXB0ZXJdIE1vZGVsICR7bW9kZWx9IG5vdCBmb3VuZCBpbiB0aGUgREJgLFxuICAgICAgICAgIE9iamVjdC5rZXlzKGRiKVxuICAgICAgICApO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1vZGVsICR7bW9kZWx9IG5vdCBmb3VuZGApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRhYmxlLmZpbHRlcigocmVjb3JkKSA9PiB7XG4gICAgICAgIHJldHVybiB3aGVyZS5ldmVyeSgoY2xhdXNlKSA9PiB7XG4gICAgICAgICAgbGV0IHsgZmllbGQsIHZhbHVlLCBvcGVyYXRvciB9ID0gY2xhdXNlO1xuICAgICAgICAgIGlmIChvcGVyYXRvciA9PT0gXCJpblwiKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlIG11c3QgYmUgYW4gYXJyYXlcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuaW5jbHVkZXMocmVjb3JkW2ZpZWxkXSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJjb250YWluc1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXS5pbmNsdWRlcyh2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJzdGFydHNfd2l0aFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXS5zdGFydHNXaXRoKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcImVuZHNfd2l0aFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXS5lbmRzV2l0aCh2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvcmRbZmllbGRdID09PSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGU6IGFzeW5jICh7IG1vZGVsLCBkYXRhIH0pID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYWR2YW5jZWQ/LmRhdGFiYXNlPy51c2VOdW1iZXJJZCkge1xuICAgICAgICAgIGRhdGEuaWQgPSBkYlttb2RlbF0ubGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRiW21vZGVsXSkge1xuICAgICAgICAgIGRiW21vZGVsXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGRiW21vZGVsXS5wdXNoKGRhdGEpO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0sXG4gICAgICBmaW5kT25lOiBhc3luYyAoeyBtb2RlbCwgd2hlcmUgfSkgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIG1vZGVsKTtcbiAgICAgICAgY29uc3QgcmVjb3JkID0gcmVzWzBdIHx8IG51bGw7XG4gICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgICB9LFxuICAgICAgZmluZE1hbnk6IGFzeW5jICh7IG1vZGVsLCB3aGVyZSwgc29ydEJ5LCBsaW1pdCwgb2Zmc2V0IH0pID0+IHtcbiAgICAgICAgbGV0IHRhYmxlID0gZGJbbW9kZWxdO1xuICAgICAgICBpZiAod2hlcmUpIHtcbiAgICAgICAgICB0YWJsZSA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgbW9kZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3J0QnkpIHtcbiAgICAgICAgICB0YWJsZSA9IHRhYmxlLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0RmllbGROYW1lKHsgbW9kZWwsIGZpZWxkOiBzb3J0QnkuZmllbGQgfSk7XG4gICAgICAgICAgICBpZiAoc29ydEJ5LmRpcmVjdGlvbiA9PT0gXCJhc2NcIikge1xuICAgICAgICAgICAgICByZXR1cm4gYVtmaWVsZF0gPiBiW2ZpZWxkXSA/IDEgOiAtMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBhW2ZpZWxkXSA8IGJbZmllbGRdID8gMSA6IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHRhYmxlID0gdGFibGUuc2xpY2Uob2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHRhYmxlID0gdGFibGUuc2xpY2UoMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICAgIH0sXG4gICAgICBjb3VudDogYXN5bmMgKHsgbW9kZWwgfSkgPT4ge1xuICAgICAgICByZXR1cm4gZGJbbW9kZWxdLmxlbmd0aDtcbiAgICAgIH0sXG4gICAgICB1cGRhdGU6IGFzeW5jICh7IG1vZGVsLCB3aGVyZSwgdXBkYXRlIH0pID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCBtb2RlbCk7XG4gICAgICAgIHJlcy5mb3JFYWNoKChyZWNvcmQpID0+IHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHJlY29yZCwgdXBkYXRlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNbMF0gfHwgbnVsbDtcbiAgICAgIH0sXG4gICAgICBkZWxldGU6IGFzeW5jICh7IG1vZGVsLCB3aGVyZSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gZGJbbW9kZWxdO1xuICAgICAgICBjb25zdCByZXMgPSBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIG1vZGVsKTtcbiAgICAgICAgZGJbbW9kZWxdID0gdGFibGUuZmlsdGVyKChyZWNvcmQpID0+ICFyZXMuaW5jbHVkZXMocmVjb3JkKSk7XG4gICAgICB9LFxuICAgICAgZGVsZXRlTWFueTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlIH0pID0+IHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBkYlttb2RlbF07XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgbW9kZWwpO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBkYlttb2RlbF0gPSB0YWJsZS5maWx0ZXIoKHJlY29yZCkgPT4ge1xuICAgICAgICAgIGlmIChyZXMuaW5jbHVkZXMocmVjb3JkKSkge1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICFyZXMuaW5jbHVkZXMocmVjb3JkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICAgIH0sXG4gICAgICB1cGRhdGVNYW55KHsgbW9kZWwsIHdoZXJlLCB1cGRhdGUgfSkge1xuICAgICAgICBjb25zdCByZXMgPSBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIG1vZGVsKTtcbiAgICAgICAgcmVzLmZvckVhY2goKHJlY29yZCkgPT4ge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVjb3JkLCB1cGRhdGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc1swXSB8fCBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuXG5leHBvcnQgeyBtZW1vcnlBZGFwdGVyIGFzIG0gfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getAuthTables)\n/* harmony export */ });\nconst getAuthTables = (options) => {\n  const pluginSchema = options.plugins?.reduce(\n    (acc, plugin) => {\n      const schema = plugin.schema;\n      if (!schema) return acc;\n      for (const [key, value] of Object.entries(schema)) {\n        acc[key] = {\n          fields: {\n            ...acc[key]?.fields,\n            ...value.fields\n          },\n          modelName: value.modelName || key\n        };\n      }\n      return acc;\n    },\n    {}\n  );\n  const shouldAddRateLimitTable = options.rateLimit?.storage === \"database\";\n  const rateLimitTable = {\n    rateLimit: {\n      modelName: options.rateLimit?.modelName || \"rateLimit\",\n      fields: {\n        key: {\n          type: \"string\",\n          fieldName: options.rateLimit?.fields?.key || \"key\"\n        },\n        count: {\n          type: \"number\",\n          fieldName: options.rateLimit?.fields?.count || \"count\"\n        },\n        lastRequest: {\n          type: \"number\",\n          bigint: true,\n          fieldName: options.rateLimit?.fields?.lastRequest || \"lastRequest\"\n        }\n      }\n    }\n  };\n  const { user, session, account, ...pluginTables } = pluginSchema || {};\n  const sessionTable = {\n    session: {\n      modelName: options.session?.modelName || \"session\",\n      fields: {\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.expiresAt || \"expiresAt\"\n        },\n        token: {\n          type: \"string\",\n          required: true,\n          fieldName: options.session?.fields?.token || \"token\",\n          unique: true\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.updatedAt || \"updatedAt\"\n        },\n        ipAddress: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.ipAddress || \"ipAddress\"\n        },\n        userAgent: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.userAgent || \"userAgent\"\n        },\n        userId: {\n          type: \"string\",\n          fieldName: options.session?.fields?.userId || \"userId\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true\n        },\n        ...session?.fields,\n        ...options.session?.additionalFields\n      },\n      order: 2\n    }\n  };\n  return {\n    user: {\n      modelName: options.user?.modelName || \"user\",\n      fields: {\n        name: {\n          type: \"string\",\n          required: true,\n          fieldName: options.user?.fields?.name || \"name\",\n          sortable: true\n        },\n        email: {\n          type: \"string\",\n          unique: true,\n          required: true,\n          fieldName: options.user?.fields?.email || \"email\",\n          sortable: true\n        },\n        emailVerified: {\n          type: \"boolean\",\n          defaultValue: () => false,\n          required: true,\n          fieldName: options.user?.fields?.emailVerified || \"emailVerified\"\n        },\n        image: {\n          type: \"string\",\n          required: false,\n          fieldName: options.user?.fields?.image || \"image\"\n        },\n        createdAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...user?.fields,\n        ...options.user?.additionalFields\n      },\n      order: 1\n    },\n    //only add session table if it's not stored in secondary storage\n    ...!options.secondaryStorage || options.session?.storeSessionInDatabase ? sessionTable : {},\n    account: {\n      modelName: options.account?.modelName || \"account\",\n      fields: {\n        accountId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.accountId || \"accountId\"\n        },\n        providerId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.providerId || \"providerId\"\n        },\n        userId: {\n          type: \"string\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true,\n          fieldName: options.account?.fields?.userId || \"userId\"\n        },\n        accessToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.accessToken || \"accessToken\"\n        },\n        refreshToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.refreshToken || \"refreshToken\"\n        },\n        idToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.idToken || \"idToken\"\n        },\n        accessTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"accessTokenExpiresAt\"\n        },\n        refreshTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"refreshTokenExpiresAt\"\n        },\n        scope: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.scope || \"scope\"\n        },\n        password: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.password || \"password\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...account?.fields\n      },\n      order: 3\n    },\n    verification: {\n      modelName: options.verification?.modelName || \"verification\",\n      fields: {\n        identifier: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.identifier || \"identifier\"\n        },\n        value: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.value || \"value\"\n        },\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.verification?.fields?.expiresAt || \"expiresAt\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: false,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: false,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.updatedAt || \"updatedAt\"\n        }\n      },\n      order: 4\n    },\n    ...pluginTables,\n    ...shouldAddRateLimitTable ? rateLimitTable : {}\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getIp)\n/* harmony export */ });\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n\n\nfunction getIp(req, options) {\n  if (options.advanced?.ipAddress?.disableIpTracking) {\n    return null;\n  }\n  if (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.i) {\n    return \"127.0.0.1\";\n  }\n  const headers = \"headers\" in req ? req.headers : req;\n  const defaultHeaders = [\"x-forwarded-for\"];\n  const ipHeaders = options.advanced?.ipAddress?.ipAddressHeaders || defaultHeaders;\n  for (const key of ipHeaders) {\n    const value = \"get\" in headers ? headers.get(key) : headers[key];\n    if (typeof value === \"string\") {\n      const ip = value.split(\",\")[0].trim();\n      if (isValidIP(ip)) {\n        return ip;\n      }\n    }\n  }\n  return null;\n}\nfunction isValidIP(ip) {\n  const ipv4Regex = /^(\\d{1,3}\\.){3}\\d{1,3}$/;\n  if (ipv4Regex.test(ip)) {\n    const parts = ip.split(\".\").map(Number);\n    return parts.every((part) => part >= 0 && part <= 255);\n  }\n  const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;\n  return ipv6Regex.test(ip);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkRjZk5QUzhxLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5RDs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHdEQUFNO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixJQUFJLElBQUksRUFBRSxHQUFHLElBQUk7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsSUFBSSxHQUFHLEVBQUUsWUFBWSxJQUFJO0FBQzVEO0FBQ0E7O0FBRXNCIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5EY2ZOUFM4cS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaSBhcyBpc1Rlc3QgfSBmcm9tICcuL2JldHRlci1hdXRoLjh6b3h6Zy1GLm1qcyc7XG5cbmZ1bmN0aW9uIGdldElwKHJlcSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5hZHZhbmNlZD8uaXBBZGRyZXNzPy5kaXNhYmxlSXBUcmFja2luZykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChpc1Rlc3QpIHtcbiAgICByZXR1cm4gXCIxMjcuMC4wLjFcIjtcbiAgfVxuICBjb25zdCBoZWFkZXJzID0gXCJoZWFkZXJzXCIgaW4gcmVxID8gcmVxLmhlYWRlcnMgOiByZXE7XG4gIGNvbnN0IGRlZmF1bHRIZWFkZXJzID0gW1wieC1mb3J3YXJkZWQtZm9yXCJdO1xuICBjb25zdCBpcEhlYWRlcnMgPSBvcHRpb25zLmFkdmFuY2VkPy5pcEFkZHJlc3M/LmlwQWRkcmVzc0hlYWRlcnMgfHwgZGVmYXVsdEhlYWRlcnM7XG4gIGZvciAoY29uc3Qga2V5IG9mIGlwSGVhZGVycykge1xuICAgIGNvbnN0IHZhbHVlID0gXCJnZXRcIiBpbiBoZWFkZXJzID8gaGVhZGVycy5nZXQoa2V5KSA6IGhlYWRlcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBpcCA9IHZhbHVlLnNwbGl0KFwiLFwiKVswXS50cmltKCk7XG4gICAgICBpZiAoaXNWYWxpZElQKGlwKSkge1xuICAgICAgICByZXR1cm4gaXA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaXNWYWxpZElQKGlwKSB7XG4gIGNvbnN0IGlwdjRSZWdleCA9IC9eKFxcZHsxLDN9XFwuKXszfVxcZHsxLDN9JC87XG4gIGlmIChpcHY0UmVnZXgudGVzdChpcCkpIHtcbiAgICBjb25zdCBwYXJ0cyA9IGlwLnNwbGl0KFwiLlwiKS5tYXAoTnVtYmVyKTtcbiAgICByZXR1cm4gcGFydHMuZXZlcnkoKHBhcnQpID0+IHBhcnQgPj0gMCAmJiBwYXJ0IDw9IDI1NSk7XG4gIH1cbiAgY29uc3QgaXB2NlJlZ2V4ID0gL14oWzAtOWEtZkEtRl17MSw0fTopezd9WzAtOWEtZkEtRl17MSw0fSQvO1xuICByZXR1cm4gaXB2NlJlZ2V4LnRlc3QoaXApO1xufVxuXG5leHBvcnQgeyBnZXRJcCBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BetterAuthError),\n/* harmony export */   M: () => (/* binding */ MissingDependencyError)\n/* harmony export */ });\nclass BetterAuthError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.name = \"BetterAuthError\";\n    this.message = message;\n    this.cause = cause;\n    this.stack = \"\";\n  }\n}\nclass MissingDependencyError extends BetterAuthError {\n  constructor(pkgName) {\n    super(\n      `The package \"${pkgName}\" is required. Make sure it is installed.`,\n      pkgName\n    );\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkRkelNKZi1uLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixRQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUU2RCIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEJldHRlckF1dGhFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgY2F1c2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSBcIkJldHRlckF1dGhFcnJvclwiO1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgIHRoaXMuc3RhY2sgPSBcIlwiO1xuICB9XG59XG5jbGFzcyBNaXNzaW5nRGVwZW5kZW5jeUVycm9yIGV4dGVuZHMgQmV0dGVyQXV0aEVycm9yIHtcbiAgY29uc3RydWN0b3IocGtnTmFtZSkge1xuICAgIHN1cGVyKFxuICAgICAgYFRoZSBwYWNrYWdlIFwiJHtwa2dOYW1lfVwiIGlzIHJlcXVpcmVkLiBNYWtlIHN1cmUgaXQgaXMgaW5zdGFsbGVkLmAsXG4gICAgICBwa2dOYW1lXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBCZXR0ZXJBdXRoRXJyb3IgYXMgQiwgTWlzc2luZ0RlcGVuZGVuY3lFcnJvciBhcyBNIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createKyselyAdapter),\n/* harmony export */   k: () => (/* binding */ kyselyAdapter)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/dialect/mssql/mssql-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! kysely */ \"(rsc)/../../node_modules/kysely/dist/esm/kysely.js\");\n/* harmony import */ var _better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.gBl3F_xa.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs\");\n\n\n\nfunction getDatabaseType(db) {\n  if (!db) {\n    return null;\n  }\n  if (\"dialect\" in db) {\n    return getDatabaseType(db.dialect);\n  }\n  if (\"createDriver\" in db) {\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_1__.SqliteDialect) {\n      return \"sqlite\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_2__.MysqlDialect) {\n      return \"mysql\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_3__.PostgresDialect) {\n      return \"postgres\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_4__.MssqlDialect) {\n      return \"mssql\";\n    }\n  }\n  if (\"aggregate\" in db) {\n    return \"sqlite\";\n  }\n  if (\"getConnection\" in db) {\n    return \"mysql\";\n  }\n  if (\"connect\" in db) {\n    return \"postgres\";\n  }\n  if (\"fileControl\" in db) {\n    return \"sqlite\";\n  }\n  return null;\n}\nconst createKyselyAdapter = async (config) => {\n  const db = config.database;\n  if (!db) {\n    return {\n      kysely: null,\n      databaseType: null\n    };\n  }\n  if (\"db\" in db) {\n    return {\n      kysely: db.db,\n      databaseType: db.type\n    };\n  }\n  if (\"dialect\" in db) {\n    return {\n      kysely: new kysely__WEBPACK_IMPORTED_MODULE_5__.Kysely({ dialect: db.dialect }),\n      databaseType: db.type\n    };\n  }\n  let dialect = void 0;\n  const databaseType = getDatabaseType(db);\n  if (\"createDriver\" in db) {\n    dialect = db;\n  }\n  if (\"aggregate\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_1__.SqliteDialect({\n      database: db\n    });\n  }\n  if (\"getConnection\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_2__.MysqlDialect(db);\n  }\n  if (\"connect\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_3__.PostgresDialect({\n      pool: db\n    });\n  }\n  if (\"fileControl\" in db) {\n    const { BunSqliteDialect } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/better-auth\").then(__webpack_require__.bind(__webpack_require__, /*! ../chunks/bun-sqlite-dialect.mjs */ \"(rsc)/../../node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs\"));\n    dialect = new BunSqliteDialect({\n      database: db\n    });\n  }\n  return {\n    kysely: dialect ? new kysely__WEBPACK_IMPORTED_MODULE_5__.Kysely({ dialect }) : null,\n    databaseType\n  };\n};\n\nconst kyselyAdapter = (db, config) => (0,_better_auth_gBl3F_xa_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n  config: {\n    adapterId: \"kysely\",\n    adapterName: \"Kysely Adapter\",\n    usePlural: config?.usePlural,\n    debugLogs: config?.debugLogs,\n    supportsBooleans: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n    supportsDates: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n    supportsJSON: false\n  },\n  adapter: ({ getFieldName, schema }) => {\n    const withReturning = async (values, builder, model, where) => {\n      let res;\n      if (config?.type === \"mysql\") {\n        await builder.execute();\n        const field = values.id ? \"id\" : where.length > 0 && where[0].field ? where[0].field : \"id\";\n        if (!values.id && where.length === 0) {\n          res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").limit(1).executeTakeFirst();\n          return res;\n        }\n        const value = values[field] || where[0].value;\n        res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").where(getFieldName({ model, field }), \"=\", value).limit(1).executeTakeFirst();\n        return res;\n      }\n      if (config?.type === \"mssql\") {\n        res = await builder.outputAll(\"inserted\").executeTakeFirst();\n        return res;\n      }\n      res = await builder.returningAll().executeTakeFirst();\n      return res;\n    };\n    function transformValueToDB(value, model, field) {\n      if (field === \"id\") {\n        return value;\n      }\n      const { type = \"sqlite\" } = config || {};\n      let f = schema[model]?.fields[field];\n      if (!f) {\n        f = Object.values(schema).find((f2) => f2.modelName === model);\n      }\n      if (f.type === \"boolean\" && (type === \"sqlite\" || type === \"mssql\") && value !== null && value !== void 0) {\n        return value ? 1 : 0;\n      }\n      if (f.type === \"date\" && value && value instanceof Date) {\n        return type === \"sqlite\" ? value.toISOString() : value;\n      }\n      return value;\n    }\n    function convertWhereClause(model, w) {\n      if (!w)\n        return {\n          and: null,\n          or: null\n        };\n      const conditions = {\n        and: [],\n        or: []\n      };\n      w.forEach((condition) => {\n        let {\n          field: _field,\n          value,\n          operator = \"=\",\n          connector = \"AND\"\n        } = condition;\n        const field = getFieldName({ model, field: _field });\n        value = transformValueToDB(value, model, _field);\n        const expr = (eb) => {\n          if (operator.toLowerCase() === \"in\") {\n            return eb(field, \"in\", Array.isArray(value) ? value : [value]);\n          }\n          if (operator === \"contains\") {\n            return eb(field, \"like\", `%${value}%`);\n          }\n          if (operator === \"starts_with\") {\n            return eb(field, \"like\", `${value}%`);\n          }\n          if (operator === \"ends_with\") {\n            return eb(field, \"like\", `%${value}`);\n          }\n          if (operator === \"eq\") {\n            return eb(field, \"=\", value);\n          }\n          if (operator === \"ne\") {\n            return eb(field, \"<>\", value);\n          }\n          if (operator === \"gt\") {\n            return eb(field, \">\", value);\n          }\n          if (operator === \"gte\") {\n            return eb(field, \">=\", value);\n          }\n          if (operator === \"lt\") {\n            return eb(field, \"<\", value);\n          }\n          if (operator === \"lte\") {\n            return eb(field, \"<=\", value);\n          }\n          return eb(field, operator, value);\n        };\n        if (connector === \"OR\") {\n          conditions.or.push(expr);\n        } else {\n          conditions.and.push(expr);\n        }\n      });\n      return {\n        and: conditions.and.length ? conditions.and : null,\n        or: conditions.or.length ? conditions.or : null\n      };\n    }\n    return {\n      async create({ data, model }) {\n        const builder = db.insertInto(model).values(data);\n        return await withReturning(data, builder, model, []);\n      },\n      async findOne({ model, where, select }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model).selectAll();\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.executeTakeFirst();\n        if (!res) return null;\n        return res;\n      },\n      async findMany({ model, where, limit, offset, sortBy }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        if (config?.type === \"mssql\") {\n          if (!offset) {\n            query = query.top(limit || 100);\n          }\n        } else {\n          query = query.limit(limit || 100);\n        }\n        if (sortBy) {\n          query = query.orderBy(\n            getFieldName({ model, field: sortBy.field }),\n            sortBy.direction\n          );\n        }\n        if (offset) {\n          if (config?.type === \"mssql\") {\n            if (!sortBy) {\n              query = query.orderBy(getFieldName({ model, field: \"id\" }));\n            }\n            query = query.offset(offset).fetch(limit || 100);\n          } else {\n            query = query.offset(offset);\n          }\n        }\n        const res = await query.selectAll().execute();\n        if (!res) return [];\n        return res;\n      },\n      async update({ model, where, update: values }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.updateTable(model).set(values);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        return await withReturning(values, query, model, where);\n      },\n      async updateMany({ model, where, update: values }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.updateTable(model).set(values);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.execute();\n        return res.length;\n      },\n      async count({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model).select(db.fn.count(\"id\").as(\"count\"));\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.execute();\n        return res[0].count;\n      },\n      async delete({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.deleteFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        await query.execute();\n      },\n      async deleteMany({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.deleteFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        return (await query.execute()).length;\n      },\n      options: config\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBaseURL),\n/* harmony export */   b: () => (/* binding */ getHost),\n/* harmony export */   c: () => (/* binding */ getProtocol),\n/* harmony export */   g: () => (/* binding */ getOrigin)\n/* harmony export */ });\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nfunction checkHasPath(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.pathname !== \"/\";\n  } catch (error) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n      `Invalid base URL: ${url}. Please provide a valid base URL.`\n    );\n  }\n}\nfunction withPath(url, path = \"/api/auth\") {\n  const hasPath = checkHasPath(url);\n  if (hasPath) {\n    return url;\n  }\n  path = path.startsWith(\"/\") ? path : `/${path}`;\n  return `${url.replace(/\\/+$/, \"\")}${path}`;\n}\nfunction getBaseURL(url, path, request) {\n  if (url) {\n    return withPath(url, path);\n  }\n  const fromEnv = _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NEXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_AUTH_URL || (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL !== \"/\" ? _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL : void 0);\n  if (fromEnv) {\n    return withPath(fromEnv, path);\n  }\n  const fromRequest = request?.headers.get(\"x-forwarded-host\");\n  const fromRequestProto = request?.headers.get(\"x-forwarded-proto\");\n  if (fromRequest && fromRequestProto) {\n    return withPath(`${fromRequestProto}://${fromRequest}`, path);\n  }\n  if (request) {\n    const url2 = getOrigin(request.url);\n    if (!url2) {\n      throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n        \"Could not get origin from request. Please provide a valid base URL.\"\n      );\n    }\n    return withPath(url2, path);\n  }\n  if (typeof window !== \"undefined\" && window.location) {\n    return withPath(window.location.origin, path);\n  }\n  return void 0;\n}\nfunction getOrigin(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.origin;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getProtocol(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getHost(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.host;\n  } catch (error) {\n    return url;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLlZUWE5MRk1ULm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0Q7QUFDWTs7QUFFbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osY0FBYyx3REFBZTtBQUM3QiwyQkFBMkIsSUFBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLEtBQUs7QUFDaEQsWUFBWSx3QkFBd0IsRUFBRSxLQUFLO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0RBQUcsb0JBQW9CLHdEQUFHLGdDQUFnQyx3REFBRywyQkFBMkIsd0RBQUcsZ0NBQWdDLHdEQUFHLDBCQUEwQix3REFBRyxvQkFBb0Isd0RBQUc7QUFDcE07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlCQUFpQixLQUFLLFlBQVk7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0RBQWU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRTJFIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5WVFhOTEZNVC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZSBhcyBlbnYgfSBmcm9tICcuL2JldHRlci1hdXRoLjh6b3h6Zy1GLm1qcyc7XG5pbXBvcnQgeyBCIGFzIEJldHRlckF1dGhFcnJvciB9IGZyb20gJy4vYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzJztcblxuZnVuY3Rpb24gY2hlY2tIYXNQYXRoKHVybCkge1xuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsKTtcbiAgICByZXR1cm4gcGFyc2VkVXJsLnBhdGhuYW1lICE9PSBcIi9cIjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgQmV0dGVyQXV0aEVycm9yKFxuICAgICAgYEludmFsaWQgYmFzZSBVUkw6ICR7dXJsfS4gUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBiYXNlIFVSTC5gXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gd2l0aFBhdGgodXJsLCBwYXRoID0gXCIvYXBpL2F1dGhcIikge1xuICBjb25zdCBoYXNQYXRoID0gY2hlY2tIYXNQYXRoKHVybCk7XG4gIGlmIChoYXNQYXRoKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBwYXRoID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IHBhdGggOiBgLyR7cGF0aH1gO1xuICByZXR1cm4gYCR7dXJsLnJlcGxhY2UoL1xcLyskLywgXCJcIil9JHtwYXRofWA7XG59XG5mdW5jdGlvbiBnZXRCYXNlVVJMKHVybCwgcGF0aCwgcmVxdWVzdCkge1xuICBpZiAodXJsKSB7XG4gICAgcmV0dXJuIHdpdGhQYXRoKHVybCwgcGF0aCk7XG4gIH1cbiAgY29uc3QgZnJvbUVudiA9IGVudi5CRVRURVJfQVVUSF9VUkwgfHwgZW52Lk5FWFRfUFVCTElDX0JFVFRFUl9BVVRIX1VSTCB8fCBlbnYuUFVCTElDX0JFVFRFUl9BVVRIX1VSTCB8fCBlbnYuTlVYVF9QVUJMSUNfQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5OVVhUX1BVQkxJQ19BVVRIX1VSTCB8fCAoZW52LkJBU0VfVVJMICE9PSBcIi9cIiA/IGVudi5CQVNFX1VSTCA6IHZvaWQgMCk7XG4gIGlmIChmcm9tRW52KSB7XG4gICAgcmV0dXJuIHdpdGhQYXRoKGZyb21FbnYsIHBhdGgpO1xuICB9XG4gIGNvbnN0IGZyb21SZXF1ZXN0ID0gcmVxdWVzdD8uaGVhZGVycy5nZXQoXCJ4LWZvcndhcmRlZC1ob3N0XCIpO1xuICBjb25zdCBmcm9tUmVxdWVzdFByb3RvID0gcmVxdWVzdD8uaGVhZGVycy5nZXQoXCJ4LWZvcndhcmRlZC1wcm90b1wiKTtcbiAgaWYgKGZyb21SZXF1ZXN0ICYmIGZyb21SZXF1ZXN0UHJvdG8pIHtcbiAgICByZXR1cm4gd2l0aFBhdGgoYCR7ZnJvbVJlcXVlc3RQcm90b306Ly8ke2Zyb21SZXF1ZXN0fWAsIHBhdGgpO1xuICB9XG4gIGlmIChyZXF1ZXN0KSB7XG4gICAgY29uc3QgdXJsMiA9IGdldE9yaWdpbihyZXF1ZXN0LnVybCk7XG4gICAgaWYgKCF1cmwyKSB7XG4gICAgICB0aHJvdyBuZXcgQmV0dGVyQXV0aEVycm9yKFxuICAgICAgICBcIkNvdWxkIG5vdCBnZXQgb3JpZ2luIGZyb20gcmVxdWVzdC4gUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBiYXNlIFVSTC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHdpdGhQYXRoKHVybDIsIHBhdGgpO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbikge1xuICAgIHJldHVybiB3aXRoUGF0aCh3aW5kb3cubG9jYXRpb24ub3JpZ2luLCBwYXRoKTtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gZ2V0T3JpZ2luKHVybCkge1xuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsKTtcbiAgICByZXR1cm4gcGFyc2VkVXJsLm9yaWdpbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UHJvdG9jb2wodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEhvc3QodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwuaG9zdDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldEJhc2VVUkwgYXMgYSwgZ2V0SG9zdCBhcyBiLCBnZXRQcm90b2NvbCBhcyBjLCBnZXRPcmlnaW4gYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ checkPassword),\n/* harmony export */   v: () => (/* binding */ validatePassword)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/../../node_modules/better-call/dist/index.js\");\n\n\nasync function validatePassword(ctx, data) {\n  const accounts = await ctx.context.internalAdapter.findAccounts(data.userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword) {\n    return false;\n  }\n  const compare = await ctx.context.password.verify({\n    hash: currentPassword,\n    password: data.password\n  });\n  return compare;\n}\nasync function checkPassword(userId, c) {\n  const accounts = await c.context.internalAdapter.findAccounts(userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword || !c.body.password) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"No password credential found\"\n    });\n  }\n  const compare = await c.context.password.verify({\n    hash: currentPassword,\n    password: c.body.password\n  });\n  if (!compare) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"Invalid password\"\n    });\n  }\n  return true;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLll3RFFob1BjLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUM7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGlEQUFRO0FBQ3RCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsY0FBYyxpREFBUTtBQUN0QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRXFEIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5Zd0RRaG9QYy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICdiZXR0ZXItY2FsbCc7XG5cbmFzeW5jIGZ1bmN0aW9uIHZhbGlkYXRlUGFzc3dvcmQoY3R4LCBkYXRhKSB7XG4gIGNvbnN0IGFjY291bnRzID0gYXdhaXQgY3R4LmNvbnRleHQuaW50ZXJuYWxBZGFwdGVyLmZpbmRBY2NvdW50cyhkYXRhLnVzZXJJZCk7XG4gIGNvbnN0IGNyZWRlbnRpYWxBY2NvdW50ID0gYWNjb3VudHM/LmZpbmQoXG4gICAgKGFjY291bnQpID0+IGFjY291bnQucHJvdmlkZXJJZCA9PT0gXCJjcmVkZW50aWFsXCJcbiAgKTtcbiAgY29uc3QgY3VycmVudFBhc3N3b3JkID0gY3JlZGVudGlhbEFjY291bnQ/LnBhc3N3b3JkO1xuICBpZiAoIWNyZWRlbnRpYWxBY2NvdW50IHx8ICFjdXJyZW50UGFzc3dvcmQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgY29tcGFyZSA9IGF3YWl0IGN0eC5jb250ZXh0LnBhc3N3b3JkLnZlcmlmeSh7XG4gICAgaGFzaDogY3VycmVudFBhc3N3b3JkLFxuICAgIHBhc3N3b3JkOiBkYXRhLnBhc3N3b3JkXG4gIH0pO1xuICByZXR1cm4gY29tcGFyZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrUGFzc3dvcmQodXNlcklkLCBjKSB7XG4gIGNvbnN0IGFjY291bnRzID0gYXdhaXQgYy5jb250ZXh0LmludGVybmFsQWRhcHRlci5maW5kQWNjb3VudHModXNlcklkKTtcbiAgY29uc3QgY3JlZGVudGlhbEFjY291bnQgPSBhY2NvdW50cz8uZmluZChcbiAgICAoYWNjb3VudCkgPT4gYWNjb3VudC5wcm92aWRlcklkID09PSBcImNyZWRlbnRpYWxcIlxuICApO1xuICBjb25zdCBjdXJyZW50UGFzc3dvcmQgPSBjcmVkZW50aWFsQWNjb3VudD8ucGFzc3dvcmQ7XG4gIGlmICghY3JlZGVudGlhbEFjY291bnQgfHwgIWN1cnJlbnRQYXNzd29yZCB8fCAhYy5ib2R5LnBhc3N3b3JkKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFwiQkFEX1JFUVVFU1RcIiwge1xuICAgICAgbWVzc2FnZTogXCJObyBwYXNzd29yZCBjcmVkZW50aWFsIGZvdW5kXCJcbiAgICB9KTtcbiAgfVxuICBjb25zdCBjb21wYXJlID0gYXdhaXQgYy5jb250ZXh0LnBhc3N3b3JkLnZlcmlmeSh7XG4gICAgaGFzaDogY3VycmVudFBhc3N3b3JkLFxuICAgIHBhc3N3b3JkOiBjLmJvZHkucGFzc3dvcmRcbiAgfSk7XG4gIGlmICghY29tcGFyZSkge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcIkJBRF9SRVFVRVNUXCIsIHtcbiAgICAgIG1lc3NhZ2U6IFwiSW52YWxpZCBwYXNzd29yZFwiXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCB7IGNoZWNrUGFzc3dvcmQgYXMgYywgdmFsaWRhdGVQYXNzd29yZCBhcyB2IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createAdapter)\n/* harmony export */ });\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DORkW_Ge.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.DBGfIDnh.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! better-call */ \"(rsc)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction withApplyDefault(value, field, action) {\n  if (action === \"update\") {\n    return value;\n  }\n  if (value === void 0 || value === null) {\n    if (field.defaultValue !== void 0) {\n      if (typeof field.defaultValue === \"function\") {\n        return field.defaultValue();\n      }\n      return field.defaultValue;\n    }\n  }\n  return value;\n}\n\nlet debugLogs = [];\nlet transactionId = -1;\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    yellow: \"\\x1B[33m\",\n    magenta: \"\\x1B[35m\"},\n  bg: {\n    black: \"\\x1B[40m\"}\n};\nconst createAdapter = ({\n  adapter,\n  config: cfg\n}) => (options) => {\n  const config = {\n    ...cfg,\n    supportsBooleans: cfg.supportsBooleans ?? true,\n    supportsDates: cfg.supportsDates ?? true,\n    supportsJSON: cfg.supportsJSON ?? false,\n    adapterName: cfg.adapterName ?? cfg.adapterId,\n    supportsNumericIds: cfg.supportsNumericIds ?? true\n  };\n  if (options.advanced?.database?.useNumberId === true && config.supportsNumericIds === false) {\n    throw new Error(\n      `[${config.adapterName}] Your database or database adapter does not support numeric ids. Please disable \"useNumberId\" in your config.`\n    );\n  }\n  const schema = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(options);\n  const getDefaultFieldName = ({\n    field,\n    model: unsafe_model\n  }) => {\n    if (field === \"id\" || field === \"_id\") {\n      return \"id\";\n    }\n    const model = getDefaultModelName(unsafe_model);\n    let f = schema[model]?.fields[field];\n    if (!f) {\n      f = Object.values(schema[model]?.fields).find(\n        (f2) => f2.fieldName === field\n      );\n    }\n    if (!f) {\n      debugLog(`Field ${field} not found in model ${model}`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Field ${field} not found in model ${model}`);\n    }\n    return field;\n  };\n  const getDefaultModelName = (model) => {\n    if (config.usePlural && model.charAt(model.length - 1) === \"s\") {\n      let pluralessModel = model.slice(0, -1);\n      let m2 = schema[pluralessModel] ? pluralessModel : void 0;\n      if (!m2) {\n        m2 = Object.entries(schema).find(\n          ([_, f]) => f.modelName === pluralessModel\n        )?.[0];\n      }\n      if (m2) {\n        return m2;\n      }\n    }\n    let m = schema[model] ? model : void 0;\n    if (!m) {\n      m = Object.entries(schema).find(([_, f]) => f.modelName === model)?.[0];\n    }\n    if (!m) {\n      debugLog(`Model \"${model}\" not found in schema`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Model \"${model}\" not found in schema`);\n    }\n    return m;\n  };\n  const getModelName = (model) => {\n    const defaultModelKey = getDefaultModelName(model);\n    const usePlural = config && config.usePlural;\n    const useCustomModelName = schema && schema[defaultModelKey] && schema[defaultModelKey].modelName !== model;\n    if (useCustomModelName) {\n      return usePlural ? `${schema[defaultModelKey].modelName}s` : schema[defaultModelKey].modelName;\n    }\n    return usePlural ? `${model}s` : model;\n  };\n  function getFieldName({\n    model: model_name,\n    field: field_name\n  }) {\n    const model = getDefaultModelName(model_name);\n    const field = getDefaultFieldName({ model, field: field_name });\n    return schema[model]?.fields[field]?.fieldName || field;\n  }\n  const debugLog = (...args) => {\n    if (config.debugLogs === true || typeof config.debugLogs === \"object\") {\n      if (typeof config.debugLogs === \"object\" && \"isRunningAdapterTests\" in config.debugLogs) {\n        if (config.debugLogs.isRunningAdapterTests) {\n          args.shift();\n          debugLogs.push(args);\n        }\n        return;\n      }\n      if (typeof config.debugLogs === \"object\" && config.debugLogs.logCondition && !config.debugLogs.logCondition?.()) {\n        return;\n      }\n      if (typeof args[0] === \"object\" && \"method\" in args[0]) {\n        const method = args.shift().method;\n        if (typeof config.debugLogs === \"object\") {\n          if (method === \"create\" && !config.debugLogs.create) {\n            return;\n          } else if (method === \"update\" && !config.debugLogs.update) {\n            return;\n          } else if (method === \"updateMany\" && !config.debugLogs.updateMany) {\n            return;\n          } else if (method === \"findOne\" && !config.debugLogs.findOne) {\n            return;\n          } else if (method === \"findMany\" && !config.debugLogs.findMany) {\n            return;\n          } else if (method === \"delete\" && !config.debugLogs.delete) {\n            return;\n          } else if (method === \"deleteMany\" && !config.debugLogs.deleteMany) {\n            return;\n          } else if (method === \"count\" && !config.debugLogs.count) {\n            return;\n          }\n        }\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__.a.info(`[${config.adapterName}]`, ...args);\n      } else {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__.a.info(`[${config.adapterName}]`, ...args);\n      }\n    }\n  };\n  const idField = ({\n    customModelName,\n    forceAllowId\n  }) => {\n    const shouldGenerateId = !config.disableIdGeneration && !options.advanced?.database?.useNumberId && !forceAllowId;\n    const model = getDefaultModelName(customModelName ?? \"id\");\n    return {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\",\n      required: shouldGenerateId ? true : false,\n      ...shouldGenerateId ? {\n        defaultValue() {\n          if (config.disableIdGeneration) return void 0;\n          const useNumberId = options.advanced?.database?.useNumberId;\n          let generateId$1 = options.advanced?.database?.generateId;\n          if (options.advanced?.generateId !== void 0) {\n            _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__.a.warn(\n              \"Your Better Auth config includes advanced.generateId which is deprecated. Please use advanced.database.generateId instead. This will be removed in future releases.\"\n            );\n            generateId$1 = options.advanced?.generateId;\n          }\n          if (generateId$1 === false || useNumberId) return void 0;\n          if (generateId$1) {\n            return generateId$1({\n              model\n            });\n          }\n          if (config.customIdGenerator) {\n            return config.customIdGenerator({ model });\n          }\n          return (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__.g)();\n        }\n      } : {}\n    };\n  };\n  const getFieldAttributes = ({\n    model,\n    field\n  }) => {\n    const defaultModelName = getDefaultModelName(model);\n    const defaultFieldName = getDefaultFieldName({\n      field,\n      model\n    });\n    const fields = schema[defaultModelName].fields;\n    fields.id = idField({ customModelName: defaultModelName });\n    return fields[defaultFieldName];\n  };\n  const adapterInstance = adapter({\n    options,\n    schema,\n    debugLog,\n    getFieldName,\n    getModelName,\n    getDefaultModelName,\n    getDefaultFieldName,\n    getFieldAttributes\n  });\n  const transformInput = async (data, unsafe_model, action, forceAllowId) => {\n    const transformedData = {};\n    const fields = schema[unsafe_model].fields;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    if (!config.disableIdGeneration && !options.advanced?.database?.useNumberId) {\n      fields.id = idField({\n        customModelName: unsafe_model,\n        forceAllowId: forceAllowId && \"id\" in data\n      });\n    }\n    for (const field in fields) {\n      const value = data[field];\n      const fieldAttributes = fields[field];\n      let newFieldName = newMappedKeys[field] || fields[field].fieldName || field;\n      if (value === void 0 && (!fieldAttributes.defaultValue && !fieldAttributes.transform?.input || action === \"update\")) {\n        continue;\n      }\n      let newValue = withApplyDefault(value, fieldAttributes, action);\n      if (fieldAttributes.transform?.input) {\n        newValue = await fieldAttributes.transform.input(newValue);\n      }\n      if (fieldAttributes.references?.field === \"id\" && options.advanced?.database?.useNumberId) {\n        if (Array.isArray(newValue)) {\n          newValue = newValue.map(Number);\n        } else {\n          newValue = Number(newValue);\n        }\n      } else if (config.supportsJSON === false && typeof newValue === \"object\" && //@ts-expect-error -Future proofing\n      fieldAttributes.type === \"json\") {\n        newValue = JSON.stringify(newValue);\n      } else if (config.supportsDates === false && newValue instanceof Date && fieldAttributes.type === \"date\") {\n        newValue = newValue.toISOString();\n      } else if (config.supportsBooleans === false && typeof newValue === \"boolean\") {\n        newValue = newValue ? 1 : 0;\n      }\n      if (config.customTransformInput) {\n        newValue = config.customTransformInput({\n          data: newValue,\n          action,\n          field: newFieldName,\n          fieldAttributes,\n          model: unsafe_model,\n          schema,\n          options\n        });\n      }\n      transformedData[newFieldName] = newValue;\n    }\n    return transformedData;\n  };\n  const transformOutput = async (data, unsafe_model, select = []) => {\n    if (!data) return null;\n    const newMappedKeys = config.mapKeysTransformOutput ?? {};\n    const transformedData = {};\n    const tableSchema = schema[unsafe_model].fields;\n    const idKey = Object.entries(newMappedKeys).find(\n      ([_, v]) => v === \"id\"\n    )?.[0];\n    tableSchema[idKey ?? \"id\"] = {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\"\n    };\n    for (const key in tableSchema) {\n      if (select.length && !select.includes(key)) {\n        continue;\n      }\n      const field = tableSchema[key];\n      if (field) {\n        const originalKey = field.fieldName || key;\n        let newValue = data[Object.entries(newMappedKeys).find(\n          ([_, v]) => v === originalKey\n        )?.[0] || originalKey];\n        if (field.transform?.output) {\n          newValue = await field.transform.output(newValue);\n        }\n        let newFieldName = newMappedKeys[key] || key;\n        if (originalKey === \"id\" || field.references?.field === \"id\") {\n          if (typeof newValue !== \"undefined\") newValue = String(newValue);\n        } else if (config.supportsJSON === false && typeof newValue === \"string\" && //@ts-expect-error - Future proofing\n        field.type === \"json\") {\n          newValue = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(newValue);\n        } else if (config.supportsDates === false && typeof newValue === \"string\" && field.type === \"date\") {\n          newValue = new Date(newValue);\n        } else if (config.supportsBooleans === false && typeof newValue === \"number\" && field.type === \"boolean\") {\n          newValue = newValue === 1;\n        }\n        if (config.customTransformOutput) {\n          newValue = config.customTransformOutput({\n            data: newValue,\n            field: newFieldName,\n            fieldAttributes: field,\n            select,\n            model: unsafe_model,\n            schema,\n            options\n          });\n        }\n        transformedData[newFieldName] = newValue;\n      }\n    }\n    return transformedData;\n  };\n  const transformWhereClause = ({\n    model,\n    where\n  }) => {\n    if (!where) return void 0;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    return where.map((w) => {\n      const {\n        field: unsafe_field,\n        value,\n        operator = \"eq\",\n        connector = \"AND\"\n      } = w;\n      if (operator === \"in\") {\n        if (!Array.isArray(value)) {\n          throw new Error(\"Value must be an array\");\n        }\n      }\n      const defaultModelName = getDefaultModelName(model);\n      const defaultFieldName = getDefaultFieldName({\n        field: unsafe_field,\n        model\n      });\n      const fieldName = newMappedKeys[defaultFieldName] || getFieldName({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      const fieldAttr = getFieldAttributes({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      if (defaultFieldName === \"id\" || fieldAttr.references?.field === \"id\") {\n        if (options.advanced?.database?.useNumberId) {\n          if (Array.isArray(value)) {\n            return {\n              operator,\n              connector,\n              field: fieldName,\n              value: value.map(Number)\n            };\n          }\n          return {\n            operator,\n            connector,\n            field: fieldName,\n            value: Number(value)\n          };\n        }\n      }\n      return {\n        operator,\n        connector,\n        field: fieldName,\n        value\n      };\n    });\n  };\n  return {\n    create: async ({\n      data: unsafeData,\n      model: unsafeModel,\n      select,\n      forceAllowId = false\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      if (\"id\" in unsafeData && !forceAllowId) {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_2__.a.warn(\n          `[${config.adapterName}] - You are trying to create a record with an id. This is not allowed as we handle id generation for you, unless you pass in the \\`forceAllowId\\` parameter. The id will be ignored.`\n        );\n        const err = new Error();\n        const stack = err.stack?.split(\"\\n\").filter((_, i) => i !== 1).join(\"\\n\").replace(\"Error:\", \"Create method with `id` being called at:\");\n        console.log(stack);\n        unsafeData.id = void 0;\n      }\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(\n        unsafeData,\n        unsafeModel,\n        \"create\",\n        forceAllowId\n      );\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.create({ data, model });\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"DB Result\")}:`,\n        { model, res }\n      );\n      const transformed = await transformOutput(res, unsafeModel, select);\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    update: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(\n        unsafeData,\n        unsafeModel,\n        \"update\"\n      );\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.update({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await transformOutput(res, unsafeModel);\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    updateMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(unsafeData, unsafeModel, \"update\");\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const updatedCount = await adapterInstance.updateMany({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: updatedCount }\n      );\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: updatedCount }\n      );\n      return updatedCount;\n    },\n    findOne: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      select\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findOne\")}:`,\n        { model, where, select }\n      );\n      const res = await adapterInstance.findOne({\n        model,\n        where,\n        select\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await transformOutput(\n        res,\n        unsafeModel,\n        select\n      );\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    findMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      limit: unsafeLimit,\n      sortBy,\n      offset\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const limit = unsafeLimit ?? options.advanced?.database?.defaultFindManyLimit ?? 100;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findMany\")}:`,\n        { model, where, limit, sortBy, offset }\n      );\n      const res = await adapterInstance.findMany({\n        model,\n        where,\n        limit,\n        sortBy,\n        offset\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await Promise.all(\n        res.map(async (r) => await transformOutput(r, unsafeModel))\n      );\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    delete: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"delete\")}:`,\n        { model, where }\n      );\n      await adapterInstance.delete({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"delete\")} ${formatAction(\"DB Result\")}:`,\n        { model }\n      );\n    },\n    deleteMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DeleteMany\")}:`,\n        { model, where }\n      );\n      const res = await adapterInstance.deleteMany({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      return res;\n    },\n    count: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          where\n        }\n      );\n      const res = await adapterInstance.count({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          data: res\n        }\n      );\n      return res;\n    },\n    createSchema: adapterInstance.createSchema ? async (_, file) => {\n      const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(options);\n      if (options.secondaryStorage && !options.session?.storeSessionInDatabase) {\n        delete tables.session;\n      }\n      if (options.rateLimit && options.rateLimit.storage === \"database\" && // rate-limit will default to enabled in production,\n      // and given storage is database, it will try to use the rate-limit table,\n      // so we should make sure to generate rate-limit table schema\n      (typeof options.rateLimit.enabled === \"undefined\" || // and of course if they forcefully set to true, then they want rate-limit,\n      // thus we should also generate rate-limit table schema\n      options.rateLimit.enabled === true)) {\n        tables.ratelimit = {\n          modelName: options.rateLimit.modelName ?? \"ratelimit\",\n          fields: {\n            key: {\n              type: \"string\",\n              unique: true,\n              required: true,\n              fieldName: options.rateLimit.fields?.key ?? \"key\"\n            },\n            count: {\n              type: \"number\",\n              required: true,\n              fieldName: options.rateLimit.fields?.count ?? \"count\"\n            },\n            lastRequest: {\n              type: \"number\",\n              required: true,\n              bigint: true,\n              defaultValue: () => Date.now(),\n              fieldName: options.rateLimit.fields?.lastRequest ?? \"lastRequest\"\n            }\n          }\n        };\n      }\n      return adapterInstance.createSchema({ file, tables });\n    } : void 0,\n    options: {\n      adapterConfig: config,\n      ...adapterInstance.options ?? {}\n    },\n    id: config.adapterId,\n    // Secretly export values ONLY if this adapter has enabled adapter-test-debug-logs.\n    // This would then be used during our adapter-tests to help print debug logs if a test fails.\n    //@ts-expect-error - ^^\n    ...config.debugLogs?.isRunningAdapterTests ? {\n      adapterTestDebugLogs: {\n        resetDebugLogs() {\n          debugLogs = [];\n        },\n        printDebugLogs() {\n          const separator = `\\u2500`.repeat(80);\n          let log = debugLogs.reverse().map((log2) => {\n            log2[0] = `\n${log2[0]}`;\n            return [...log2, \"\\n\"];\n          }).reduce(\n            (prev, curr) => {\n              return [...curr, ...prev];\n            },\n            [`\n${separator}`]\n          );\n          console.log(...log);\n        }\n      }\n    } : {}\n  };\n};\nfunction formatTransactionId(transactionId2) {\n  return `${colors.fg.magenta}#${transactionId2}${colors.reset}`;\n}\nfunction formatStep(step, total) {\n  return `${colors.bg.black}${colors.fg.yellow}[${step}/${total}]${colors.reset}`;\n}\nfunction formatMethod(method) {\n  return `${colors.bright}${method}${colors.reset}`;\n}\nfunction formatAction(action) {\n  return `${colors.dim}(${action})${colors.reset}`;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ accountSchema),\n/* harmony export */   b: () => (/* binding */ parseUserOutput),\n/* harmony export */   c: () => (/* binding */ parseAccountOutput),\n/* harmony export */   d: () => (/* binding */ parseSessionOutput),\n/* harmony export */   e: () => (/* binding */ parseInputData),\n/* harmony export */   f: () => (/* binding */ parseUserInput),\n/* harmony export */   g: () => (/* binding */ getAllFields),\n/* harmony export */   h: () => (/* binding */ parseAdditionalUserInput),\n/* harmony export */   i: () => (/* binding */ parseAccountInput),\n/* harmony export */   j: () => (/* binding */ parseSessionInput),\n/* harmony export */   m: () => (/* binding */ mergeSchema),\n/* harmony export */   p: () => (/* binding */ parseOutputData),\n/* harmony export */   s: () => (/* binding */ sessionSchema),\n/* harmony export */   u: () => (/* binding */ userSchema),\n/* harmony export */   v: () => (/* binding */ verificationSchema)\n/* harmony export */ });\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/../../node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/../../node_modules/zod/v4/classic/coerce.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/../../node_modules/better-call/dist/index.js\");\n\n\n\nconst accountSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  providerId: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  accountId: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  userId: zod_v4__WEBPACK_IMPORTED_MODULE_2__.string(),\n  accessToken: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  refreshToken: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  idToken: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  /**\n   * Access token expires at\n   */\n  accessTokenExpiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().nullish(),\n  /**\n   * Refresh token expires at\n   */\n  refreshTokenExpiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().nullish(),\n  /**\n   * The scopes that the user has authorized\n   */\n  scope: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  /**\n   * Password is only stored in the credential provider\n   */\n  password: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  createdAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date())\n});\nconst userSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  email: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().transform((val) => val.toLowerCase()),\n  emailVerified: zod_v4__WEBPACK_IMPORTED_MODULE_1__.boolean().default(false),\n  name: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  image: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  createdAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date())\n});\nconst sessionSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  userId: zod_v4__WEBPACK_IMPORTED_MODULE_2__.string(),\n  expiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date(),\n  createdAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  token: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  ipAddress: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish(),\n  userAgent: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string().nullish()\n});\nconst verificationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_1__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  value: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string(),\n  createdAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date().default(() => /* @__PURE__ */ new Date()),\n  expiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_1__.date(),\n  identifier: zod_v4__WEBPACK_IMPORTED_MODULE_1__.string()\n});\nfunction parseOutputData(data, schema) {\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in data) {\n    const field = fields[key];\n    if (!field) {\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (field.returned === false) {\n      continue;\n    }\n    parsedData[key] = data[key];\n  }\n  return parsedData;\n}\nfunction getAllFields(options, table) {\n  let schema = {\n    ...table === \"user\" ? options.user?.additionalFields : {},\n    ...table === \"session\" ? options.session?.additionalFields : {}\n  };\n  for (const plugin of options.plugins || []) {\n    if (plugin.schema && plugin.schema[table]) {\n      schema = {\n        ...schema,\n        ...plugin.schema[table].fields\n      };\n    }\n  }\n  return schema;\n}\nfunction parseUserOutput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseOutputData(user, { fields: schema });\n}\nfunction parseAccountOutput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseOutputData(account, { fields: schema });\n}\nfunction parseSessionOutput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseOutputData(session, { fields: schema });\n}\nfunction parseInputData(data, schema) {\n  const action = schema.action || \"create\";\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in fields) {\n    if (key in data) {\n      if (fields[key].input === false) {\n        if (fields[key].defaultValue) {\n          parsedData[key] = fields[key].defaultValue;\n          continue;\n        }\n        continue;\n      }\n      if (fields[key].validator?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].validator.input.parse(data[key]);\n        continue;\n      }\n      if (fields[key].transform?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].transform?.input(data[key]);\n        continue;\n      }\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (fields[key].defaultValue && action === \"create\") {\n      parsedData[key] = fields[key].defaultValue;\n      continue;\n    }\n    if (fields[key].required && action === \"create\") {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `${key} is required`\n      });\n    }\n  }\n  return parsedData;\n}\nfunction parseUserInput(options, user, action) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema, action });\n}\nfunction parseAdditionalUserInput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema });\n}\nfunction parseAccountInput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseInputData(account, { fields: schema });\n}\nfunction parseSessionInput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseInputData(session, { fields: schema });\n}\nfunction mergeSchema(schema, newSchema) {\n  if (!newSchema) {\n    return schema;\n  }\n  for (const table in newSchema) {\n    const newModelName = newSchema[table]?.modelName;\n    if (newModelName) {\n      schema[table].modelName = newModelName;\n    }\n    for (const field in schema[table].fields) {\n      const newField = newSchema[table]?.fields?.[field];\n      if (!newField) {\n        continue;\n      }\n      schema[table].fields[field].fieldName = newField;\n    }\n  }\n  return schema;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s: () => (/* binding */ safeJSONParse)\n/* harmony export */ });\nfunction safeJSONParse(data) {\n  function reviver(_, value) {\n    if (typeof value === \"string\") {\n      const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n      if (iso8601Regex.test(value)) {\n        const date = new Date(value);\n        if (!isNaN(date.getTime())) {\n          return date;\n        }\n      }\n    }\n    return value;\n  }\n  try {\n    return JSON.parse(data, reviver);\n  } catch {\n    return null;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLnRCNWVVNkVZLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFOEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWxhbi9EZXNrdG9wL0FwcHMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLnRCNWVVNkVZLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzYWZlSlNPTlBhcnNlKGRhdGEpIHtcbiAgZnVuY3Rpb24gcmV2aXZlcihfLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGlzbzg2MDFSZWdleCA9IC9eXFxkezR9LVxcZHsyfS1cXGR7Mn1UXFxkezJ9OlxcZHsyfTpcXGR7Mn0oPzpcXC5cXGQrKT9aJC87XG4gICAgICBpZiAoaXNvODYwMVJlZ2V4LnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSwgcmV2aXZlcik7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCB7IHNhZmVKU09OUGFyc2UgYXMgcyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ signOut),\n/* harmony export */   A: () => (/* binding */ originCheckMiddleware),\n/* harmony export */   B: () => (/* binding */ BASE_ERROR_CODES),\n/* harmony export */   C: () => (/* binding */ error),\n/* harmony export */   D: () => (/* binding */ ok),\n/* harmony export */   E: () => (/* binding */ accountInfo),\n/* harmony export */   F: () => (/* binding */ getAccessToken),\n/* harmony export */   G: () => (/* binding */ refreshToken),\n/* harmony export */   H: () => (/* binding */ HIDE_METADATA),\n/* harmony export */   I: () => (/* binding */ unlinkAccount),\n/* harmony export */   J: () => (/* binding */ deleteUserCallback),\n/* harmony export */   K: () => (/* binding */ listUserAccounts),\n/* harmony export */   L: () => (/* binding */ linkSocialAccount),\n/* harmony export */   M: () => (/* binding */ revokeOtherSessions),\n/* harmony export */   N: () => (/* binding */ revokeSessions),\n/* harmony export */   O: () => (/* binding */ revokeSession),\n/* harmony export */   P: () => (/* binding */ requestPasswordResetCallback),\n/* harmony export */   Q: () => (/* binding */ requestPasswordReset),\n/* harmony export */   R: () => (/* binding */ forgetPasswordCallback),\n/* harmony export */   S: () => (/* binding */ deleteUser),\n/* harmony export */   T: () => (/* binding */ setPassword),\n/* harmony export */   U: () => (/* binding */ changePassword),\n/* harmony export */   V: () => (/* binding */ changeEmail),\n/* harmony export */   W: () => (/* binding */ sendVerificationEmail),\n/* harmony export */   X: () => (/* binding */ verifyEmail),\n/* harmony export */   Y: () => (/* binding */ resetPassword),\n/* harmony export */   Z: () => (/* binding */ forgetPassword),\n/* harmony export */   _: () => (/* binding */ signInEmail),\n/* harmony export */   a: () => (/* binding */ validateToken),\n/* harmony export */   a0: () => (/* binding */ callbackOAuth),\n/* harmony export */   a1: () => (/* binding */ signInSocial),\n/* harmony export */   a2: () => (/* binding */ requestOnlySessionMiddleware),\n/* harmony export */   a3: () => (/* binding */ socialProviderList),\n/* harmony export */   a4: () => (/* binding */ SocialProviderListEnum),\n/* harmony export */   a5: () => (/* binding */ apple),\n/* harmony export */   a6: () => (/* binding */ getApplePublicKey),\n/* harmony export */   a7: () => (/* binding */ discord),\n/* harmony export */   a8: () => (/* binding */ dropbox),\n/* harmony export */   a9: () => (/* binding */ facebook),\n/* harmony export */   aa: () => (/* binding */ github),\n/* harmony export */   ab: () => (/* binding */ linear),\n/* harmony export */   ac: () => (/* binding */ linkedin),\n/* harmony export */   ad: () => (/* binding */ gitlab),\n/* harmony export */   ae: () => (/* binding */ google),\n/* harmony export */   af: () => (/* binding */ kick),\n/* harmony export */   ag: () => (/* binding */ microsoft),\n/* harmony export */   ah: () => (/* binding */ notion),\n/* harmony export */   ai: () => (/* binding */ reddit),\n/* harmony export */   aj: () => (/* binding */ roblox),\n/* harmony export */   ak: () => (/* binding */ spotify),\n/* harmony export */   al: () => (/* binding */ tiktok),\n/* harmony export */   am: () => (/* binding */ twitch),\n/* harmony export */   an: () => (/* binding */ twitter),\n/* harmony export */   ao: () => (/* binding */ LANG),\n/* harmony export */   ap: () => (/* binding */ vk),\n/* harmony export */   aq: () => (/* binding */ zoom),\n/* harmony export */   ar: () => (/* binding */ huggingface),\n/* harmony export */   as: () => (/* binding */ slack),\n/* harmony export */   b: () => (/* binding */ generateCodeChallenge),\n/* harmony export */   c: () => (/* binding */ createAuthorizationURL),\n/* harmony export */   d: () => (/* binding */ getOAuth2Tokens),\n/* harmony export */   e: () => (/* binding */ encodeOAuthParameter),\n/* harmony export */   f: () => (/* binding */ decryptOAuthToken),\n/* harmony export */   g: () => (/* binding */ generateState),\n/* harmony export */   h: () => (/* binding */ handleOAuthUserInfo),\n/* harmony export */   i: () => (/* binding */ createAuthMiddleware),\n/* harmony export */   j: () => (/* binding */ createAuthEndpoint),\n/* harmony export */   k: () => (/* binding */ getSessionFromCtx),\n/* harmony export */   l: () => (/* binding */ sessionMiddleware),\n/* harmony export */   m: () => (/* binding */ getSession),\n/* harmony export */   n: () => (/* binding */ freshSessionMiddleware),\n/* harmony export */   o: () => (/* binding */ originCheck),\n/* harmony export */   p: () => (/* binding */ parseState),\n/* harmony export */   q: () => (/* binding */ optionsMiddleware),\n/* harmony export */   r: () => (/* binding */ refreshAccessToken),\n/* harmony export */   s: () => (/* binding */ setTokenUtil),\n/* harmony export */   t: () => (/* binding */ socialProviders),\n/* harmony export */   u: () => (/* binding */ sendVerificationEmailFn),\n/* harmony export */   v: () => (/* binding */ validateAuthorizationCode),\n/* harmony export */   w: () => (/* binding */ createEmailVerificationToken),\n/* harmony export */   x: () => (/* binding */ wildcardMatch),\n/* harmony export */   y: () => (/* binding */ listSessions),\n/* harmony export */   z: () => (/* binding */ updateUser)\n/* harmony export */ });\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/../../node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/../../node_modules/zod/v4/classic/coerce.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/../../node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/../../node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _crypto_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../crypto/index.mjs */ \"(rsc)/../../node_modules/better-auth/dist/crypto/index.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/../../node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! jose */ \"(rsc)/../../node_modules/jose/dist/node/esm/jwt/verify.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! jose */ \"(rsc)/../../node_modules/jose/dist/node/esm/util/decode_protected_header.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! jose */ \"(rsc)/../../node_modules/jose/dist/node/esm/util/decode_jwt.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! jose */ \"(rsc)/../../node_modules/jose/dist/node/esm/key/import.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! jose */ \"(rsc)/../../node_modules/jose/dist/node/esm/jwks/remote.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/../../node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./better-auth.VTXNLFMT.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(rsc)/../../node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/../../node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/../../node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var jose_errors__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! jose/errors */ \"(rsc)/../../node_modules/jose/dist/node/esm/util/errors.js\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/../../node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.DBGfIDnh.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs\");\n/* harmony import */ var _better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.n2KFGwjY.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! defu */ \"(rsc)/../../node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst optionsMiddleware = (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createMiddleware)(async () => {\n  return {};\n});\nconst createAuthMiddleware = better_call__WEBPACK_IMPORTED_MODULE_0__.createMiddleware.create({\n  use: [\n    optionsMiddleware,\n    /**\n     * Only use for post hooks\n     */\n    (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createMiddleware)(async () => {\n      return {};\n    })\n  ]\n});\nconst createAuthEndpoint = better_call__WEBPACK_IMPORTED_MODULE_0__.createEndpoint.create({\n  use: [optionsMiddleware]\n});\n\nfunction escapeRegExpChar(char) {\n  if (char === \"-\" || char === \"^\" || char === \"$\" || char === \"+\" || char === \".\" || char === \"(\" || char === \")\" || char === \"|\" || char === \"[\" || char === \"]\" || char === \"{\" || char === \"}\" || char === \"*\" || char === \"?\" || char === \"\\\\\") {\n    return `\\\\${char}`;\n  } else {\n    return char;\n  }\n}\nfunction escapeRegExpString(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += escapeRegExpChar(str[i]);\n  }\n  return result;\n}\nfunction transform(pattern, separator = true) {\n  if (Array.isArray(pattern)) {\n    let regExpPatterns = pattern.map((p) => `^${transform(p, separator)}$`);\n    return `(?:${regExpPatterns.join(\"|\")})`;\n  }\n  let separatorSplitter = \"\";\n  let separatorMatcher = \"\";\n  let wildcard = \".\";\n  if (separator === true) {\n    separatorSplitter = \"/\";\n    separatorMatcher = \"[/\\\\\\\\]\";\n    wildcard = \"[^/\\\\\\\\]\";\n  } else if (separator) {\n    separatorSplitter = separator;\n    separatorMatcher = escapeRegExpString(separatorSplitter);\n    if (separatorMatcher.length > 1) {\n      separatorMatcher = `(?:${separatorMatcher})`;\n      wildcard = `((?!${separatorMatcher}).)`;\n    } else {\n      wildcard = `[^${separatorMatcher}]`;\n    }\n  }\n  let requiredSeparator = separator ? `${separatorMatcher}+?` : \"\";\n  let optionalSeparator = separator ? `${separatorMatcher}*?` : \"\";\n  let segments = separator ? pattern.split(separatorSplitter) : [pattern];\n  let result = \"\";\n  for (let s = 0; s < segments.length; s++) {\n    let segment = segments[s];\n    let nextSegment = segments[s + 1];\n    let currentSeparator = \"\";\n    if (!segment && s > 0) {\n      continue;\n    }\n    if (separator) {\n      if (s === segments.length - 1) {\n        currentSeparator = optionalSeparator;\n      } else if (nextSegment !== \"**\") {\n        currentSeparator = requiredSeparator;\n      } else {\n        currentSeparator = \"\";\n      }\n    }\n    if (separator && segment === \"**\") {\n      if (currentSeparator) {\n        result += s === 0 ? \"\" : currentSeparator;\n        result += `(?:${wildcard}*?${currentSeparator})*?`;\n      }\n      continue;\n    }\n    for (let c = 0; c < segment.length; c++) {\n      let char = segment[c];\n      if (char === \"\\\\\") {\n        if (c < segment.length - 1) {\n          result += escapeRegExpChar(segment[c + 1]);\n          c++;\n        }\n      } else if (char === \"?\") {\n        result += wildcard;\n      } else if (char === \"*\") {\n        result += `${wildcard}*?`;\n      } else {\n        result += escapeRegExpChar(char);\n      }\n    }\n    result += currentSeparator;\n  }\n  return result;\n}\nfunction isMatch(regexp, sample) {\n  if (typeof sample !== \"string\") {\n    throw new TypeError(`Sample must be a string, but ${typeof sample} given`);\n  }\n  return regexp.test(sample);\n}\nfunction wildcardMatch(pattern, options) {\n  if (typeof pattern !== \"string\" && !Array.isArray(pattern)) {\n    throw new TypeError(\n      `The first argument must be a single pattern string or an array of patterns, but ${typeof pattern} given`\n    );\n  }\n  if (typeof options === \"string\" || typeof options === \"boolean\") {\n    options = { separator: options };\n  }\n  if (arguments.length === 2 && !(typeof options === \"undefined\" || typeof options === \"object\" && options !== null && !Array.isArray(options))) {\n    throw new TypeError(\n      `The second argument must be an options object or a string/boolean separator, but ${typeof options} given`\n    );\n  }\n  options = options || {};\n  if (options.separator === \"\\\\\") {\n    throw new Error(\n      \"\\\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead\"\n    );\n  }\n  let regexpPattern = transform(pattern, options.separator);\n  let regexp = new RegExp(`^${regexpPattern}$`, options.flags);\n  let fn = isMatch.bind(null, regexp);\n  fn.options = options;\n  fn.pattern = pattern;\n  fn.regexp = regexp;\n  return fn;\n}\n\nconst originCheckMiddleware = createAuthMiddleware(async (ctx) => {\n  if (ctx.request?.method !== \"POST\" || !ctx.request) {\n    return;\n  }\n  const { body, query, context } = ctx;\n  const originHeader = ctx.headers?.get(\"origin\") || ctx.headers?.get(\"referer\") || \"\";\n  const callbackURL = body?.callbackURL || query?.callbackURL;\n  const redirectURL = body?.redirectTo;\n  const errorCallbackURL = body?.errorCallbackURL;\n  const newUserCallbackURL = body?.newUserCallbackURL;\n  const trustedOrigins = Array.isArray(context.options.trustedOrigins) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const usesCookies = ctx.headers?.has(\"cookie\");\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      if (pattern.includes(\"://\")) {\n        return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) || url);\n      }\n      return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.b)(url));\n    }\n    const protocol = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.c)(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(url)\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  if (usesCookies && !ctx.context.options.advanced?.disableCSRFCheck) {\n    validateURL(originHeader, \"origin\");\n  }\n  callbackURL && validateURL(callbackURL, \"callbackURL\");\n  redirectURL && validateURL(redirectURL, \"redirectURL\");\n  errorCallbackURL && validateURL(errorCallbackURL, \"errorCallbackURL\");\n  newUserCallbackURL && validateURL(newUserCallbackURL, \"newUserCallbackURL\");\n});\nconst originCheck = (getValue) => createAuthMiddleware(async (ctx) => {\n  if (!ctx.request) {\n    return;\n  }\n  const { context } = ctx;\n  const callbackURL = getValue(ctx);\n  const trustedOrigins = Array.isArray(\n    context.options.trustedOrigins\n  ) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      if (pattern.includes(\"://\")) {\n        return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) || url);\n      }\n      return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.b)(url));\n    }\n    const protocol = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.c)(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(\n        url\n      )\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  const callbacks = Array.isArray(callbackURL) ? callbackURL : [callbackURL];\n  for (const url of callbacks) {\n    validateURL(url, \"callbackURL\");\n  }\n});\n\nconst BASE_ERROR_CODES = {\n  USER_NOT_FOUND: \"User not found\",\n  FAILED_TO_CREATE_USER: \"Failed to create user\",\n  FAILED_TO_CREATE_SESSION: \"Failed to create session\",\n  FAILED_TO_UPDATE_USER: \"Failed to update user\",\n  FAILED_TO_GET_SESSION: \"Failed to get session\",\n  INVALID_PASSWORD: \"Invalid password\",\n  INVALID_EMAIL: \"Invalid email\",\n  INVALID_EMAIL_OR_PASSWORD: \"Invalid email or password\",\n  SOCIAL_ACCOUNT_ALREADY_LINKED: \"Social account already linked\",\n  PROVIDER_NOT_FOUND: \"Provider not found\",\n  INVALID_TOKEN: \"invalid token\",\n  ID_TOKEN_NOT_SUPPORTED: \"id_token not supported\",\n  FAILED_TO_GET_USER_INFO: \"Failed to get user info\",\n  USER_EMAIL_NOT_FOUND: \"User email not found\",\n  EMAIL_NOT_VERIFIED: \"Email not verified\",\n  PASSWORD_TOO_SHORT: \"Password too short\",\n  PASSWORD_TOO_LONG: \"Password too long\",\n  USER_ALREADY_EXISTS: \"User already exists\",\n  EMAIL_CAN_NOT_BE_UPDATED: \"Email can not be updated\",\n  CREDENTIAL_ACCOUNT_NOT_FOUND: \"Credential account not found\",\n  SESSION_EXPIRED: \"Session expired. Re-authenticate to perform this action.\",\n  FAILED_TO_UNLINK_LAST_ACCOUNT: \"You can't unlink your last account\",\n  ACCOUNT_NOT_FOUND: \"Account not found\",\n  USER_ALREADY_HAS_PASSWORD: \"User already has a password. Provide that to delete the account.\"\n};\n\nconst getSession = () => createAuthEndpoint(\n  \"/get-session\",\n  {\n    method: \"GET\",\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_20__.optional(\n      zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n        /**\n         * If cookie cache is enabled, it will disable the cache\n         * and fetch the session from the database\n         */\n        disableCookieCache: zod_v4__WEBPACK_IMPORTED_MODULE_21__.boolean().meta({\n          description: \"Disable cookie cache and fetch session from database\"\n        }).optional(),\n        disableRefresh: zod_v4__WEBPACK_IMPORTED_MODULE_21__.boolean().meta({\n          description: \"Disable session refresh. Useful for checking session status, without updating the session\"\n        }).optional()\n      })\n    ),\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Get the current session\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    session: {\n                      $ref: \"#/components/schemas/Session\"\n                    },\n                    user: {\n                      $ref: \"#/components/schemas/User\"\n                    }\n                  },\n                  required: [\"session\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessionCookieToken = await ctx.getSignedCookie(\n        ctx.context.authCookies.sessionToken.name,\n        ctx.context.secret\n      );\n      if (!sessionCookieToken) {\n        return null;\n      }\n      const sessionDataCookie = ctx.getCookie(\n        ctx.context.authCookies.sessionData.name\n      );\n      const sessionDataPayload = sessionDataCookie ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_11__.s)(_better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_13__.binary.decode(_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64.decode(sessionDataCookie))) : null;\n      if (sessionDataPayload) {\n        const isValid = await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_12__.createHMAC)(\"SHA-256\", \"base64urlnopad\").verify(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionDataPayload.session,\n            expiresAt: sessionDataPayload.expiresAt\n          }),\n          sessionDataPayload.signature\n        );\n        if (!isValid) {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n          return ctx.json(null);\n        }\n      }\n      const dontRememberMe = await ctx.getSignedCookie(\n        ctx.context.authCookies.dontRememberToken.name,\n        ctx.context.secret\n      );\n      if (sessionDataPayload?.session && ctx.context.options.session?.cookieCache?.enabled && !ctx.query?.disableCookieCache) {\n        const session2 = sessionDataPayload.session;\n        const hasExpired = sessionDataPayload.expiresAt < Date.now() || session2.session.expiresAt < /* @__PURE__ */ new Date();\n        if (!hasExpired) {\n          ctx.context.session = session2;\n          return ctx.json(\n            session2\n          );\n        } else {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n        }\n      }\n      const session = await ctx.context.internalAdapter.findSession(sessionCookieToken);\n      ctx.context.session = session;\n      if (!session || session.session.expiresAt < /* @__PURE__ */ new Date()) {\n        (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n        if (session) {\n          await ctx.context.internalAdapter.deleteSession(\n            session.session.token\n          );\n        }\n        return ctx.json(null);\n      }\n      if (dontRememberMe || ctx.query?.disableRefresh) {\n        return ctx.json(\n          session\n        );\n      }\n      const expiresIn = ctx.context.sessionConfig.expiresIn;\n      const updateAge = ctx.context.sessionConfig.updateAge;\n      const sessionIsDueToBeUpdatedDate = session.session.expiresAt.valueOf() - expiresIn * 1e3 + updateAge * 1e3;\n      const shouldBeUpdated = sessionIsDueToBeUpdatedDate <= Date.now();\n      if (shouldBeUpdated && (!ctx.query?.disableRefresh || !ctx.context.options.session?.disableSessionRefresh)) {\n        const updatedSession = await ctx.context.internalAdapter.updateSession(\n          session.session.token,\n          {\n            expiresAt: (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(ctx.context.sessionConfig.expiresIn, \"sec\"),\n            updatedAt: /* @__PURE__ */ new Date()\n          }\n        );\n        if (!updatedSession) {\n          (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n          return ctx.json(null, { status: 401 });\n        }\n        const maxAge = (updatedSession.expiresAt.valueOf() - Date.now()) / 1e3;\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(\n          ctx,\n          {\n            session: updatedSession,\n            user: session.user\n          },\n          false,\n          {\n            maxAge\n          }\n        );\n        return ctx.json({\n          session: updatedSession,\n          user: session.user\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setCookieCache)(ctx, session);\n      return ctx.json(\n        session\n      );\n    } catch (error) {\n      ctx.context.logger.error(\"INTERNAL_SERVER_ERROR\", error);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n  }\n);\nconst getSessionFromCtx = async (ctx, config) => {\n  if (ctx.context.session) {\n    return ctx.context.session;\n  }\n  const session = await getSession()({\n    ...ctx,\n    asResponse: false,\n    headers: ctx.headers,\n    returnHeaders: false,\n    query: {\n      ...config,\n      ...ctx.query\n    }\n  }).catch((e) => {\n    return null;\n  });\n  ctx.context.session = session;\n  return session;\n};\nconst sessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n  }\n  return {\n    session\n  };\n});\nconst requestOnlySessionMiddleware = createAuthMiddleware(\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session?.session && (ctx.request || ctx.headers)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    return { session };\n  }\n);\nconst freshSessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n  }\n  if (ctx.context.sessionConfig.freshAge === 0) {\n    return {\n      session\n    };\n  }\n  const freshAge = ctx.context.sessionConfig.freshAge;\n  const lastUpdated = session.session.updatedAt?.valueOf() || session.session.createdAt.valueOf();\n  const now = Date.now();\n  const isFresh = now - lastUpdated < freshAge * 1e3;\n  if (!isFresh) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n      message: \"Session is not fresh\"\n    });\n  }\n  return {\n    session\n  };\n});\nconst listSessions = () => createAuthEndpoint(\n  \"/list-sessions\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"List all active sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    $ref: \"#/components/schemas/Session\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessions = await ctx.context.internalAdapter.listSessions(\n        ctx.context.session.user.id\n      );\n      const activeSessions = sessions.filter((session) => {\n        return session.expiresAt > /* @__PURE__ */ new Date();\n      });\n      return ctx.json(\n        activeSessions\n      );\n    } catch (e) {\n      ctx.context.logger.error(e);\n      throw ctx.error(\"INTERNAL_SERVER_ERROR\");\n    }\n  }\n);\nconst revokeSession = createAuthEndpoint(\n  \"/revoke-session\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The token to revoke\"\n      })\n    }),\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke a single session\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  token: {\n                    type: \"string\",\n                    description: \"The token to revoke\"\n                  }\n                },\n                required: [\"token\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the session was revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token;\n    const findSession = await ctx.context.internalAdapter.findSession(token);\n    if (!findSession) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Session not found\"\n      });\n    }\n    if (findSession.session.userId !== ctx.context.session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    try {\n      await ctx.context.internalAdapter.deleteSession(token);\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeSessions = createAuthEndpoint(\n  \"/revoke-sessions\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke all sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      await ctx.context.internalAdapter.deleteSessions(\n        ctx.context.session.user.id\n      );\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeOtherSessions = createAuthEndpoint(\n  \"/revoke-other-sessions\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Revoke all other sessions for the user except the current one\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all other sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    if (!session.user) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\");\n    }\n    const sessions = await ctx.context.internalAdapter.listSessions(\n      session.user.id\n    );\n    const activeSessions = sessions.filter((session2) => {\n      return session2.expiresAt > /* @__PURE__ */ new Date();\n    });\n    const otherSessions = activeSessions.filter(\n      (session2) => session2.token !== ctx.context.session.session.token\n    );\n    await Promise.all(\n      otherSessions.map(\n        (session2) => ctx.context.internalAdapter.deleteSession(session2.token)\n      )\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nasync function createEmailVerificationToken(secret, email, updateTo, expiresIn = 3600) {\n  const token = await (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_4__.signJWT)(\n    {\n      email: email.toLowerCase(),\n      updateTo\n    },\n    secret,\n    expiresIn\n  );\n  return token;\n}\nasync function sendVerificationEmailFn(ctx, user) {\n  if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n    ctx.context.logger.error(\"Verification email isn't enabled.\");\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"Verification email isn't enabled\"\n    });\n  }\n  const token = await createEmailVerificationToken(\n    ctx.context.secret,\n    user.email,\n    void 0,\n    ctx.context.options.emailVerification?.expiresIn\n  );\n  const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n  await ctx.context.options.emailVerification.sendVerificationEmail(\n    {\n      user,\n      url,\n      token\n    },\n    ctx.request\n  );\n}\nconst sendVerificationEmail = createAuthEndpoint(\n  \"/send-verification-email\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.email().meta({\n        description: \"The email to send the verification email to\"\n      }),\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to use for email verification callback\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a verification email to the user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  email: {\n                    type: \"string\",\n                    description: \"The email to send the verification email to\",\n                    example: \"user@example.com\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\",\n                    example: \"https://example.com/callback\",\n                    nullable: true\n                  }\n                },\n                required: [\"email\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was sent successfully\",\n                      example: true\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            description: \"Bad Request\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Error message\",\n                      example: \"Verification email isn't enabled\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const { email } = ctx.body;\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      const user = await ctx.context.internalAdapter.findUserByEmail(email);\n      if (!user) {\n        return ctx.json({\n          status: true\n        });\n      }\n      await sendVerificationEmailFn(ctx, user.user);\n      return ctx.json({\n        status: true\n      });\n    }\n    if (session?.user.emailVerified) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to an unverified email\"\n      });\n    }\n    if (session?.user.email !== email) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to your own email\"\n      });\n    }\n    await sendVerificationEmailFn(ctx, session.user);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst verifyEmail = createAuthEndpoint(\n  \"/verify-email\",\n  {\n    method: \"GET\",\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The token to verify the email\"\n      }),\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Verify the email of the user\",\n        parameters: [\n          {\n            name: \"token\",\n            in: \"query\",\n            description: \"The token to verify the email\",\n            required: true,\n            schema: {\n              type: \"string\"\n            }\n          },\n          {\n            name: \"callbackURL\",\n            in: \"query\",\n            description: \"The URL to redirect to after email verification\",\n            required: false,\n            schema: {\n              type: \"string\"\n            }\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"User ID\"\n                        },\n                        email: {\n                          type: \"string\",\n                          description: \"User email\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"User name\"\n                        },\n                        image: {\n                          type: \"string\",\n                          description: \"User image URL\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Indicates if the user email is verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          description: \"User creation date\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          description: \"User update date\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"image\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    },\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was verified successfully\"\n                    }\n                  },\n                  required: [\"user\", \"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    function redirectOnError(error) {\n      if (ctx.query.callbackURL) {\n        if (ctx.query.callbackURL.includes(\"?\")) {\n          throw ctx.redirect(`${ctx.query.callbackURL}&error=${error}`);\n        }\n        throw ctx.redirect(`${ctx.query.callbackURL}?error=${error}`);\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: error\n      });\n    }\n    const { token } = ctx.query;\n    let jwt;\n    try {\n      jwt = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(\n        token,\n        new TextEncoder().encode(ctx.context.secret),\n        {\n          algorithms: [\"HS256\"]\n        }\n      );\n    } catch (e) {\n      if (e instanceof jose_errors__WEBPACK_IMPORTED_MODULE_23__.JWTExpired) {\n        return redirectOnError(\"token_expired\");\n      }\n      return redirectOnError(\"invalid_token\");\n    }\n    const schema = zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().email(),\n      updateTo: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n    });\n    const parsed = schema.parse(jwt.payload);\n    const user = await ctx.context.internalAdapter.findUserByEmail(\n      parsed.email\n    );\n    if (!user) {\n      return redirectOnError(\"user_not_found\");\n    }\n    if (parsed.updateTo) {\n      const session = await getSessionFromCtx(ctx);\n      if (!session) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      if (session.user.email !== parsed.email) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      const updatedUser2 = await ctx.context.internalAdapter.updateUserByEmail(\n        parsed.email,\n        {\n          email: parsed.updateTo,\n          emailVerified: false\n        },\n        ctx\n      );\n      const newToken = await createEmailVerificationToken(\n        ctx.context.secret,\n        parsed.updateTo\n      );\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: updatedUser2,\n          url: `${ctx.context.baseURL}/verify-email?token=${newToken}&callbackURL=${ctx.query.callbackURL || \"/\"}`,\n          token: newToken\n        },\n        ctx.request\n      );\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n        session: session.session,\n        user: {\n          ...session.user,\n          email: parsed.updateTo,\n          emailVerified: false\n        }\n      });\n      if (ctx.query.callbackURL) {\n        throw ctx.redirect(ctx.query.callbackURL);\n      }\n      return ctx.json({\n        status: true,\n        user: {\n          id: updatedUser2.id,\n          email: updatedUser2.email,\n          name: updatedUser2.name,\n          image: updatedUser2.image,\n          emailVerified: updatedUser2.emailVerified,\n          createdAt: updatedUser2.createdAt,\n          updatedAt: updatedUser2.updatedAt\n        }\n      });\n    }\n    if (ctx.context.options.emailVerification?.onEmailVerification) {\n      await ctx.context.options.emailVerification.onEmailVerification(\n        user.user,\n        ctx.request\n      );\n    }\n    const updatedUser = await ctx.context.internalAdapter.updateUserByEmail(\n      parsed.email,\n      {\n        emailVerified: true\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.afterEmailVerification) {\n      await ctx.context.options.emailVerification.afterEmailVerification(\n        updatedUser,\n        ctx.request\n      );\n    }\n    if (ctx.context.options.emailVerification?.autoSignInAfterVerification) {\n      const currentSession = await getSessionFromCtx(ctx);\n      if (!currentSession || currentSession.user.email !== parsed.email) {\n        const session = await ctx.context.internalAdapter.createSession(\n          user.user.id,\n          ctx\n        );\n        if (!session) {\n          throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n            message: \"Failed to create session\"\n          });\n        }\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n          session,\n          user: {\n            ...user.user,\n            emailVerified: true\n          }\n        });\n      } else {\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n          session: currentSession.session,\n          user: {\n            ...currentSession.user,\n            emailVerified: true\n          }\n        });\n      }\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL);\n    }\n    return ctx.json({\n      status: true,\n      user: null\n    });\n  }\n);\n\nconst HIDE_METADATA = {\n  isAction: false\n};\n\nasync function generateState(c, link) {\n  const callbackURL = c.body?.callbackURL || c.context.options.baseURL;\n  if (!callbackURL) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"callbackURL is required\"\n    });\n  }\n  const codeVerifier = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(128);\n  const state = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(32);\n  const data = JSON.stringify({\n    callbackURL,\n    codeVerifier,\n    errorURL: c.body?.errorCallbackURL,\n    newUserURL: c.body?.newUserCallbackURL,\n    link,\n    /**\n     * This is the actual expiry time of the state\n     */\n    expiresAt: Date.now() + 10 * 60 * 1e3,\n    requestSignUp: c.body?.requestSignUp\n  });\n  const expiresAt = /* @__PURE__ */ new Date();\n  expiresAt.setMinutes(expiresAt.getMinutes() + 10);\n  const verification = await c.context.internalAdapter.createVerificationValue(\n    {\n      value: data,\n      identifier: state,\n      expiresAt\n    },\n    c\n  );\n  if (!verification) {\n    c.context.logger.error(\n      \"Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database\"\n    );\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n      message: \"Unable to create verification\"\n    });\n  }\n  return {\n    state: verification.identifier,\n    codeVerifier\n  };\n}\nasync function parseState(c) {\n  const state = c.query.state || c.body.state;\n  const data = await c.context.internalAdapter.findVerificationValue(state);\n  if (!data) {\n    c.context.logger.error(\"State Mismatch. Verification not found\", {\n      state\n    });\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  const parsedData = zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n    callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string(),\n    codeVerifier: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string(),\n    errorURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n    newUserURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n    expiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_20__.number(),\n    link: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string(),\n      userId: zod_v4__WEBPACK_IMPORTED_MODULE_21__.string()\n    }).optional(),\n    requestSignUp: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().optional()\n  }).parse(JSON.parse(data.value));\n  if (!parsedData.errorURL) {\n    parsedData.errorURL = `${c.context.baseURL}/error`;\n  }\n  if (parsedData.expiresAt < Date.now()) {\n    await c.context.internalAdapter.deleteVerificationValue(data.id);\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  await c.context.internalAdapter.deleteVerificationValue(data.id);\n  return parsedData;\n}\n\nasync function generateCodeChallenge(codeVerifier) {\n  const codeChallengeBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_2__.createHash)(\"SHA-256\").digest(codeVerifier);\n  return _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.encode(new Uint8Array(codeChallengeBytes), {\n    padding: false\n  });\n}\nfunction getOAuth2Tokens(data) {\n  return {\n    tokenType: data.token_type,\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    accessTokenExpiresAt: data.expires_in ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(data.expires_in, \"sec\") : void 0,\n    refreshTokenExpiresAt: data.refresh_token_expires_in ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(data.refresh_token_expires_in, \"sec\") : void 0,\n    scopes: data?.scope ? typeof data.scope === \"string\" ? data.scope.split(\" \") : data.scope : [],\n    idToken: data.id_token\n  };\n}\nconst encodeOAuthParameter = (value) => encodeURIComponent(value).replace(/%20/g, \"+\");\nfunction decryptOAuthToken(token, ctx) {\n  if (!token) return token;\n  if (ctx.options.account?.encryptOAuthTokens) {\n    return (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_4__.symmetricDecrypt)({\n      key: ctx.secret,\n      data: token\n    });\n  }\n  return token;\n}\nfunction setTokenUtil(token, ctx) {\n  if (ctx.options.account?.encryptOAuthTokens && token) {\n    return (0,_crypto_index_mjs__WEBPACK_IMPORTED_MODULE_4__.symmetricEncrypt)({\n      key: ctx.secret,\n      data: token\n    });\n  }\n  return token;\n}\n\nasync function handleOAuthUserInfo(c, {\n  userInfo,\n  account,\n  callbackURL,\n  disableSignUp,\n  overrideUserInfo\n}) {\n  const dbUser = await c.context.internalAdapter.findOAuthUser(\n    userInfo.email.toLowerCase(),\n    account.accountId,\n    account.providerId\n  ).catch((e) => {\n    _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(\n      \"Better auth was unable to query your database.\\nError: \",\n      e\n    );\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=internal_server_error`);\n  });\n  let user = dbUser?.user;\n  let isRegister = !user;\n  if (dbUser) {\n    const hasBeenLinked = dbUser.accounts.find(\n      (a) => a.providerId === account.providerId && a.accountId === account.accountId\n    );\n    if (!hasBeenLinked) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        account.providerId\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        if (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_17__.b) {\n          _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.warn(\n            `User already exist but account isn't linked to ${account.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`\n          );\n        }\n        return {\n          error: \"account not linked\",\n          data: null\n        };\n      }\n      try {\n        await c.context.internalAdapter.linkAccount(\n          {\n            providerId: account.providerId,\n            accountId: userInfo.id.toString(),\n            userId: dbUser.user.id,\n            accessToken: await setTokenUtil(account.accessToken, c.context),\n            refreshToken: await setTokenUtil(account.refreshToken, c.context),\n            idToken: account.idToken,\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          },\n          c\n        );\n      } catch (e) {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(\"Unable to link account\", e);\n        return {\n          error: \"unable to link account\",\n          data: null\n        };\n      }\n    } else {\n      if (c.context.options.account?.updateAccountOnSignIn !== false) {\n        const updateData = Object.fromEntries(\n          Object.entries({\n            idToken: account.idToken,\n            accessToken: await setTokenUtil(account.accessToken, c.context),\n            refreshToken: await setTokenUtil(account.refreshToken, c.context),\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          }).filter(([_, value]) => value !== void 0)\n        );\n        if (Object.keys(updateData).length > 0) {\n          await c.context.internalAdapter.updateAccount(\n            hasBeenLinked.id,\n            updateData,\n            c\n          );\n        }\n      }\n    }\n    if (overrideUserInfo) {\n      const { id: _, ...restUserInfo } = userInfo;\n      await c.context.internalAdapter.updateUser(dbUser.user.id, {\n        ...restUserInfo,\n        email: userInfo.email.toLowerCase(),\n        emailVerified: userInfo.email.toLowerCase() === dbUser.user.email ? dbUser.user.emailVerified || userInfo.emailVerified : userInfo.emailVerified\n      });\n    }\n  } else {\n    if (disableSignUp) {\n      return {\n        error: \"signup disabled\",\n        data: null,\n        isRegister: false\n      };\n    }\n    try {\n      const { id: _, ...restUserInfo } = userInfo;\n      user = await c.context.internalAdapter.createOAuthUser(\n        {\n          ...restUserInfo,\n          email: userInfo.email.toLowerCase()\n        },\n        {\n          accessToken: await setTokenUtil(account.accessToken, c.context),\n          refreshToken: await setTokenUtil(account.refreshToken, c.context),\n          idToken: account.idToken,\n          accessTokenExpiresAt: account.accessTokenExpiresAt,\n          refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n          scope: account.scope,\n          providerId: account.providerId,\n          accountId: userInfo.id.toString()\n        },\n        c\n      ).then((res) => res?.user);\n      if (!userInfo.emailVerified && user && c.context.options.emailVerification?.sendOnSignUp) {\n        const token = await createEmailVerificationToken(\n          c.context.secret,\n          user.email,\n          void 0,\n          c.context.options.emailVerification?.expiresIn\n        );\n        const url = `${c.context.baseURL}/verify-email?token=${token}&callbackURL=${callbackURL}`;\n        await c.context.options.emailVerification?.sendVerificationEmail?.(\n          {\n            user,\n            url,\n            token\n          },\n          c.request\n        );\n      }\n    } catch (e) {\n      _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(e);\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n        return {\n          error: e.message,\n          data: null,\n          isRegister: false\n        };\n      }\n      return {\n        error: \"unable to create user\",\n        data: null,\n        isRegister: false\n      };\n    }\n  }\n  if (!user) {\n    return {\n      error: \"unable to create user\",\n      data: null,\n      isRegister: false\n    };\n  }\n  const session = await c.context.internalAdapter.createSession(user.id, c);\n  if (!session) {\n    return {\n      error: \"unable to create session\",\n      data: null,\n      isRegister: false\n    };\n  }\n  return {\n    data: {\n      session,\n      user\n    },\n    error: null,\n    isRegister\n  };\n}\n\nasync function createAuthorizationURL({\n  id,\n  options,\n  authorizationEndpoint,\n  state,\n  codeVerifier,\n  scopes,\n  claims,\n  redirectURI,\n  duration,\n  prompt,\n  accessType,\n  responseType,\n  display,\n  loginHint,\n  hd,\n  responseMode,\n  additionalParams,\n  scopeJoiner\n}) {\n  const url = new URL(authorizationEndpoint);\n  url.searchParams.set(\"response_type\", responseType || \"code\");\n  url.searchParams.set(\"client_id\", options.clientId);\n  url.searchParams.set(\"state\", state);\n  url.searchParams.set(\"scope\", scopes.join(scopeJoiner || \" \"));\n  url.searchParams.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  duration && url.searchParams.set(\"duration\", duration);\n  display && url.searchParams.set(\"display\", display);\n  loginHint && url.searchParams.set(\"login_hint\", loginHint);\n  prompt && url.searchParams.set(\"prompt\", prompt);\n  hd && url.searchParams.set(\"hd\", hd);\n  accessType && url.searchParams.set(\"access_type\", accessType);\n  responseMode && url.searchParams.set(\"response_mode\", responseMode);\n  if (codeVerifier) {\n    const codeChallenge = await generateCodeChallenge(codeVerifier);\n    url.searchParams.set(\"code_challenge_method\", \"S256\");\n    url.searchParams.set(\"code_challenge\", codeChallenge);\n  }\n  if (claims) {\n    const claimsObj = claims.reduce(\n      (acc, claim) => {\n        acc[claim] = null;\n        return acc;\n      },\n      {}\n    );\n    url.searchParams.set(\n      \"claims\",\n      JSON.stringify({\n        id_token: { email: null, email_verified: null, ...claimsObj }\n      })\n    );\n  }\n  if (additionalParams) {\n    Object.entries(additionalParams).forEach(([key, value]) => {\n      url.searchParams.set(key, value);\n    });\n  }\n  return url;\n}\n\nasync function validateAuthorizationCode({\n  code,\n  codeVerifier,\n  redirectURI,\n  options,\n  tokenEndpoint,\n  authentication,\n  deviceId,\n  headers,\n  additionalParams = {}\n}) {\n  const body = new URLSearchParams();\n  const requestHeaders = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\",\n    \"user-agent\": \"better-auth\",\n    ...headers\n  };\n  body.set(\"grant_type\", \"authorization_code\");\n  body.set(\"code\", code);\n  codeVerifier && body.set(\"code_verifier\", codeVerifier);\n  options.clientKey && body.set(\"client_key\", options.clientKey);\n  deviceId && body.set(\"device_id\", deviceId);\n  body.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  body.set(\"client_id\", options.clientId);\n  if (authentication === \"basic\") {\n    const encodedCredentials = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64.encode(\n      `${options.clientId}:${options.clientSecret}`\n    );\n    requestHeaders[\"authorization\"] = `Basic ${encodedCredentials}`;\n  } else {\n    body.set(\"client_secret\", options.clientSecret);\n  }\n  for (const [key, value] of Object.entries(additionalParams)) {\n    if (!body.has(key)) body.append(key, value);\n  }\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers: requestHeaders\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = getOAuth2Tokens(data);\n  return tokens;\n}\nasync function validateToken(token, jwksEndpoint) {\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(jwksEndpoint, {\n    method: \"GET\",\n    headers: {\n      accept: \"application/json\",\n      \"user-agent\": \"better-auth\"\n    }\n  });\n  if (error) {\n    throw error;\n  }\n  const keys = data[\"keys\"];\n  const header = JSON.parse(atob(token.split(\".\")[0]));\n  const key = keys.find((key2) => key2.kid === header.kid);\n  if (!key) {\n    throw new Error(\"Key not found\");\n  }\n  const verified = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(token, key);\n  return verified;\n}\n\nasync function refreshAccessToken({\n  refreshToken,\n  options,\n  tokenEndpoint,\n  authentication,\n  extraParams,\n  grantType = \"refresh_token\"\n}) {\n  const body = new URLSearchParams();\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\"\n  };\n  body.set(\"grant_type\", grantType);\n  body.set(\"refresh_token\", refreshToken);\n  if (authentication === \"basic\") {\n    headers[\"authorization\"] = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64.encode(\n      `${options.clientId}:${options.clientSecret}`\n    );\n  } else {\n    body.set(\"client_id\", options.clientId);\n    body.set(\"client_secret\", options.clientSecret);\n  }\n  if (extraParams) {\n    for (const [key, value] of Object.entries(extraParams)) {\n      body.set(key, value);\n    }\n  }\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = {\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    tokenType: data.token_type,\n    scopes: data.scope?.split(\" \"),\n    idToken: data.id_token\n  };\n  if (data.expires_in) {\n    const now = /* @__PURE__ */ new Date();\n    tokens.accessTokenExpiresAt = new Date(\n      now.getTime() + data.expires_in * 1e3\n    );\n  }\n  return tokens;\n}\n\nconst apple = (options) => {\n  const tokenEndpoint = \"https://appleid.apple.com/auth/token\";\n  return {\n    id: \"apple\",\n    name: \"Apple\",\n    async createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scope = options.disableDefaultScope ? [] : [\"email\", \"name\"];\n      options.scope && _scope.push(...options.scope);\n      scopes && _scope.push(...scopes);\n      const url = await createAuthorizationURL({\n        id: \"apple\",\n        options,\n        authorizationEndpoint: \"https://appleid.apple.com/auth/authorize\",\n        scopes: _scope,\n        state,\n        redirectURI,\n        responseMode: \"form_post\",\n        responseType: \"code id_token\"\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const decodedHeader = (0,jose__WEBPACK_IMPORTED_MODULE_24__.decodeProtectedHeader)(token);\n      const { kid, alg: jwtAlg } = decodedHeader;\n      if (!kid || !jwtAlg) return false;\n      const publicKey = await getApplePublicKey(kid);\n      const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(token, publicKey, {\n        algorithms: [jwtAlg],\n        issuer: \"https://appleid.apple.com\",\n        audience: options.appBundleIdentifier || options.clientId,\n        maxTokenAge: \"1h\"\n      });\n      [\"email_verified\", \"is_private_email\"].forEach((field) => {\n        if (jwtClaims[field] !== void 0) {\n          jwtClaims[field] = Boolean(jwtClaims[field]);\n        }\n      });\n      if (nonce && jwtClaims.nonce !== nonce) {\n        return false;\n      }\n      return !!jwtClaims;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://appleid.apple.com/auth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const profile = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n      if (!profile) {\n        return null;\n      }\n      const name = token.user ? `${token.user.name?.firstName} ${token.user.name?.lastName}` : profile.name || profile.email;\n      const emailVerified = typeof profile.email_verified === \"boolean\" ? profile.email_verified : profile.email_verified === \"true\";\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name,\n          emailVerified,\n          email: profile.email,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\nconst getApplePublicKey = async (kid) => {\n  const APPLE_BASE_URL = \"https://appleid.apple.com\";\n  const JWKS_APPLE_URI = \"/auth/keys\";\n  const { data } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(`${APPLE_BASE_URL}${JWKS_APPLE_URI}`);\n  if (!data?.keys) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"Keys not found\"\n    });\n  }\n  const jwk = data.keys.find((key) => key.kid === kid);\n  if (!jwk) {\n    throw new Error(`JWK with kid ${kid} not found`);\n  }\n  return await (0,jose__WEBPACK_IMPORTED_MODULE_26__.importJWK)(jwk, jwk.alg);\n};\n\nconst discord = (options) => {\n  return {\n    id: \"discord\",\n    name: \"Discord\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identify\", \"email\"];\n      scopes && _scopes.push(...scopes);\n      options.scope && _scopes.push(...options.scope);\n      return new URL(\n        `https://discord.com/api/oauth2/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"none\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://discord.com/api/users/@me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (profile.avatar === null) {\n        const defaultAvatarNumber = profile.discriminator === \"0\" ? Number(BigInt(profile.id) >> BigInt(22)) % 6 : parseInt(profile.discriminator) % 5;\n        profile.image_url = `https://cdn.discordapp.com/embed/avatars/${defaultAvatarNumber}.png`;\n      } else {\n        const format = profile.avatar.startsWith(\"a_\") ? \"gif\" : \"png\";\n        profile.image_url = `https://cdn.discordapp.com/avatars/${profile.id}/${profile.avatar}.${format}`;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.global_name || profile.username || \"\",\n          email: profile.email,\n          emailVerified: profile.verified,\n          image: profile.image_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst facebook = (options) => {\n  return {\n    id: \"facebook\",\n    name: \"Facebook\",\n    async createAuthorizationURL({ state, scopes, redirectURI, loginHint }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"public_profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: \"facebook\",\n        options,\n        authorizationEndpoint: \"https://www.facebook.com/v21.0/dialog/oauth\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        additionalParams: options.configId ? {\n          config_id: options.configId\n        } : {}\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://graph.facebook.com/oauth/access_token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      if (token.split(\".\").length === 3) {\n        try {\n          const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_22__.jwtVerify)(\n            token,\n            (0,jose__WEBPACK_IMPORTED_MODULE_27__.createRemoteJWKSet)(\n              // https://developers.facebook.com/docs/facebook-login/limited-login/token/#jwks\n              new URL(\n                \"https://limited.facebook.com/.well-known/oauth/openid/jwks/\"\n              )\n            ),\n            {\n              algorithms: [\"RS256\"],\n              audience: options.clientId,\n              issuer: \"https://www.facebook.com\"\n            }\n          );\n          if (nonce && jwtClaims.nonce !== nonce) {\n            return false;\n          }\n          return !!jwtClaims;\n        } catch (error) {\n          return false;\n        }\n      }\n      return true;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://graph.facebook.com/v18.0/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (token.idToken && token.idToken.split(\".\").length === 3) {\n        const profile2 = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n        const user = {\n          id: profile2.sub,\n          name: profile2.name,\n          email: profile2.email,\n          picture: {\n            data: {\n              url: profile2.picture,\n              height: 100,\n              width: 100,\n              is_silhouette: false\n            }\n          }\n        };\n        const userMap2 = await options.mapProfileToUser?.({\n          ...user,\n          email_verified: true\n        });\n        return {\n          user: {\n            ...user,\n            emailVerified: true,\n            ...userMap2\n          },\n          data: profile2\n        };\n      }\n      const fields = [\n        \"id\",\n        \"name\",\n        \"email\",\n        \"picture\",\n        ...options?.fields || []\n      ];\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://graph.facebook.com/me?fields=\" + fields.join(\",\"),\n        {\n          auth: {\n            type: \"Bearer\",\n            token: token.accessToken\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.picture.data.url,\n          emailVerified: profile.email_verified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst github = (options) => {\n  const tokenEndpoint = \"https://github.com/login/oauth/access_token\";\n  return {\n    id: \"github\",\n    name: \"GitHub\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"read:user\", \"user:email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"github\",\n        options,\n        authorizationEndpoint: \"https://github.com/login/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://github.com/login/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.github.com/user\",\n        {\n          headers: {\n            \"User-Agent\": \"better-auth\",\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const { data: emails } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\"https://api.github.com/user/emails\", {\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`,\n          \"User-Agent\": \"better-auth\"\n        }\n      });\n      if (!profile.email && emails) {\n        profile.email = (emails.find((e) => e.primary) ?? emails[0])?.email;\n      }\n      const emailVerified = emails?.find((e) => e.email === profile.email)?.verified ?? false;\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id.toString(),\n          name: profile.name || profile.login,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst google = (options) => {\n  return {\n    id: \"google\",\n    name: \"Google\",\n    async createAuthorizationURL({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI,\n      loginHint,\n      display\n    }) {\n      if (!options.clientId || !options.clientSecret) {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(\n          \"Client Id and Client Secret is required for Google. Make sure to provide them in the options.\"\n        );\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_19__.B(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      if (!codeVerifier) {\n        throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_19__.B(\"codeVerifier is required for Google\");\n      }\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"profile\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      if (options.prompt === \"select_account+consent\")\n        options.prompt = \"select_account consent\";\n      const url = await createAuthorizationURL({\n        id: \"google\",\n        options,\n        authorizationEndpoint: \"https://accounts.google.com/o/oauth2/auth\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI,\n        prompt: options.prompt,\n        accessType: options.accessType,\n        display: display || options.display,\n        loginHint,\n        hd: options.hd,\n        additionalParams: {\n          include_granted_scopes: \"true\"\n        }\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://oauth2.googleapis.com/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.googleapis.com/oauth2/v4/token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const googlePublicKeyUrl = `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${token}`;\n      const { data: tokenInfo } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(googlePublicKeyUrl);\n      if (!tokenInfo) {\n        return false;\n      }\n      const isValid = tokenInfo.aud === options.clientId && (tokenInfo.iss === \"https://accounts.google.com\" || tokenInfo.iss === \"accounts.google.com\");\n      return isValid;\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: user.email_verified,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    options\n  };\n};\n\nconst kick = (options) => {\n  return {\n    id: \"kick\",\n    name: \"Kick\",\n    createAuthorizationURL({ state, scopes, redirectURI, codeVerifier }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"kick\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.kick.com/oauth/authorize\",\n        scopes: _scopes,\n        codeVerifier,\n        state\n      });\n    },\n    async validateAuthorizationCode({ code, redirectURI, codeVerifier }) {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.kick.com/oauth/token\",\n        codeVerifier\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\"https://api.kick.com/public/v1/users\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      if (error) {\n        return null;\n      }\n      const profile = data.data[0];\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user_id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.profile_picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst huggingface = (options) => {\n  return {\n    id: \"huggingface\",\n    name: \"Hugging Face\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"huggingface\",\n        options,\n        authorizationEndpoint: \"https://huggingface.co/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://huggingface.co/oauth/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://huggingface.co/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://huggingface.co/oauth/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name || profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: profile.email_verified ?? false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst microsoft = (options) => {\n  const tenant = options.tenantId || \"common\";\n  const authorizationEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/authorize`;\n  const tokenEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/token`;\n  return {\n    id: \"microsoft\",\n    name: \"Microsoft EntraID\",\n    createAuthorizationURL(data) {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      data.scopes && scopes.push(...data.scopes);\n      return createAuthorizationURL({\n        id: \"microsoft\",\n        options,\n        authorizationEndpoint,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        scopes,\n        redirectURI: data.redirectURI,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode({ code, codeVerifier, redirectURI }) {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(token.idToken);\n      const profilePhotoSize = options.profilePhotoSize || 48;\n      await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        `https://graph.microsoft.com/v1.0/me/photos/${profilePhotoSize}x${profilePhotoSize}/$value`,\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          },\n          async onResponse(context) {\n            if (options.disableProfilePhoto || !context.response.ok) {\n              return;\n            }\n            try {\n              const response = context.response.clone();\n              const pictureBuffer = await response.arrayBuffer();\n              const pictureBase64 = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64.encode(pictureBuffer);\n              user.picture = `data:image/jpeg;base64, ${pictureBase64}`;\n            } catch (e) {\n              _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(\n                e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n                e\n              );\n            }\n          }\n        }\n      );\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientSecret: options.clientSecret\n        },\n        extraParams: {\n          scope: scopes.join(\" \")\n          // Include the scopes in request to microsoft\n        },\n        tokenEndpoint\n      });\n    },\n    options\n  };\n};\n\nconst slack = (options) => {\n  return {\n    id: \"slack\",\n    name: \"Slack\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      scopes && _scopes.push(...scopes);\n      options.scope && _scopes.push(...options.scope);\n      const url = new URL(\"https://slack.com/openid/connect/authorize\");\n      url.searchParams.set(\"scope\", _scopes.join(\" \"));\n      url.searchParams.set(\"response_type\", \"code\");\n      url.searchParams.set(\"client_id\", options.clientId);\n      url.searchParams.set(\"redirect_uri\", options.redirectURI || redirectURI);\n      url.searchParams.set(\"state\", state);\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://slack.com/api/openid.connect.token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://slack.com/api/openid.connect.token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://slack.com/api/openid.connect.userInfo\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile[\"https://slack.com/user_id\"],\n          name: profile.name || \"\",\n          email: profile.email,\n          emailVerified: profile.email_verified,\n          image: profile.picture || profile[\"https://slack.com/user_image_512\"],\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst notion = (options) => {\n  const tokenEndpoint = \"https://api.notion.com/v1/oauth/token\";\n  return {\n    id: \"notion\",\n    name: \"Notion\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"notion\",\n        options,\n        authorizationEndpoint: \"https://api.notion.com/v1/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        additionalParams: {\n          owner: \"user\"\n        }\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint,\n        authentication: \"basic\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\"https://api.notion.com/v1/users/me\", {\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`,\n          \"Notion-Version\": \"2022-06-28\"\n        }\n      });\n      if (error || !profile) {\n        return null;\n      }\n      const userProfile = profile.bot?.owner?.user;\n      if (!userProfile) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(userProfile);\n      return {\n        user: {\n          id: userProfile.id,\n          name: userProfile.name || \"Notion User\",\n          email: userProfile.person?.email || null,\n          image: userProfile.avatar_url,\n          emailVerified: !!userProfile.person?.email,\n          ...userMap\n        },\n        data: userProfile\n      };\n    },\n    options\n  };\n};\n\nconst spotify = (options) => {\n  return {\n    id: \"spotify\",\n    name: \"Spotify\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user-read-email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"spotify\",\n        options,\n        authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.spotify.com/v1/me\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          email: profile.email,\n          image: profile.images[0]?.url,\n          emailVerified: false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitch = (options) => {\n  return {\n    id: \"twitch\",\n    name: \"Twitch\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read:email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"twitch\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.twitch.tv/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        claims: options.claims || [\n          \"email\",\n          \"email_verified\",\n          \"preferred_username\",\n          \"picture\"\n        ]\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const idToken = token.idToken;\n      if (!idToken) {\n        _better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.a.error(\"No idToken found in token\");\n        return null;\n      }\n      const profile = (0,jose__WEBPACK_IMPORTED_MODULE_25__.decodeJwt)(idToken);\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: profile.email_verified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitter = (options) => {\n  return {\n    id: \"twitter\",\n    name: \"Twitter\",\n    createAuthorizationURL(data) {\n      const _scopes = options.disableDefaultScope ? [] : [\"users.read\", \"tweet.read\", \"offline.access\", \"users.email\"];\n      options.scope && _scopes.push(...options.scope);\n      data.scopes && _scopes.push(...data.scopes);\n      return createAuthorizationURL({\n        id: \"twitter\",\n        options,\n        authorizationEndpoint: \"https://x.com/i/oauth2/authorize\",\n        scopes: _scopes,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        redirectURI: data.redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        authentication: \"basic\",\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error: profileError } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.x.com/2/users/me?user.fields=profile_image_url\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (profileError) {\n        return null;\n      }\n      const { data: emailData, error: emailError } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\"https://api.x.com/2/users/me?user.fields=confirmed_email\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      let emailVerified = false;\n      if (!emailError && emailData?.data?.confirmed_email) {\n        profile.data.email = emailData.data.confirmed_email;\n        emailVerified = true;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.data.id,\n          name: profile.data.name,\n          email: profile.data.email || profile.data.username || null,\n          image: profile.data.profile_image_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst dropbox = (options) => {\n  const tokenEndpoint = \"https://api.dropboxapi.com/oauth2/token\";\n  return {\n    id: \"dropbox\",\n    name: \"Dropbox\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"account_info.read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const additionalParams = {};\n      if (options.accessType) {\n        additionalParams.token_access_type = options.accessType;\n      }\n      return await createAuthorizationURL({\n        id: \"dropbox\",\n        options,\n        authorizationEndpoint: \"https://www.dropbox.com/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier,\n        additionalParams\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return await validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.dropbox.com/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.dropboxapi.com/2/users/get_current_account\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.account_id,\n          name: profile.name?.display_name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.profile_photo_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst linear = (options) => {\n  const tokenEndpoint = \"https://api.linear.app/oauth/token\";\n  return {\n    id: \"linear\",\n    name: \"Linear\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"linear\",\n        options,\n        authorizationEndpoint: \"https://linear.app/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.linear.app/graphql\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token.accessToken}`\n          },\n          body: JSON.stringify({\n            query: `\n\t\t\t\t\t\t\tquery {\n\t\t\t\t\t\t\t\tviewer {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\temail\n\t\t\t\t\t\t\t\t\tavatarUrl\n\t\t\t\t\t\t\t\t\tactive\n\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t`\n          })\n        }\n      );\n      if (error || !profile?.data?.viewer) {\n        return null;\n      }\n      const userData = profile.data.viewer;\n      const userMap = await options.mapProfileToUser?.(userData);\n      return {\n        user: {\n          id: profile.data.viewer.id,\n          name: profile.data.viewer.name,\n          email: profile.data.viewer.email,\n          image: profile.data.viewer.avatarUrl,\n          emailVerified: true,\n          ...userMap\n        },\n        data: userData\n      };\n    },\n    options\n  };\n};\n\nconst linkedin = (options) => {\n  const authorizationEndpoint = \"https://www.linkedin.com/oauth/v2/authorization\";\n  const tokenEndpoint = \"https://www.linkedin.com/oauth/v2/accessToken\";\n  return {\n    id: \"linkedin\",\n    name: \"Linkedin\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      redirectURI,\n      loginHint\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"profile\", \"email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: \"linkedin\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        loginHint,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return await validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.linkedin.com/v2/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.picture,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst cleanDoubleSlashes = (input = \"\") => {\n  return input.split(\"://\").map((str) => str.replace(/\\/{2,}/g, \"/\")).join(\"://\");\n};\nconst issuerToEndpoints = (issuer) => {\n  let baseUrl = issuer || \"https://gitlab.com\";\n  return {\n    authorizationEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/authorize`),\n    tokenEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/token`),\n    userinfoEndpoint: cleanDoubleSlashes(`${baseUrl}/api/v4/user`)\n  };\n};\nconst gitlab = (options) => {\n  const { authorizationEndpoint, tokenEndpoint, userinfoEndpoint } = issuerToEndpoints(options.issuer);\n  const issuerId = \"gitlab\";\n  const issuerName = \"Gitlab\";\n  return {\n    id: issuerId,\n    name: issuerName,\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      loginHint,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"read_user\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: issuerId,\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        codeVerifier,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://gitlab.com/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        userinfoEndpoint,\n        { headers: { authorization: `Bearer ${token.accessToken}` } }\n      );\n      if (error || profile.state !== \"active\" || profile.locked) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id.toString(),\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst tiktok = (options) => {\n  return {\n    id: \"tiktok\",\n    name: \"TikTok\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user.info.profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://www.tiktok.com/v2/auth/authorize?scope=${_scopes.join(\n          \",\"\n        )}&response_type=code&client_key=${options.clientKey}&client_secret=${options.clientSecret}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const fields = [\n        \"open_id\",\n        \"avatar_large_url\",\n        \"display_name\",\n        \"username\"\n      ];\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        `https://open.tiktokapis.com/v2/user/info/?fields=${fields.join(\",\")}`,\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      return {\n        user: {\n          email: profile.data.user.email || profile.data.user.username,\n          id: profile.data.user.open_id,\n          name: profile.data.user.display_name || profile.data.user.username,\n          image: profile.data.user.avatar_large_url,\n          /** @note Tiktok does not provide emailVerified or even email*/\n          emailVerified: profile.data.user.email ? true : false\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst reddit = (options) => {\n  return {\n    id: \"reddit\",\n    name: \"Reddit\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identity\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"reddit\",\n        options,\n        authorizationEndpoint: \"https://www.reddit.com/api/v1/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        duration: options.duration\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      const body = new URLSearchParams({\n        grant_type: \"authorization_code\",\n        code,\n        redirect_uri: options.redirectURI || redirectURI\n      });\n      const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n        accept: \"text/plain\",\n        \"user-agent\": \"better-auth\",\n        Authorization: `Basic ${_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64.encode(\n          `${options.clientId}:${options.clientSecret}`\n        )}`\n      };\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://www.reddit.com/api/v1/access_token\",\n        {\n          method: \"POST\",\n          headers,\n          body: body.toString()\n        }\n      );\n      if (error) {\n        throw error;\n      }\n      return getOAuth2Tokens(data);\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.reddit.com/api/v1/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://oauth.reddit.com/api/v1/me\",\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`,\n            \"User-Agent\": \"better-auth\"\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.oauth_client_id,\n          emailVerified: profile.has_verified_email,\n          image: profile.icon_img?.split(\"?\")[0],\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst roblox = (options) => {\n  return {\n    id: \"roblox\",\n    name: \"Roblox\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://apis.roblox.com/oauth/v1/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"select_account+consent\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\",\n        authentication: \"post\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://apis.roblox.com/oauth/v1/userinfo\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.nickname || profile.preferred_username || \"\",\n          image: profile.picture,\n          email: profile.preferred_username || null,\n          // Roblox does not provide email\n          emailVerified: true,\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    },\n    options\n  };\n};\n\nvar LANG = /* @__PURE__ */ ((LANG2) => {\n  LANG2[LANG2[\"RUS\"] = 0] = \"RUS\";\n  LANG2[LANG2[\"UKR\"] = 1] = \"UKR\";\n  LANG2[LANG2[\"ENG\"] = 3] = \"ENG\";\n  LANG2[LANG2[\"SPA\"] = 4] = \"SPA\";\n  LANG2[LANG2[\"GERMAN\"] = 6] = \"GERMAN\";\n  LANG2[LANG2[\"POL\"] = 15] = \"POL\";\n  LANG2[LANG2[\"FRA\"] = 16] = \"FRA\";\n  LANG2[LANG2[\"TURKEY\"] = 82] = \"TURKEY\";\n  return LANG2;\n})(LANG || {});\nconst vk = (options) => {\n  return {\n    id: \"vk\",\n    name: \"VK\",\n    async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"phone\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const authorizationEndpoint = \"https://id.vk.com/authorize\";\n      return createAuthorizationURL({\n        id: \"vk\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier\n      });\n    },\n    validateAuthorizationCode: async ({\n      code,\n      codeVerifier,\n      redirectURI,\n      deviceId\n    }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        deviceId,\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    async getUserInfo(data) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(data);\n      }\n      if (!data.accessToken) {\n        return null;\n      }\n      const formBody = new URLSearchParams({\n        access_token: data.accessToken,\n        client_id: options.clientId\n      }).toString();\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://id.vk.com/oauth2/user_info\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: formBody\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (!profile.user.email) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user.user_id,\n          first_name: profile.user.first_name,\n          last_name: profile.user.last_name,\n          email: profile.user.email,\n          image: profile.user.avatar,\n          /** @note VK does not provide emailVerified*/\n          emailVerified: !!profile.user.email,\n          birthday: profile.user.birthday,\n          sex: profile.user.sex,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst zoom = (userOptions) => {\n  const options = {\n    pkce: true,\n    ...userOptions\n  };\n  return {\n    id: \"zoom\",\n    name: \"Zoom\",\n    createAuthorizationURL: async ({ state, redirectURI, codeVerifier }) => {\n      const params = new URLSearchParams({\n        response_type: \"code\",\n        redirect_uri: options.redirectURI ? options.redirectURI : redirectURI,\n        client_id: options.clientId,\n        state\n      });\n      if (options.pkce) {\n        const codeChallenge = await generateCodeChallenge(codeVerifier);\n        params.set(\"code_challenge_method\", \"S256\");\n        params.set(\"code_challenge\", codeChallenge);\n      }\n      const url = new URL(\"https://zoom.us/oauth/authorize\");\n      url.search = params.toString();\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        codeVerifier,\n        options,\n        tokenEndpoint: \"https://zoom.us/oauth/token\",\n        authentication: \"post\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_5__.betterFetch)(\n        \"https://api.zoom.us/v2/users/me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          image: profile.pic_url,\n          email: profile.email,\n          emailVerified: Boolean(profile.verified),\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    }\n  };\n};\n\nconst socialProviders = {\n  apple,\n  discord,\n  facebook,\n  github,\n  microsoft,\n  google,\n  huggingface,\n  slack,\n  spotify,\n  twitch,\n  twitter,\n  dropbox,\n  kick,\n  linear,\n  linkedin,\n  gitlab,\n  tiktok,\n  reddit,\n  roblox,\n  vk,\n  zoom,\n  notion\n};\nconst socialProviderList = Object.keys(socialProviders);\nconst SocialProviderListEnum = zod_v4__WEBPACK_IMPORTED_MODULE_20__[\"enum\"](socialProviderList).or(zod_v4__WEBPACK_IMPORTED_MODULE_20__.string());\n\nconst signInSocial = createAuthEndpoint(\n  \"/sign-in/social\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * Callback URL to redirect to after the user\n       * has signed in.\n       */\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Callback URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * callback url to redirect if the user is newly registered.\n       *\n       * useful if you have different routes for existing users and new users\n       */\n      newUserCallbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n      /**\n       * Callback url to redirect to if an error happens\n       *\n       * If it's initiated from the client sdk this defaults to\n       * the current url.\n       */\n      errorCallbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Callback URL to redirect to if an error happens\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use`\n       */\n      provider: SocialProviderListEnum,\n      /**\n       * Disable automatic redirection to the provider\n       *\n       * This is useful if you want to handle the redirection\n       * yourself like in a popup or a different tab.\n       */\n      disableRedirect: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().meta({\n        description: \"Disable automatic redirection to the provider. Useful for handling the redirection yourself\"\n      }).optional(),\n      /**\n       * ID token from the provider\n       *\n       * This is used to sign in the user\n       * if the user is already signed in with the\n       * provider in the frontend.\n       *\n       * Only applicable if the provider supports\n       * it. Currently only `apple` and `google` is\n       * supported out of the box.\n       */\n      idToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.optional(\n        zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n          /**\n           * ID token from the provider\n           */\n          token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n            description: \"ID token from the provider\"\n          }),\n          /**\n           * The nonce used to generate the token\n           */\n          nonce: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n            description: \"Nonce used to generate the token\"\n          }).optional(),\n          /**\n           * Access token from the provider\n           */\n          accessToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n            description: \"Access token from the provider\"\n          }).optional(),\n          /**\n           * Refresh token from the provider\n           */\n          refreshToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n            description: \"Refresh token from the provider\"\n          }).optional(),\n          /**\n           * Expiry date of the token\n           */\n          expiresAt: zod_v4__WEBPACK_IMPORTED_MODULE_20__.number().meta({\n            description: \"Expiry date of the token\"\n          }).optional()\n        })\n      ),\n      scopes: zod_v4__WEBPACK_IMPORTED_MODULE_20__.array(zod_v4__WEBPACK_IMPORTED_MODULE_20__.string()).meta({\n        description: \"Array of scopes to request from the provider. This will override the default scopes passed.\"\n      }).optional(),\n      /**\n       * Explicitly request sign-up\n       *\n       * Should be used to allow sign up when\n       * disableImplicitSignUp for this provider is\n       * true\n       */\n      requestSignUp: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().meta({\n        description: \"Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider\"\n      }).optional(),\n      /**\n       * The login hint to use for the authorization code request\n       */\n      loginHint: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The login hint to use for the authorization code request\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with a social provider\",\n        operationId: \"socialSignIn\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\",\n                      url: {\n                        type: \"null\",\n                        nullable: true\n                      },\n                      user: {\n                        type: \"object\",\n                        properties: {\n                          id: { type: \"string\" },\n                          email: { type: \"string\" },\n                          name: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          image: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          emailVerified: {\n                            type: \"boolean\"\n                          },\n                          createdAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          },\n                          updatedAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          }\n                        },\n                        required: [\n                          \"id\",\n                          \"email\",\n                          \"emailVerified\",\n                          \"createdAt\",\n                          \"updatedAt\"\n                        ]\n                      }\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const userInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!userInfo || !userInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!userInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const data = await handleOAuthUserInfo(c, {\n        userInfo: {\n          ...userInfo.user,\n          email: userInfo.user.email,\n          id: userInfo.user.id,\n          name: userInfo.user.name || \"\",\n          image: userInfo.user.image,\n          emailVerified: userInfo.user.emailVerified || false\n        },\n        account: {\n          providerId: provider.id,\n          accountId: userInfo.user.id,\n          accessToken: c.body.idToken.accessToken\n        },\n        callbackURL: c.body.callbackURL,\n        disableSignUp: provider.disableImplicitSignUp && !c.body.requestSignUp || provider.disableSignUp\n      });\n      if (data.error) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: data.error\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(c, data.data);\n      return c.json({\n        redirect: false,\n        token: data.data.session.token,\n        url: void 0,\n        user: {\n          id: data.data.user.id,\n          email: data.data.user.email,\n          name: data.data.user.name,\n          image: data.data.user.image,\n          emailVerified: data.data.user.emailVerified,\n          createdAt: data.data.user.createdAt,\n          updatedAt: data.data.user.updatedAt\n        }\n      });\n    }\n    const { codeVerifier, state } = await generateState(c);\n    const url = await provider.createAuthorizationURL({\n      state,\n      codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes,\n      loginHint: c.body.loginHint\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: !c.body.disableRedirect\n    });\n  }\n);\nconst signInEmail = createAuthEndpoint(\n  \"/sign-in/email\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * Email of the user\n       */\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Email of the user\"\n      }),\n      /**\n       * Password of the user\n       */\n      password: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Password of the user\"\n      }),\n      /**\n       * Callback URL to use as a redirect for email\n       * verification and for possible redirects\n       */\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Callback URL to use as a redirect for email verification\"\n      }).optional(),\n      /**\n       * If this is false, the session will not be remembered\n       * @default true\n       */\n      rememberMe: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().meta({\n        description: \"If this is false, the session will not be remembered. Default is `true`.\"\n      }).default(true).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with email and password\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\"\n                    },\n                    url: {\n                      type: \"null\",\n                      nullable: true\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: { type: \"string\" },\n                        email: { type: \"string\" },\n                        name: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        image: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options?.emailAndPassword?.enabled) {\n      ctx.context.logger.error(\n        \"Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Email and password is not enabled\"\n      });\n    }\n    const { email, password } = ctx.body;\n    const isValidEmail = zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL\n      });\n    }\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      await ctx.context.password.hash(password);\n      ctx.context.logger.error(\"User not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const credentialAccount = user.accounts.find(\n      (a) => a.providerId === \"credential\"\n    );\n    if (!credentialAccount) {\n      ctx.context.logger.error(\"Credential account not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const currentPassword = credentialAccount?.password;\n    if (!currentPassword) {\n      ctx.context.logger.error(\"Password not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const validPassword = await ctx.context.password.verify({\n      hash: currentPassword,\n      password\n    });\n    if (!validPassword) {\n      ctx.context.logger.error(\"Invalid password\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    if (ctx.context.options?.emailAndPassword?.requireEmailVerification && !user.user.emailVerified) {\n      if (!ctx.context.options?.emailVerification?.sendVerificationEmail) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n          message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n        });\n      }\n      if (ctx.context.options?.emailVerification?.sendOnSignIn) {\n        const token = await createEmailVerificationToken(\n          ctx.context.secret,\n          user.user.email,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: user.user,\n            url,\n            token\n          },\n          ctx.request\n        );\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"FORBIDDEN\", {\n        message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      user.user.id,\n      ctx,\n      ctx.body.rememberMe === false\n    );\n    if (!session) {\n      ctx.context.logger.error(\"Failed to create session\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(\n      ctx,\n      {\n        session,\n        user: user.user\n      },\n      ctx.body.rememberMe === false\n    );\n    return ctx.json({\n      redirect: !!ctx.body.callbackURL,\n      token: session.token,\n      url: ctx.body.callbackURL,\n      user: {\n        id: user.user.id,\n        email: user.user.email,\n        name: user.user.name,\n        image: user.user.image,\n        emailVerified: user.user.emailVerified,\n        createdAt: user.user.createdAt,\n        updatedAt: user.user.updatedAt\n      }\n    });\n  }\n);\n\nconst schema = zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  device_id: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  error_description: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  state: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n});\nconst callbackOAuth = createAuthEndpoint(\n  \"/callback/:id\",\n  {\n    method: [\"GET\", \"POST\"],\n    body: schema.optional(),\n    query: schema.optional(),\n    metadata: HIDE_METADATA\n  },\n  async (c) => {\n    let queryOrBody;\n    const defaultErrorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    try {\n      if (c.method === \"GET\") {\n        queryOrBody = schema.parse(c.query);\n      } else if (c.method === \"POST\") {\n        queryOrBody = schema.parse(c.body);\n      } else {\n        throw new Error(\"Unsupported method\");\n      }\n    } catch (e) {\n      c.context.logger.error(\"INVALID_CALLBACK_REQUEST\", e);\n      throw c.redirect(`${defaultErrorURL}?error=invalid_callback_request`);\n    }\n    const { code, error, state, error_description, device_id } = queryOrBody;\n    if (error) {\n      throw c.redirect(\n        `${defaultErrorURL}?error=${error}&error_description=${error_description}`\n      );\n    }\n    if (!state) {\n      c.context.logger.error(\"State not found\", error);\n      throw c.redirect(`${defaultErrorURL}?error=state_not_found`);\n    }\n    const {\n      codeVerifier,\n      callbackURL,\n      link,\n      errorURL,\n      newUserURL,\n      requestSignUp\n    } = await parseState(c);\n    function redirectOnError(error2) {\n      let url = errorURL || defaultErrorURL;\n      if (url.includes(\"?\")) {\n        url = `${url}&error=${error2}`;\n      } else {\n        url = `${url}?error=${error2}`;\n      }\n      throw c.redirect(url);\n    }\n    if (!code) {\n      c.context.logger.error(\"Code not found\");\n      throw redirectOnError(\"no_code\");\n    }\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.params.id\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Oauth provider with id\",\n        c.params.id,\n        \"not found\"\n      );\n      throw redirectOnError(\"oauth_provider_not_found\");\n    }\n    let tokens;\n    try {\n      tokens = await provider.validateAuthorizationCode({\n        code,\n        codeVerifier,\n        deviceId: device_id,\n        redirectURI: `${c.context.baseURL}/callback/${provider.id}`\n      });\n    } catch (e) {\n      c.context.logger.error(\"\", e);\n      throw redirectOnError(\"invalid_code\");\n    }\n    const userInfo = await provider.getUserInfo({\n      ...tokens,\n      user: c.body?.user ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_11__.s)(c.body.user) : void 0\n    }).then((res) => res?.user);\n    if (!userInfo) {\n      c.context.logger.error(\"Unable to get user info\");\n      return redirectOnError(\"unable_to_get_user_info\");\n    }\n    if (!callbackURL) {\n      c.context.logger.error(\"No callback URL found\");\n      throw redirectOnError(\"no_callback_url\");\n    }\n    if (link) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        provider.id\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        c.context.logger.error(\"Unable to link account - untrusted provider\");\n        return redirectOnError(\"unable_to_link_account\");\n      }\n      const existingAccount = await c.context.internalAdapter.findAccount(\n        userInfo.id\n      );\n      if (existingAccount) {\n        if (existingAccount.userId.toString() !== link.userId.toString()) {\n          return redirectOnError(\"account_already_linked_to_different_user\");\n        }\n        const updateData = Object.fromEntries(\n          Object.entries({\n            accessToken: await setTokenUtil(tokens.accessToken, c.context),\n            refreshToken: await setTokenUtil(tokens.refreshToken, c.context),\n            idToken: tokens.idToken,\n            accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n            refreshTokenExpiresAt: tokens.refreshTokenExpiresAt,\n            scope: tokens.scopes?.join(\",\")\n          }).filter(([_, value]) => value !== void 0)\n        );\n        await c.context.internalAdapter.updateAccount(\n          existingAccount.id,\n          updateData\n        );\n      } else {\n        const newAccount = await c.context.internalAdapter.createAccount(\n          {\n            userId: link.userId,\n            providerId: provider.id,\n            accountId: userInfo.id,\n            ...tokens,\n            accessToken: await setTokenUtil(tokens.accessToken, c.context),\n            refreshToken: await setTokenUtil(tokens.refreshToken, c.context),\n            scope: tokens.scopes?.join(\",\")\n          },\n          c\n        );\n        if (!newAccount) {\n          return redirectOnError(\"unable_to_link_account\");\n        }\n      }\n      let toRedirectTo2;\n      try {\n        const url = callbackURL;\n        toRedirectTo2 = url.toString();\n      } catch {\n        toRedirectTo2 = callbackURL;\n      }\n      throw c.redirect(toRedirectTo2);\n    }\n    if (!userInfo.email) {\n      c.context.logger.error(\n        \"Provider did not return email. This could be due to misconfiguration in the provider settings.\"\n      );\n      return redirectOnError(\"email_not_found\");\n    }\n    const result = await handleOAuthUserInfo(c, {\n      userInfo: {\n        ...userInfo,\n        email: userInfo.email,\n        name: userInfo.name || userInfo.email\n      },\n      account: {\n        providerId: provider.id,\n        accountId: userInfo.id,\n        ...tokens,\n        scope: tokens.scopes?.join(\",\")\n      },\n      callbackURL,\n      disableSignUp: provider.disableImplicitSignUp && !requestSignUp || provider.options?.disableSignUp,\n      overrideUserInfo: provider.options?.overrideUserInfoOnSignIn\n    });\n    if (result.error) {\n      c.context.logger.error(result.error.split(\" \").join(\"_\"));\n      return redirectOnError(result.error.split(\" \").join(\"_\"));\n    }\n    const { session, user } = result.data;\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(c, {\n      session,\n      user\n    });\n    let toRedirectTo;\n    try {\n      const url = result.isRegister ? newUserURL || callbackURL : callbackURL;\n      toRedirectTo = url.toString();\n    } catch {\n      toRedirectTo = result.isRegister ? newUserURL || callbackURL : callbackURL;\n    }\n    throw c.redirect(toRedirectTo);\n  }\n);\n\nconst signOut = createAuthEndpoint(\n  \"/sign-out\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Sign out the current user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const sessionCookieToken = await ctx.getSignedCookie(\n      ctx.context.authCookies.sessionToken.name,\n      ctx.context.secret\n    );\n    if (!sessionCookieToken) {\n      (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n    await ctx.context.internalAdapter.deleteSession(sessionCookieToken);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n    return ctx.json({\n      success: true\n    });\n  }\n);\n\nfunction redirectError(ctx, callbackURL, query) {\n  const url = callbackURL ? new URL(callbackURL, ctx.baseURL) : new URL(`${ctx.baseURL}/error`);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nfunction redirectCallback(ctx, callbackURL, query) {\n  const url = new URL(callbackURL, ctx.baseURL);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nconst requestPasswordReset = createAuthEndpoint(\n  \"/request-password-reset\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.email().meta({\n        description: \"The email address of the user to send a password reset email to\"\n      }),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.g)(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst forgetPassword = createAuthEndpoint(\n  \"/forget-password\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().email().meta({\n        description: \"The email address of the user to send a password reset email to\"\n      }),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = (0,_better_auth_DBGfIDnh_mjs__WEBPACK_IMPORTED_MODULE_15__.g)(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst requestPasswordResetCallback = createAuthEndpoint(\n  \"/reset-password/:token\",\n  {\n    method: \"GET\",\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect the user to reset their password\"\n      })\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Redirects the user to the callback URL with the token\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { token } = ctx.params;\n    const { callbackURL } = ctx.query;\n    if (!token || !callbackURL) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    const verification = await ctx.context.internalAdapter.findVerificationValue(\n      `reset-password:${token}`\n    );\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    throw ctx.redirect(redirectCallback(ctx.context, callbackURL, { token }));\n  }\n);\nconst forgetPasswordCallback = requestPasswordResetCallback;\nconst resetPassword = createAuthEndpoint(\n  \"/reset-password\",\n  {\n    method: \"POST\",\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n    }).optional(),\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      newPassword: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The new password to set\"\n      }),\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The token to reset the password\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Reset the password for a user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token || ctx.query?.token;\n    if (!token) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const { newPassword } = ctx.body;\n    const minLength = ctx.context.password?.config.minPasswordLength;\n    const maxLength = ctx.context.password?.config.maxPasswordLength;\n    if (newPassword.length < minLength) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    if (newPassword.length > maxLength) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const id = `reset-password:${token}`;\n    const verification = await ctx.context.internalAdapter.findVerificationValue(id);\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const userId = verification.value;\n    const hashedPassword = await ctx.context.password.hash(newPassword);\n    const accounts = await ctx.context.internalAdapter.findAccounts(userId);\n    const account = accounts.find((ac) => ac.providerId === \"credential\");\n    if (!account) {\n      await ctx.context.internalAdapter.createAccount(\n        {\n          userId,\n          providerId: \"credential\",\n          password: hashedPassword,\n          accountId: userId\n        },\n        ctx\n      );\n    } else {\n      await ctx.context.internalAdapter.updatePassword(\n        userId,\n        hashedPassword,\n        ctx\n      );\n    }\n    await ctx.context.internalAdapter.deleteVerificationValue(verification.id);\n    if (ctx.context.options.emailAndPassword?.onPasswordReset) {\n      const user = await ctx.context.internalAdapter.findUserById(userId);\n      if (user) {\n        await ctx.context.options.emailAndPassword.onPasswordReset(\n          {\n            user\n          },\n          ctx.request\n        );\n      }\n    }\n    if (ctx.context.options.emailAndPassword?.revokeSessionsOnPasswordReset) {\n      await ctx.context.internalAdapter.deleteSessions(userId);\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nconst updateUser = () => createAuthEndpoint(\n  \"/update-user\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.record(\n      zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"Field name must be a string\"\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_20__.any()\n    ),\n    use: [sessionMiddleware],\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Update the current user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  image: {\n                    type: \"string\",\n                    description: \"The image of the user\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the update was successful\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const body = ctx.body;\n    if (body.email) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.EMAIL_CAN_NOT_BE_UPDATED\n      });\n    }\n    const { name, image, ...rest } = body;\n    const session = ctx.context.session;\n    if (image === void 0 && name === void 0 && Object.keys(rest).length === 0) {\n      return ctx.json({\n        status: true\n      });\n    }\n    const additionalFields = (0,_better_auth_n2KFGwjY_mjs__WEBPACK_IMPORTED_MODULE_16__.f)(\n      ctx.context.options,\n      rest,\n      \"update\"\n    );\n    const user = await ctx.context.internalAdapter.updateUser(\n      session.user.id,\n      {\n        name,\n        image,\n        ...additionalFields\n      },\n      ctx\n    );\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n      session: session.session,\n      user\n    });\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst changePassword = createAuthEndpoint(\n  \"/change-password\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * The new password to set\n       */\n      newPassword: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The new password to set\"\n      }),\n      /**\n       * The current password of the user\n       */\n      currentPassword: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The current password is required\"\n      }),\n      /**\n       * revoke all sessions that are not the\n       * current one logged in by the user\n       */\n      revokeOtherSessions: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().meta({\n        description: \"Must be a boolean value\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Change the password of the user\",\n        responses: {\n          \"200\": {\n            description: \"Password successfully changed\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      // Only present if revokeOtherSessions is true\n                      description: \"New session token if other sessions were revoked\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { newPassword, currentPassword, revokeOtherSessions } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    if (!account || !account.password) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n      });\n    }\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    const verify = await ctx.context.password.verify({\n      hash: account.password,\n      password: currentPassword\n    });\n    if (!verify) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_PASSWORD\n      });\n    }\n    await ctx.context.internalAdapter.updateAccount(account.id, {\n      password: passwordHash\n    });\n    let token = null;\n    if (revokeOtherSessions) {\n      await ctx.context.internalAdapter.deleteSessions(session.user.id);\n      const newSession = await ctx.context.internalAdapter.createSession(\n        session.user.id,\n        ctx\n      );\n      if (!newSession) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n        session: newSession,\n        user: session.user\n      });\n      token = newSession.token;\n    }\n    return ctx.json({\n      token,\n      user: {\n        id: session.user.id,\n        email: session.user.email,\n        name: session.user.name,\n        image: session.user.image,\n        emailVerified: session.user.emailVerified,\n        createdAt: session.user.createdAt,\n        updatedAt: session.user.updatedAt\n      }\n    });\n  }\n);\nconst setPassword = createAuthEndpoint(\n  \"/set-password\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * The new password to set\n       */\n      newPassword: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The new password to set is required\"\n      })\n    }),\n    metadata: {\n      SERVER_ONLY: true\n    },\n    use: [sessionMiddleware]\n  },\n  async (ctx) => {\n    const { newPassword } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    if (!account) {\n      await ctx.context.internalAdapter.linkAccount(\n        {\n          userId: session.user.id,\n          providerId: \"credential\",\n          accountId: session.user.id,\n          password: passwordHash\n        },\n        ctx\n      );\n      return ctx.json({\n        status: true\n      });\n    }\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"user already has a password\"\n    });\n  }\n);\nconst deleteUser = createAuthEndpoint(\n  \"/delete-user\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * The callback URL to redirect to after the user is deleted\n       * this is only used on delete user callback\n       */\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The callback URL to redirect to after the user is deleted\"\n      }).optional(),\n      /**\n       * The password of the user. If the password isn't provided, session freshness\n       * will be checked.\n       */\n      password: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The password of the user is required to delete the user\"\n      }).optional(),\n      /**\n       * The token to delete the user. If the token is provided, the user will be deleted\n       */\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The token to delete the user is required\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Delete the user\",\n        responses: {\n          \"200\": {\n            description: \"User deletion processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the operation was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\", \"Verification email sent\"],\n                      description: \"Status message of the deletion process\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\",\n        {\n          session: ctx.context.session\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\");\n    }\n    const session = ctx.context.session;\n    if (ctx.body.password) {\n      const accounts = await ctx.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const account = accounts.find(\n        (account2) => account2.providerId === \"credential\" && account2.password\n      );\n      if (!account || !account.password) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n        });\n      }\n      const verify = await ctx.context.password.verify({\n        hash: account.password,\n        password: ctx.body.password\n      });\n      if (!verify) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.INVALID_PASSWORD\n        });\n      }\n    }\n    if (ctx.body.token) {\n      await deleteUserCallback({\n        ...ctx,\n        query: {\n          token: ctx.body.token\n        }\n      });\n      return ctx.json({\n        success: true,\n        message: \"User deleted\"\n      });\n    }\n    if (ctx.context.options.user.deleteUser?.sendDeleteAccountVerification) {\n      const token = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(32, \"0-9\", \"a-z\");\n      await ctx.context.internalAdapter.createVerificationValue(\n        {\n          value: session.user.id,\n          identifier: `delete-account-${token}`,\n          expiresAt: new Date(\n            Date.now() + (ctx.context.options.user.deleteUser?.deleteTokenExpiresIn || 60 * 60 * 24) * 1e3\n          )\n        },\n        ctx\n      );\n      const url = `${ctx.context.baseURL}/delete-user/callback?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n      await ctx.context.options.user.deleteUser.sendDeleteAccountVerification(\n        {\n          user: session.user,\n          url,\n          token\n        },\n        ctx.request\n      );\n      return ctx.json({\n        success: true,\n        message: \"Verification email sent\"\n      });\n    }\n    if (!ctx.body.password && ctx.context.sessionConfig.freshAge !== 0) {\n      const currentAge = session.session.createdAt.getTime();\n      const freshAge = ctx.context.sessionConfig.freshAge * 1e3;\n      const now = Date.now();\n      if (now - currentAge > freshAge * 1e3) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.SESSION_EXPIRED\n        });\n      }\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst deleteUserCallback = createAuthEndpoint(\n  \"/delete-user/callback\",\n  {\n    method: \"GET\",\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The token to verify the deletion request\"\n      }),\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect to after deletion\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Callback to complete user deletion with verification token\",\n        responses: {\n          \"200\": {\n            description: \"User successfully deleted\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the deletion was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\"],\n                      description: \"Confirmation message\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\");\n    }\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n      });\n    }\n    const token = await ctx.context.internalAdapter.findVerificationValue(\n      `delete-account-${ctx.query.token}`\n    );\n    if (!token || token.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    if (token.value !== session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    await ctx.context.internalAdapter.deleteVerificationValue(token.id);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.deleteSessionCookie)(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL || \"/\");\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst changeEmail = createAuthEndpoint(\n  \"/change-email\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      newEmail: zod_v4__WEBPACK_IMPORTED_MODULE_20__.email().meta({\n        description: \"The new email address to set must be a valid email address\"\n      }),\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        responses: {\n          \"200\": {\n            description: \"Email change request processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the request was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"Email updated\", \"Verification email sent\"],\n                      description: \"Status message of the email change process\",\n                      nullable: true\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.changeEmail?.enabled) {\n      ctx.context.logger.error(\"Change email is disabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Change email is disabled\"\n      });\n    }\n    const newEmail = ctx.body.newEmail.toLowerCase();\n    if (newEmail === ctx.context.session.user.email) {\n      ctx.context.logger.error(\"Email is the same\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Email is the same\"\n      });\n    }\n    const existingUser = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n    if (existingUser) {\n      ctx.context.logger.error(\"Email already exists\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Couldn't update your email\"\n      });\n    }\n    if (ctx.context.session.user.emailVerified !== true) {\n      const existing = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n      if (existing) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n          message: BASE_ERROR_CODES.USER_ALREADY_EXISTS\n        });\n      }\n      await ctx.context.internalAdapter.updateUserByEmail(\n        ctx.context.session.user.email,\n        {\n          email: newEmail\n        },\n        ctx\n      );\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_10__.setSessionCookie)(ctx, {\n        session: ctx.context.session.session,\n        user: {\n          ...ctx.context.session.user,\n          email: newEmail\n        }\n      });\n      if (ctx.context.options.emailVerification?.sendVerificationEmail) {\n        const token2 = await createEmailVerificationToken(\n          ctx.context.secret,\n          newEmail,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url2 = `${ctx.context.baseURL}/verify-email?token=${token2}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: {\n              ...ctx.context.session.user,\n              email: newEmail\n            },\n            url: url2,\n            token: token2\n          },\n          ctx.request\n        );\n      }\n      return ctx.json({\n        status: true\n      });\n    }\n    if (!ctx.context.options.user.changeEmail.sendChangeEmailVerification) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const token = await createEmailVerificationToken(\n      ctx.context.secret,\n      ctx.context.session.user.email,\n      newEmail,\n      ctx.context.options.emailVerification?.expiresIn\n    );\n    const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n    await ctx.context.options.user.changeEmail.sendChangeEmailVerification(\n      {\n        user: ctx.context.session.user,\n        newEmail,\n        url,\n        token\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nfunction sanitize(input) {\n  return input.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n}\nconst html = (errorCode = \"Unknown\") => `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Authentication Error</title>\n    <style>\n        :root {\n            --bg-color: #f8f9fa;\n            --text-color: #212529;\n            --accent-color: #000000;\n            --error-color: #dc3545;\n            --border-color: #e9ecef;\n        }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            line-height: 1.5;\n        }\n        .error-container {\n            background-color: #ffffff;\n            border-radius: 12px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n            padding: 2.5rem;\n            text-align: center;\n            max-width: 90%;\n            width: 400px;\n        }\n        h1 {\n            color: var(--error-color);\n            font-size: 1.75rem;\n            margin-bottom: 1rem;\n            font-weight: 600;\n        }\n        p {\n            margin-bottom: 1.5rem;\n            color: #495057;\n        }\n        .btn {\n            background-color: var(--accent-color);\n            color: #ffffff;\n            text-decoration: none;\n            padding: 0.75rem 1.5rem;\n            border-radius: 6px;\n            transition: all 0.3s ease;\n            display: inline-block;\n            font-weight: 500;\n            border: 2px solid var(--accent-color);\n        }\n        .btn:hover {\n            background-color: #131721;\n        }\n        .error-code {\n            font-size: 0.875rem;\n            color: #6c757d;\n            margin-top: 1.5rem;\n            padding-top: 1.5rem;\n            border-top: 1px solid var(--border-color);\n        }\n        .icon {\n            font-size: 3rem;\n            margin-bottom: 1rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"error-container\">\n        <div class=\"icon\">\\u26A0\\uFE0F</div>\n        <h1>Better Auth Error</h1>\n        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>\n        <a href=\"/\" id=\"returnLink\" class=\"btn\">Return to Application</a>\n        <div class=\"error-code\">Error Code: <span id=\"errorCode\">${sanitize(\n  errorCode\n)}</span></div>\n    </div>\n</body>\n</html>`;\nconst error = createAuthEndpoint(\n  \"/error\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Displays an error page\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"text/html\": {\n                schema: {\n                  type: \"string\",\n                  description: \"The HTML content of the error page\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const query = new URL(c.request?.url || \"\").searchParams.get(\"error\") || \"Unknown\";\n    return new Response(html(query), {\n      headers: {\n        \"Content-Type\": \"text/html\"\n      }\n    });\n  }\n);\n\nconst ok = createAuthEndpoint(\n  \"/ok\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Check if the API is working\",\n        responses: {\n          \"200\": {\n            description: \"API is working\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    ok: {\n                      type: \"boolean\",\n                      description: \"Indicates if the API is working\"\n                    }\n                  },\n                  required: [\"ok\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    return ctx.json({\n      ok: true\n    });\n  }\n);\n\nconst listUserAccounts = createAuthEndpoint(\n  \"/list-accounts\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"List all accounts linked to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\"\n                      },\n                      provider: {\n                        type: \"string\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      }\n                    },\n                    accountId: {\n                      type: \"string\"\n                    },\n                    scopes: {\n                      type: \"array\",\n                      items: {\n                        type: \"string\"\n                      }\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"provider\",\n                    \"createdAt\",\n                    \"updatedAt\",\n                    \"accountId\",\n                    \"scopes\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const accounts = await c.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    return c.json(\n      accounts.map((a) => ({\n        id: a.id,\n        provider: a.providerId,\n        createdAt: a.createdAt,\n        updatedAt: a.updatedAt,\n        accountId: a.accountId,\n        scopes: a.scope?.split(\",\") || []\n      }))\n    );\n  }\n);\nconst linkSocialAccount = createAuthEndpoint(\n  \"/link-social\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      /**\n       * Callback URL to redirect to after the user has signed in.\n       */\n      callbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use\n       */\n      provider: SocialProviderListEnum,\n      /**\n       * ID Token for direct authentication without redirect\n       */\n      idToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n        token: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string(),\n        nonce: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n        accessToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n        refreshToken: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional(),\n        scopes: zod_v4__WEBPACK_IMPORTED_MODULE_20__.array(zod_v4__WEBPACK_IMPORTED_MODULE_20__.string()).optional()\n      }).optional(),\n      /**\n       * Whether to allow sign up for new users\n       */\n      requestSignUp: zod_v4__WEBPACK_IMPORTED_MODULE_20__.boolean().optional(),\n      /**\n       * Additional scopes to request when linking the account.\n       * This is useful for requesting additional permissions when\n       * linking a social account compared to the initial authentication.\n       */\n      scopes: zod_v4__WEBPACK_IMPORTED_MODULE_20__.array(zod_v4__WEBPACK_IMPORTED_MODULE_20__.string()).meta({\n        description: \"Additional scopes to request from the provider\"\n      }).optional(),\n      /**\n       * The URL to redirect to if there is an error during the link process.\n       */\n      errorCallbackURL: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The URL to redirect to if there is an error during the link process\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Link a social account to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    url: {\n                      type: \"string\",\n                      description: \"The authorization URL to redirect the user to\"\n                    },\n                    redirect: {\n                      type: \"boolean\",\n                      description: \"Indicates if the user should be redirected to the authorization URL\"\n                    },\n                    status: {\n                      type: \"boolean\"\n                    }\n                  },\n                  required: [\"redirect\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const linkingUserInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!linkingUserInfo || !linkingUserInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!linkingUserInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const existingAccounts = await c.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const hasBeenLinked = existingAccounts.find(\n        (a) => a.providerId === provider.id && a.accountId === linkingUserInfo.user.id\n      );\n      if (hasBeenLinked) {\n        return c.json({\n          redirect: false,\n          url: \"\",\n          // this is for type inference\n          status: true\n        });\n      }\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(provider.id);\n      if (!isTrustedProvider && !linkingUserInfo.user.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - linking not allowed\"\n        });\n      }\n      if (linkingUserInfo.user.email !== session.user.email && c.context.options.account?.accountLinking?.allowDifferentEmails !== true) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - different emails not allowed\"\n        });\n      }\n      try {\n        await c.context.internalAdapter.createAccount(\n          {\n            userId: session.user.id,\n            providerId: provider.id,\n            accountId: linkingUserInfo.user.id.toString(),\n            accessToken: c.body.idToken.accessToken,\n            idToken: token,\n            refreshToken: c.body.idToken.refreshToken,\n            scope: c.body.idToken.scopes?.join(\",\")\n          },\n          c\n        );\n      } catch (e) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"EXPECTATION_FAILED\", {\n          message: \"Account not linked - unable to create account\"\n        });\n      }\n      if (c.context.options.account?.accountLinking?.updateUserInfoOnLink === true) {\n        try {\n          await c.context.internalAdapter.updateUser(session.user.id, {\n            name: linkingUserInfo.user?.name,\n            image: linkingUserInfo.user?.image\n          });\n        } catch (e) {\n          console.warn(\"Could not update user - \" + e.toString());\n        }\n      }\n      return c.json({\n        redirect: false,\n        url: \"\",\n        // this is for type inference\n        status: true\n      });\n    }\n    const state = await generateState(c, {\n      userId: session.user.id,\n      email: session.user.email\n    });\n    const url = await provider.createAuthorizationURL({\n      state: state.state,\n      codeVerifier: state.codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: true\n    });\n  }\n);\nconst unlinkAccount = createAuthEndpoint(\n  \"/unlink-account\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      providerId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string(),\n      accountId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().optional()\n    }),\n    use: [freshSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Unlink an account\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId } = ctx.body;\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      ctx.context.session.user.id\n    );\n    if (accounts.length === 1 && !ctx.context.options.account?.accountLinking?.allowUnlinkingAll) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_UNLINK_LAST_ACCOUNT\n      });\n    }\n    const accountExist = accounts.find(\n      (account) => accountId ? account.accountId === accountId && account.providerId === providerId : account.providerId === providerId\n    );\n    if (!accountExist) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.ACCOUNT_NOT_FOUND\n      });\n    }\n    await ctx.context.internalAdapter.deleteAccount(accountExist.id);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst getAccessToken = createAuthEndpoint(\n  \"/get-access-token\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      providerId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Get a valid access token, doing a refresh if needed\",\n        responses: {\n          200: {\n            description: \"A Valid access token\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    if (!ctx.context.socialProviders.find((p) => p.id === providerId)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} is not supported.`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    try {\n      let newTokens = null;\n      const accessTokenExpired = account.accessTokenExpiresAt && new Date(account.accessTokenExpiresAt).getTime() - Date.now() < 5e3;\n      if (account.refreshToken && accessTokenExpired && provider.refreshAccessToken) {\n        newTokens = await provider.refreshAccessToken(\n          account.refreshToken\n        );\n        await ctx.context.internalAdapter.updateAccount(account.id, {\n          accessToken: await setTokenUtil(newTokens.accessToken, ctx.context),\n          accessTokenExpiresAt: newTokens.accessTokenExpiresAt,\n          refreshToken: await setTokenUtil(newTokens.refreshToken, ctx.context),\n          refreshTokenExpiresAt: newTokens.refreshTokenExpiresAt\n        });\n      }\n      const tokens = {\n        accessToken: await decryptOAuthToken(\n          newTokens?.accessToken ?? account.accessToken ?? \"\",\n          ctx.context\n        ),\n        accessTokenExpiresAt: newTokens?.accessTokenExpiresAt ?? account.accessTokenExpiresAt ?? void 0,\n        scopes: account.scope?.split(\",\") ?? [],\n        idToken: newTokens?.idToken ?? account.idToken ?? void 0\n      };\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Failed to get a valid access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst refreshToken = createAuthEndpoint(\n  \"/refresh-token\",\n  {\n    method: \"POST\",\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      providerId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Refresh the access token using a refresh token\",\n        responses: {\n          200: {\n            description: \"Access token refreshed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    if (!provider.refreshAccessToken) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} does not support token refreshing.`\n      });\n    }\n    try {\n      const tokens = await provider.refreshAccessToken(\n        account.refreshToken\n      );\n      await ctx.context.internalAdapter.updateAccount(account.id, {\n        accessToken: await setTokenUtil(tokens.accessToken, ctx.context),\n        refreshToken: await setTokenUtil(tokens.refreshToken, ctx.context),\n        accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n        refreshTokenExpiresAt: tokens.refreshTokenExpiresAt\n      });\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Failed to refresh access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst accountInfo = createAuthEndpoint(\n  \"/account-info\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Get the account info provided by the provider\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        name: {\n                          type: \"string\"\n                        },\n                        email: {\n                          type: \"string\"\n                        },\n                        image: {\n                          type: \"string\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        }\n                      },\n                      required: [\"id\", \"emailVerified\"]\n                    },\n                    data: {\n                      type: \"object\",\n                      properties: {},\n                      additionalProperties: true\n                    }\n                  },\n                  required: [\"user\", \"data\"],\n                  additionalProperties: false\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    body: zod_v4__WEBPACK_IMPORTED_MODULE_20__.object({\n      accountId: zod_v4__WEBPACK_IMPORTED_MODULE_20__.string().meta({\n        description: \"The provider given account id for which to get the account info\"\n      })\n    })\n  },\n  async (ctx) => {\n    const account = await ctx.context.internalAdapter.findAccount(\n      ctx.body.accountId\n    );\n    if (!account || account.userId !== ctx.context.session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === account.providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: `Provider account provider is ${account.providerId} but it is not configured`\n      });\n    }\n    const tokens = await getAccessToken({\n      ...ctx,\n      body: {\n        accountId: account.id,\n        providerId: account.providerId\n      },\n      returnHeaders: false\n    });\n    if (!tokens.accessToken) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Access token not found\"\n      });\n    }\n    const info = await provider.getUserInfo({\n      ...tokens,\n      accessToken: tokens.accessToken\n    });\n    return ctx.json(info);\n  }\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/better-auth/dist/client/react/index.mjs":
/*!******************************************************************!*\
  !*** ../../node_modules/better-auth/dist/client/react/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   capitalizeFirstLetter: () => (/* binding */ capitalizeFirstLetter),\n/* harmony export */   createAuthClient: () => (/* binding */ createAuthClient),\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_A_Crzln_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/better-auth.A_Crzln-.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.A_Crzln-.mjs\");\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! nanostores */ \"(ssr)/../../node_modules/nanostores/listen-keys/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-fetch/fetch */ \"(ssr)/../../node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/better-auth.VTXNLFMT.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/better-auth.8zoxzg-F.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_Buni1mmI_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../shared/better-auth.Buni1mmI.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.Buni1mmI.mjs\");\n/* harmony import */ var _shared_better_auth_ffWeg50w_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../shared/better-auth.ffWeg50w.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs\");\n\n\n\n\n\n\n\n\n\n\nfunction useStore(store, options = {}) {\n  let snapshotRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(store.get());\n  const { keys, deps = [store, keys] } = options;\n  let subscribe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((onChange) => {\n    const emitChange = (value) => {\n      if (snapshotRef.current === value) return;\n      snapshotRef.current = value;\n      onChange();\n    };\n    emitChange(store.value);\n    if (keys?.length) {\n      return (0,nanostores__WEBPACK_IMPORTED_MODULE_8__.listenKeys)(store, keys, emitChange);\n    }\n    return store.listen(emitChange);\n  }, deps);\n  let get = () => snapshotRef.current;\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)(subscribe, get, get);\n}\n\nfunction getAtomKey(str) {\n  return `use${capitalizeFirstLetter(str)}`;\n}\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction createAuthClient(options) {\n  const {\n    pluginPathMethods,\n    pluginsActions,\n    pluginsAtoms,\n    $fetch,\n    $store,\n    atomListeners\n  } = (0,_shared_better_auth_A_Crzln_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(options);\n  let resolvedHooks = {};\n  for (const [key, value] of Object.entries(pluginsAtoms)) {\n    resolvedHooks[getAtomKey(key)] = () => useStore(value);\n  }\n  const routes = {\n    ...pluginsActions,\n    ...resolvedHooks,\n    $fetch,\n    $store\n  };\n  const proxy = (0,_shared_better_auth_A_Crzln_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\n    routes,\n    $fetch,\n    pluginPathMethods,\n    pluginsAtoms,\n    atomListeners\n  );\n  return proxy;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3QvY2xpZW50L3JlYWN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBMEc7QUFDbEU7QUFDMEI7QUFDckM7QUFDa0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFL0MscUNBQXFDO0FBQ3JDLG9CQUFvQiw2Q0FBTTtBQUMxQixVQUFVLDZCQUE2QjtBQUN2QyxrQkFBa0Isa0RBQVc7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHNEQUFVO0FBQ3ZCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxTQUFTLDJEQUFvQjtBQUM3Qjs7QUFFQTtBQUNBLGVBQWUsMkJBQTJCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksRUFBRSxrRUFBZTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixrRUFBc0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWxhbi9EZXNrdG9wL0FwcHMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3QvY2xpZW50L3JlYWN0L2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnIGFzIGdldENsaWVudENvbmZpZywgYyBhcyBjcmVhdGVEeW5hbWljUGF0aFByb3h5IH0gZnJvbSAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLkFfQ3J6bG4tLm1qcyc7XG5pbXBvcnQgeyBsaXN0ZW5LZXlzIH0gZnJvbSAnbmFub3N0b3Jlcyc7XG5pbXBvcnQgeyB1c2VSZWYsIHVzZUNhbGxiYWNrLCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnQGJldHRlci1mZXRjaC9mZXRjaCc7XG5pbXBvcnQgJy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5WVFhOTEZNVC5tanMnO1xuaW1wb3J0ICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguOHpveHpnLUYubWpzJztcbmltcG9ydCAnLi4vLi4vc2hhcmVkL2JldHRlci1hdXRoLkRkelNKZi1uLm1qcyc7XG5pbXBvcnQgJy4uLy4uL3NoYXJlZC9iZXR0ZXItYXV0aC5CdW5pMW1tSS5tanMnO1xuaW1wb3J0ICcuLi8uLi9zaGFyZWQvYmV0dGVyLWF1dGguZmZXZWc1MHcubWpzJztcblxuZnVuY3Rpb24gdXNlU3RvcmUoc3RvcmUsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgc25hcHNob3RSZWYgPSB1c2VSZWYoc3RvcmUuZ2V0KCkpO1xuICBjb25zdCB7IGtleXMsIGRlcHMgPSBbc3RvcmUsIGtleXNdIH0gPSBvcHRpb25zO1xuICBsZXQgc3Vic2NyaWJlID0gdXNlQ2FsbGJhY2soKG9uQ2hhbmdlKSA9PiB7XG4gICAgY29uc3QgZW1pdENoYW5nZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHNuYXBzaG90UmVmLmN1cnJlbnQgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICBzbmFwc2hvdFJlZi5jdXJyZW50ID0gdmFsdWU7XG4gICAgICBvbkNoYW5nZSgpO1xuICAgIH07XG4gICAgZW1pdENoYW5nZShzdG9yZS52YWx1ZSk7XG4gICAgaWYgKGtleXM/Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGxpc3RlbktleXMoc3RvcmUsIGtleXMsIGVtaXRDaGFuZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gc3RvcmUubGlzdGVuKGVtaXRDaGFuZ2UpO1xuICB9LCBkZXBzKTtcbiAgbGV0IGdldCA9ICgpID0+IHNuYXBzaG90UmVmLmN1cnJlbnQ7XG4gIHJldHVybiB1c2VTeW5jRXh0ZXJuYWxTdG9yZShzdWJzY3JpYmUsIGdldCwgZ2V0KTtcbn1cblxuZnVuY3Rpb24gZ2V0QXRvbUtleShzdHIpIHtcbiAgcmV0dXJuIGB1c2Uke2NhcGl0YWxpemVGaXJzdExldHRlcihzdHIpfWA7XG59XG5mdW5jdGlvbiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5mdW5jdGlvbiBjcmVhdGVBdXRoQ2xpZW50KG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHBsdWdpblBhdGhNZXRob2RzLFxuICAgIHBsdWdpbnNBY3Rpb25zLFxuICAgIHBsdWdpbnNBdG9tcyxcbiAgICAkZmV0Y2gsXG4gICAgJHN0b3JlLFxuICAgIGF0b21MaXN0ZW5lcnNcbiAgfSA9IGdldENsaWVudENvbmZpZyhvcHRpb25zKTtcbiAgbGV0IHJlc29sdmVkSG9va3MgPSB7fTtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGx1Z2luc0F0b21zKSkge1xuICAgIHJlc29sdmVkSG9va3NbZ2V0QXRvbUtleShrZXkpXSA9ICgpID0+IHVzZVN0b3JlKHZhbHVlKTtcbiAgfVxuICBjb25zdCByb3V0ZXMgPSB7XG4gICAgLi4ucGx1Z2luc0FjdGlvbnMsXG4gICAgLi4ucmVzb2x2ZWRIb29rcyxcbiAgICAkZmV0Y2gsXG4gICAgJHN0b3JlXG4gIH07XG4gIGNvbnN0IHByb3h5ID0gY3JlYXRlRHluYW1pY1BhdGhQcm94eShcbiAgICByb3V0ZXMsXG4gICAgJGZldGNoLFxuICAgIHBsdWdpblBhdGhNZXRob2RzLFxuICAgIHBsdWdpbnNBdG9tcyxcbiAgICBhdG9tTGlzdGVuZXJzXG4gICk7XG4gIHJldHVybiBwcm94eTtcbn1cblxuZXhwb3J0IHsgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyLCBjcmVhdGVBdXRoQ2xpZW50LCB1c2VTdG9yZSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/better-auth/dist/client/react/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ isProduction),\n/* harmony export */   b: () => (/* binding */ isDevelopment),\n/* harmony export */   e: () => (/* binding */ env),\n/* harmony export */   i: () => (/* binding */ isTest)\n/* harmony export */ });\nconst _envShim = /* @__PURE__ */ Object.create(null);\nconst _getEnv = (useShim) => globalThis.process?.env || //@ts-expect-error\nglobalThis.Deno?.env.toObject() || //@ts-expect-error\nglobalThis.__env__ || (useShim ? _envShim : globalThis);\nconst env = new Proxy(_envShim, {\n  get(_, prop) {\n    const env2 = _getEnv();\n    return env2[prop] ?? _envShim[prop];\n  },\n  has(_, prop) {\n    const env2 = _getEnv();\n    return prop in env2 || prop in _envShim;\n  },\n  set(_, prop, value) {\n    const env2 = _getEnv(true);\n    env2[prop] = value;\n    return true;\n  },\n  deleteProperty(_, prop) {\n    if (!prop) {\n      return false;\n    }\n    const env2 = _getEnv(true);\n    delete env2[prop];\n    return true;\n  },\n  ownKeys() {\n    const env2 = _getEnv(true);\n    return Object.keys(env2);\n  }\n});\nfunction toBoolean(val) {\n  return val ? val !== \"false\" : false;\n}\nconst nodeENV = typeof process !== \"undefined\" && process.env && \"development\" || \"\";\nconst isProduction = nodeENV === \"production\";\nconst isDevelopment = nodeENV === \"dev\" || nodeENV === \"development\";\nconst isTest = nodeENV === \"test\" || toBoolean(env.TEST);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLjh6b3h6Zy1GLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLGFBQW9CO0FBQ3JGO0FBQ0E7QUFDQTs7QUFFd0UiLCJzb3VyY2VzIjpbIi9Vc2Vycy9taWxhbi9EZXNrdG9wL0FwcHMvYmV0dGVyLWF1dGgvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLjh6b3h6Zy1GLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfZW52U2hpbSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3QgX2dldEVudiA9ICh1c2VTaGltKSA9PiBnbG9iYWxUaGlzLnByb2Nlc3M/LmVudiB8fCAvL0B0cy1leHBlY3QtZXJyb3Jcbmdsb2JhbFRoaXMuRGVubz8uZW52LnRvT2JqZWN0KCkgfHwgLy9AdHMtZXhwZWN0LWVycm9yXG5nbG9iYWxUaGlzLl9fZW52X18gfHwgKHVzZVNoaW0gPyBfZW52U2hpbSA6IGdsb2JhbFRoaXMpO1xuY29uc3QgZW52ID0gbmV3IFByb3h5KF9lbnZTaGltLCB7XG4gIGdldChfLCBwcm9wKSB7XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYoKTtcbiAgICByZXR1cm4gZW52Mltwcm9wXSA/PyBfZW52U2hpbVtwcm9wXTtcbiAgfSxcbiAgaGFzKF8sIHByb3ApIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudigpO1xuICAgIHJldHVybiBwcm9wIGluIGVudjIgfHwgcHJvcCBpbiBfZW52U2hpbTtcbiAgfSxcbiAgc2V0KF8sIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYodHJ1ZSk7XG4gICAgZW52Mltwcm9wXSA9IHZhbHVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkZWxldGVQcm9wZXJ0eShfLCBwcm9wKSB7XG4gICAgaWYgKCFwcm9wKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KHRydWUpO1xuICAgIGRlbGV0ZSBlbnYyW3Byb3BdO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBvd25LZXlzKCkge1xuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KHRydWUpO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhlbnYyKTtcbiAgfVxufSk7XG5mdW5jdGlvbiB0b0Jvb2xlYW4odmFsKSB7XG4gIHJldHVybiB2YWwgPyB2YWwgIT09IFwiZmFsc2VcIiA6IGZhbHNlO1xufVxuY29uc3Qgbm9kZUVOViA9IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8IFwiXCI7XG5jb25zdCBpc1Byb2R1Y3Rpb24gPSBub2RlRU5WID09PSBcInByb2R1Y3Rpb25cIjtcbmNvbnN0IGlzRGV2ZWxvcG1lbnQgPSBub2RlRU5WID09PSBcImRldlwiIHx8IG5vZGVFTlYgPT09IFwiZGV2ZWxvcG1lbnRcIjtcbmNvbnN0IGlzVGVzdCA9IG5vZGVFTlYgPT09IFwidGVzdFwiIHx8IHRvQm9vbGVhbihlbnYuVEVTVCk7XG5cbmV4cG9ydCB7IGlzUHJvZHVjdGlvbiBhcyBhLCBpc0RldmVsb3BtZW50IGFzIGIsIGVudiBhcyBlLCBpc1Rlc3QgYXMgaSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/better-auth/dist/shared/better-auth.A_Crzln-.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.A_Crzln-.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createDynamicPathProxy),\n/* harmony export */   g: () => (/* binding */ getClientConfig)\n/* harmony export */ });\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-fetch/fetch */ \"(ssr)/../../node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.VTXNLFMT.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nanostores */ \"(ssr)/../../node_modules/nanostores/atom/index.js\");\n/* harmony import */ var _better_auth_Buni1mmI_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.Buni1mmI.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.Buni1mmI.mjs\");\n/* harmony import */ var _better_auth_ffWeg50w_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.ffWeg50w.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs\");\n\n\n\n\n\n\nconst redirectPlugin = {\n  id: \"redirect\",\n  name: \"Redirect\",\n  hooks: {\n    onSuccess(context) {\n      if (context.data?.url && context.data?.redirect) {\n        if (typeof window !== \"undefined\" && window.location) {\n          if (window.location) {\n            try {\n              window.location.href = context.data.url;\n            } catch {\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nfunction getSessionAtom($fetch) {\n  const $signal = (0,nanostores__WEBPACK_IMPORTED_MODULE_4__.atom)(false);\n  const session = (0,_better_auth_Buni1mmI_mjs__WEBPACK_IMPORTED_MODULE_2__.u)($signal, \"/get-session\", $fetch, {\n    method: \"GET\"\n  });\n  return {\n    session,\n    $sessionSignal: $signal\n  };\n}\n\nconst getClientConfig = (options) => {\n  const isCredentialsSupported = \"credentials\" in Request.prototype;\n  const baseURL = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(options?.baseURL, options?.basePath);\n  const pluginsFetchPlugins = options?.plugins?.flatMap((plugin) => plugin.fetchPlugins).filter((pl) => pl !== void 0) || [];\n  const lifeCyclePlugin = {\n    id: \"lifecycle-hooks\",\n    name: \"lifecycle-hooks\",\n    hooks: {\n      onSuccess: options?.fetchOptions?.onSuccess,\n      onError: options?.fetchOptions?.onError,\n      onRequest: options?.fetchOptions?.onRequest,\n      onResponse: options?.fetchOptions?.onResponse\n    }\n  };\n  const { onSuccess, onError, onRequest, onResponse, ...restOfFetchOptions } = options?.fetchOptions || {};\n  const $fetch = (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.createFetch)({\n    baseURL,\n    ...isCredentialsSupported ? { credentials: \"include\" } : {},\n    method: \"GET\",\n    jsonParser(text) {\n      if (!text) {\n        return null;\n      }\n      return (0,_better_auth_ffWeg50w_mjs__WEBPACK_IMPORTED_MODULE_3__.p)(text, {\n        strict: false\n      });\n    },\n    customFetchImpl: async (input, init) => {\n      try {\n        return await fetch(input, init);\n      } catch (error) {\n        return Response.error();\n      }\n    },\n    ...restOfFetchOptions,\n    plugins: [\n      lifeCyclePlugin,\n      ...restOfFetchOptions.plugins || [],\n      ...options?.disableDefaultFetchPlugins ? [] : [redirectPlugin],\n      ...pluginsFetchPlugins\n    ]\n  });\n  const { $sessionSignal, session } = getSessionAtom($fetch);\n  const plugins = options?.plugins || [];\n  let pluginsActions = {};\n  let pluginsAtoms = {\n    $sessionSignal,\n    session\n  };\n  let pluginPathMethods = {\n    \"/sign-out\": \"POST\",\n    \"/revoke-sessions\": \"POST\",\n    \"/revoke-other-sessions\": \"POST\",\n    \"/delete-user\": \"POST\"\n  };\n  const atomListeners = [\n    {\n      signal: \"$sessionSignal\",\n      matcher(path) {\n        return path === \"/sign-out\" || path === \"/update-user\" || path.startsWith(\"/sign-in\") || path.startsWith(\"/sign-up\") || path === \"/delete-user\" || path === \"/verify-email\";\n      }\n    }\n  ];\n  for (const plugin of plugins) {\n    if (plugin.getAtoms) {\n      Object.assign(pluginsAtoms, plugin.getAtoms?.($fetch));\n    }\n    if (plugin.pathMethods) {\n      Object.assign(pluginPathMethods, plugin.pathMethods);\n    }\n    if (plugin.atomListeners) {\n      atomListeners.push(...plugin.atomListeners);\n    }\n  }\n  const $store = {\n    notify: (signal) => {\n      pluginsAtoms[signal].set(\n        !pluginsAtoms[signal].get()\n      );\n    },\n    listen: (signal, listener) => {\n      pluginsAtoms[signal].subscribe(listener);\n    },\n    atoms: pluginsAtoms\n  };\n  for (const plugin of plugins) {\n    if (plugin.getActions) {\n      Object.assign(\n        pluginsActions,\n        plugin.getActions?.($fetch, $store, options)\n      );\n    }\n  }\n  return {\n    pluginsActions,\n    pluginsAtoms,\n    pluginPathMethods,\n    atomListeners,\n    $fetch,\n    $store\n  };\n};\n\nfunction getMethod(path, knownPathMethods, args) {\n  const method = knownPathMethods[path];\n  const { fetchOptions, query, ...body } = args || {};\n  if (method) {\n    return method;\n  }\n  if (fetchOptions?.method) {\n    return fetchOptions.method;\n  }\n  if (body && Object.keys(body).length > 0) {\n    return \"POST\";\n  }\n  return \"GET\";\n}\nfunction createDynamicPathProxy(routes, client, knownPathMethods, atoms, atomListeners) {\n  function createProxy(path = []) {\n    return new Proxy(function() {\n    }, {\n      get(target, prop) {\n        const fullPath = [...path, prop];\n        let current = routes;\n        for (const segment of fullPath) {\n          if (current && typeof current === \"object\" && segment in current) {\n            current = current[segment];\n          } else {\n            current = void 0;\n            break;\n          }\n        }\n        if (typeof current === \"function\") {\n          return current;\n        }\n        return createProxy(fullPath);\n      },\n      apply: async (_, __, args) => {\n        const routePath = \"/\" + path.map(\n          (segment) => segment.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`)\n        ).join(\"/\");\n        const arg = args[0] || {};\n        const fetchOptions = args[1] || {};\n        const { query, fetchOptions: argFetchOptions, ...body } = arg;\n        const options = {\n          ...fetchOptions,\n          ...argFetchOptions\n        };\n        const method = getMethod(routePath, knownPathMethods, arg);\n        return await client(routePath, {\n          ...options,\n          body: method === \"GET\" ? void 0 : {\n            ...body,\n            ...options?.body || {}\n          },\n          query: query || options?.query,\n          method,\n          async onSuccess(context) {\n            await options?.onSuccess?.(context);\n            const matches = atomListeners?.find((s) => s.matcher(routePath));\n            if (!matches) return;\n            const signal = atoms[matches.signal];\n            if (!signal) return;\n            const val = signal.get();\n            setTimeout(() => {\n              signal.set(!val);\n            }, 10);\n          }\n        });\n      }\n    });\n  }\n  return createProxy();\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/better-auth/dist/shared/better-auth.A_Crzln-.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/better-auth/dist/shared/better-auth.Buni1mmI.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.Buni1mmI.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   u: () => (/* binding */ useAuthQuery)\n/* harmony export */ });\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nanostores */ \"(ssr)/../../node_modules/nanostores/atom/index.js\");\n/* harmony import */ var nanostores__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nanostores */ \"(ssr)/../../node_modules/nanostores/lifecycle/index.js\");\n\n\nconst isServer = typeof window === \"undefined\";\nconst useAuthQuery = (initializedAtom, path, $fetch, options) => {\n  const value = (0,nanostores__WEBPACK_IMPORTED_MODULE_0__.atom)({\n    data: null,\n    error: null,\n    isPending: true,\n    isRefetching: false,\n    refetch: () => {\n      return fn();\n    }\n  });\n  const fn = () => {\n    const opts = typeof options === \"function\" ? options({\n      data: value.get().data,\n      error: value.get().error,\n      isPending: value.get().isPending\n    }) : options;\n    return $fetch(path, {\n      ...opts,\n      async onSuccess(context) {\n        value.set({\n          data: context.data,\n          error: null,\n          isPending: false,\n          isRefetching: false,\n          refetch: value.value.refetch\n        });\n        await opts?.onSuccess?.(context);\n      },\n      async onError(context) {\n        const { request } = context;\n        const retryAttempts = typeof request.retry === \"number\" ? request.retry : request.retry?.attempts;\n        const retryAttempt = request.retryAttempt || 0;\n        if (retryAttempts && retryAttempt < retryAttempts) return;\n        value.set({\n          error: context.error,\n          data: null,\n          isPending: false,\n          isRefetching: false,\n          refetch: value.value.refetch\n        });\n        await opts?.onError?.(context);\n      },\n      async onRequest(context) {\n        const currentValue = value.get();\n        value.set({\n          isPending: currentValue.data === null,\n          data: currentValue.data,\n          error: null,\n          isRefetching: true,\n          refetch: value.value.refetch\n        });\n        await opts?.onRequest?.(context);\n      }\n    });\n  };\n  initializedAtom = Array.isArray(initializedAtom) ? initializedAtom : [initializedAtom];\n  let isMounted = false;\n  for (const initAtom of initializedAtom) {\n    initAtom.subscribe(() => {\n      if (isServer) {\n        return;\n      }\n      if (isMounted) {\n        fn();\n      } else {\n        (0,nanostores__WEBPACK_IMPORTED_MODULE_1__.onMount)(value, () => {\n          setTimeout(() => {\n            fn();\n          }, 0);\n          isMounted = true;\n          return () => {\n            value.off();\n            initAtom.off();\n          };\n        });\n      }\n    });\n  }\n  return value;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkJ1bmkxbW1JLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkM7O0FBRTNDO0FBQ0E7QUFDQSxnQkFBZ0IsZ0RBQUk7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLFFBQVEsbURBQU87QUFDZjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUU2QiIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQnVuaTFtbUkubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF0b20sIG9uTW91bnQgfSBmcm9tICduYW5vc3RvcmVzJztcblxuY29uc3QgaXNTZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiO1xuY29uc3QgdXNlQXV0aFF1ZXJ5ID0gKGluaXRpYWxpemVkQXRvbSwgcGF0aCwgJGZldGNoLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gYXRvbSh7XG4gICAgZGF0YTogbnVsbCxcbiAgICBlcnJvcjogbnVsbCxcbiAgICBpc1BlbmRpbmc6IHRydWUsXG4gICAgaXNSZWZldGNoaW5nOiBmYWxzZSxcbiAgICByZWZldGNoOiAoKSA9PiB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBmbiA9ICgpID0+IHtcbiAgICBjb25zdCBvcHRzID0gdHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnMoe1xuICAgICAgZGF0YTogdmFsdWUuZ2V0KCkuZGF0YSxcbiAgICAgIGVycm9yOiB2YWx1ZS5nZXQoKS5lcnJvcixcbiAgICAgIGlzUGVuZGluZzogdmFsdWUuZ2V0KCkuaXNQZW5kaW5nXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiAkZmV0Y2gocGF0aCwge1xuICAgICAgLi4ub3B0cyxcbiAgICAgIGFzeW5jIG9uU3VjY2Vzcyhjb250ZXh0KSB7XG4gICAgICAgIHZhbHVlLnNldCh7XG4gICAgICAgICAgZGF0YTogY29udGV4dC5kYXRhLFxuICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgIGlzUGVuZGluZzogZmFsc2UsXG4gICAgICAgICAgaXNSZWZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICByZWZldGNoOiB2YWx1ZS52YWx1ZS5yZWZldGNoXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBvcHRzPy5vblN1Y2Nlc3M/Lihjb250ZXh0KTtcbiAgICAgIH0sXG4gICAgICBhc3luYyBvbkVycm9yKGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyByZXF1ZXN0IH0gPSBjb250ZXh0O1xuICAgICAgICBjb25zdCByZXRyeUF0dGVtcHRzID0gdHlwZW9mIHJlcXVlc3QucmV0cnkgPT09IFwibnVtYmVyXCIgPyByZXF1ZXN0LnJldHJ5IDogcmVxdWVzdC5yZXRyeT8uYXR0ZW1wdHM7XG4gICAgICAgIGNvbnN0IHJldHJ5QXR0ZW1wdCA9IHJlcXVlc3QucmV0cnlBdHRlbXB0IHx8IDA7XG4gICAgICAgIGlmIChyZXRyeUF0dGVtcHRzICYmIHJldHJ5QXR0ZW1wdCA8IHJldHJ5QXR0ZW1wdHMpIHJldHVybjtcbiAgICAgICAgdmFsdWUuc2V0KHtcbiAgICAgICAgICBlcnJvcjogY29udGV4dC5lcnJvcixcbiAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgIGlzUGVuZGluZzogZmFsc2UsXG4gICAgICAgICAgaXNSZWZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICByZWZldGNoOiB2YWx1ZS52YWx1ZS5yZWZldGNoXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBvcHRzPy5vbkVycm9yPy4oY29udGV4dCk7XG4gICAgICB9LFxuICAgICAgYXN5bmMgb25SZXF1ZXN0KGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdmFsdWUuZ2V0KCk7XG4gICAgICAgIHZhbHVlLnNldCh7XG4gICAgICAgICAgaXNQZW5kaW5nOiBjdXJyZW50VmFsdWUuZGF0YSA9PT0gbnVsbCxcbiAgICAgICAgICBkYXRhOiBjdXJyZW50VmFsdWUuZGF0YSxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICBpc1JlZmV0Y2hpbmc6IHRydWUsXG4gICAgICAgICAgcmVmZXRjaDogdmFsdWUudmFsdWUucmVmZXRjaFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgb3B0cz8ub25SZXF1ZXN0Py4oY29udGV4dCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGluaXRpYWxpemVkQXRvbSA9IEFycmF5LmlzQXJyYXkoaW5pdGlhbGl6ZWRBdG9tKSA/IGluaXRpYWxpemVkQXRvbSA6IFtpbml0aWFsaXplZEF0b21dO1xuICBsZXQgaXNNb3VudGVkID0gZmFsc2U7XG4gIGZvciAoY29uc3QgaW5pdEF0b20gb2YgaW5pdGlhbGl6ZWRBdG9tKSB7XG4gICAgaW5pdEF0b20uc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmIChpc1NlcnZlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNNb3VudGVkKSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbk1vdW50KHZhbHVlLCAoKSA9PiB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIGlzTW91bnRlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHZhbHVlLm9mZigpO1xuICAgICAgICAgICAgaW5pdEF0b20ub2ZmKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0IHsgdXNlQXV0aFF1ZXJ5IGFzIHUgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/better-auth/dist/shared/better-auth.Buni1mmI.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BetterAuthError),\n/* harmony export */   M: () => (/* binding */ MissingDependencyError)\n/* harmony export */ });\nclass BetterAuthError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.name = \"BetterAuthError\";\n    this.message = message;\n    this.cause = cause;\n    this.stack = \"\";\n  }\n}\nclass MissingDependencyError extends BetterAuthError {\n  constructor(pkgName) {\n    super(\n      `The package \"${pkgName}\" is required. Make sure it is installed.`,\n      pkgName\n    );\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkRkelNKZi1uLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixRQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUU2RCIsInNvdXJjZXMiOlsiL1VzZXJzL21pbGFuL0Rlc2t0b3AvQXBwcy9iZXR0ZXItYXV0aC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEJldHRlckF1dGhFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgY2F1c2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSBcIkJldHRlckF1dGhFcnJvclwiO1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgIHRoaXMuc3RhY2sgPSBcIlwiO1xuICB9XG59XG5jbGFzcyBNaXNzaW5nRGVwZW5kZW5jeUVycm9yIGV4dGVuZHMgQmV0dGVyQXV0aEVycm9yIHtcbiAgY29uc3RydWN0b3IocGtnTmFtZSkge1xuICAgIHN1cGVyKFxuICAgICAgYFRoZSBwYWNrYWdlIFwiJHtwa2dOYW1lfVwiIGlzIHJlcXVpcmVkLiBNYWtlIHN1cmUgaXQgaXMgaW5zdGFsbGVkLmAsXG4gICAgICBwa2dOYW1lXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBCZXR0ZXJBdXRoRXJyb3IgYXMgQiwgTWlzc2luZ0RlcGVuZGVuY3lFcnJvciBhcyBNIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBaseURL),\n/* harmony export */   b: () => (/* binding */ getHost),\n/* harmony export */   c: () => (/* binding */ getProtocol),\n/* harmony export */   g: () => (/* binding */ getOrigin)\n/* harmony export */ });\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(ssr)/../../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nfunction checkHasPath(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.pathname !== \"/\";\n  } catch (error) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n      `Invalid base URL: ${url}. Please provide a valid base URL.`\n    );\n  }\n}\nfunction withPath(url, path = \"/api/auth\") {\n  const hasPath = checkHasPath(url);\n  if (hasPath) {\n    return url;\n  }\n  path = path.startsWith(\"/\") ? path : `/${path}`;\n  return `${url.replace(/\\/+$/, \"\")}${path}`;\n}\nfunction getBaseURL(url, path, request) {\n  if (url) {\n    return withPath(url, path);\n  }\n  const fromEnv = _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NEXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_AUTH_URL || (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL !== \"/\" ? _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL : void 0);\n  if (fromEnv) {\n    return withPath(fromEnv, path);\n  }\n  const fromRequest = request?.headers.get(\"x-forwarded-host\");\n  const fromRequestProto = request?.headers.get(\"x-forwarded-proto\");\n  if (fromRequest && fromRequestProto) {\n    return withPath(`${fromRequestProto}://${fromRequest}`, path);\n  }\n  if (request) {\n    const url2 = getOrigin(request.url);\n    if (!url2) {\n      throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n        \"Could not get origin from request. Please provide a valid base URL.\"\n      );\n    }\n    return withPath(url2, path);\n  }\n  if (typeof window !== \"undefined\" && window.location) {\n    return withPath(window.location.origin, path);\n  }\n  return void 0;\n}\nfunction getOrigin(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.origin;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getProtocol(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getHost(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.host;\n  } catch (error) {\n    return url;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLlZUWE5MRk1ULm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0Q7QUFDWTs7QUFFbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osY0FBYyx3REFBZTtBQUM3QiwyQkFBMkIsSUFBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLEtBQUs7QUFDaEQsWUFBWSx3QkFBd0IsRUFBRSxLQUFLO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0RBQUcsb0JBQW9CLHdEQUFHLGdDQUFnQyx3REFBRywyQkFBMkIsd0RBQUcsZ0NBQWdDLHdEQUFHLDBCQUEwQix3REFBRyxvQkFBb0Isd0RBQUc7QUFDcE07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlCQUFpQixLQUFLLFlBQVk7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0RBQWU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRTJFIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5WVFhOTEZNVC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZSBhcyBlbnYgfSBmcm9tICcuL2JldHRlci1hdXRoLjh6b3h6Zy1GLm1qcyc7XG5pbXBvcnQgeyBCIGFzIEJldHRlckF1dGhFcnJvciB9IGZyb20gJy4vYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzJztcblxuZnVuY3Rpb24gY2hlY2tIYXNQYXRoKHVybCkge1xuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsKTtcbiAgICByZXR1cm4gcGFyc2VkVXJsLnBhdGhuYW1lICE9PSBcIi9cIjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgQmV0dGVyQXV0aEVycm9yKFxuICAgICAgYEludmFsaWQgYmFzZSBVUkw6ICR7dXJsfS4gUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBiYXNlIFVSTC5gXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gd2l0aFBhdGgodXJsLCBwYXRoID0gXCIvYXBpL2F1dGhcIikge1xuICBjb25zdCBoYXNQYXRoID0gY2hlY2tIYXNQYXRoKHVybCk7XG4gIGlmIChoYXNQYXRoKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBwYXRoID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IHBhdGggOiBgLyR7cGF0aH1gO1xuICByZXR1cm4gYCR7dXJsLnJlcGxhY2UoL1xcLyskLywgXCJcIil9JHtwYXRofWA7XG59XG5mdW5jdGlvbiBnZXRCYXNlVVJMKHVybCwgcGF0aCwgcmVxdWVzdCkge1xuICBpZiAodXJsKSB7XG4gICAgcmV0dXJuIHdpdGhQYXRoKHVybCwgcGF0aCk7XG4gIH1cbiAgY29uc3QgZnJvbUVudiA9IGVudi5CRVRURVJfQVVUSF9VUkwgfHwgZW52Lk5FWFRfUFVCTElDX0JFVFRFUl9BVVRIX1VSTCB8fCBlbnYuUFVCTElDX0JFVFRFUl9BVVRIX1VSTCB8fCBlbnYuTlVYVF9QVUJMSUNfQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5OVVhUX1BVQkxJQ19BVVRIX1VSTCB8fCAoZW52LkJBU0VfVVJMICE9PSBcIi9cIiA/IGVudi5CQVNFX1VSTCA6IHZvaWQgMCk7XG4gIGlmIChmcm9tRW52KSB7XG4gICAgcmV0dXJuIHdpdGhQYXRoKGZyb21FbnYsIHBhdGgpO1xuICB9XG4gIGNvbnN0IGZyb21SZXF1ZXN0ID0gcmVxdWVzdD8uaGVhZGVycy5nZXQoXCJ4LWZvcndhcmRlZC1ob3N0XCIpO1xuICBjb25zdCBmcm9tUmVxdWVzdFByb3RvID0gcmVxdWVzdD8uaGVhZGVycy5nZXQoXCJ4LWZvcndhcmRlZC1wcm90b1wiKTtcbiAgaWYgKGZyb21SZXF1ZXN0ICYmIGZyb21SZXF1ZXN0UHJvdG8pIHtcbiAgICByZXR1cm4gd2l0aFBhdGgoYCR7ZnJvbVJlcXVlc3RQcm90b306Ly8ke2Zyb21SZXF1ZXN0fWAsIHBhdGgpO1xuICB9XG4gIGlmIChyZXF1ZXN0KSB7XG4gICAgY29uc3QgdXJsMiA9IGdldE9yaWdpbihyZXF1ZXN0LnVybCk7XG4gICAgaWYgKCF1cmwyKSB7XG4gICAgICB0aHJvdyBuZXcgQmV0dGVyQXV0aEVycm9yKFxuICAgICAgICBcIkNvdWxkIG5vdCBnZXQgb3JpZ2luIGZyb20gcmVxdWVzdC4gUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBiYXNlIFVSTC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHdpdGhQYXRoKHVybDIsIHBhdGgpO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbikge1xuICAgIHJldHVybiB3aXRoUGF0aCh3aW5kb3cubG9jYXRpb24ub3JpZ2luLCBwYXRoKTtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gZ2V0T3JpZ2luKHVybCkge1xuICB0cnkge1xuICAgIGNvbnN0IHBhcnNlZFVybCA9IG5ldyBVUkwodXJsKTtcbiAgICByZXR1cm4gcGFyc2VkVXJsLm9yaWdpbjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UHJvdG9jb2wodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEhvc3QodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwuaG9zdDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldEJhc2VVUkwgYXMgYSwgZ2V0SG9zdCBhcyBiLCBnZXRQcm90b2NvbCBhcyBjLCBnZXRPcmlnaW4gYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   p: () => (/* binding */ parseJSON)\n/* harmony export */ });\nconst PROTO_POLLUTION_PATTERNS = {\n  proto: /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/,\n  constructor: /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/,\n  protoShort: /\"__proto__\"\\s*:/,\n  constructorShort: /\"constructor\"\\s*:/\n};\nconst JSON_SIGNATURE = /^\\s*[\"[{]|^\\s*-?\\d{1,16}(\\.\\d{1,17})?([Ee][+-]?\\d+)?\\s*$/;\nconst SPECIAL_VALUES = {\n  true: true,\n  false: false,\n  null: null,\n  undefined: void 0,\n  nan: Number.NaN,\n  infinity: Number.POSITIVE_INFINITY,\n  \"-infinity\": Number.NEGATIVE_INFINITY\n};\nconst ISO_DATE_REGEX = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{1,7}))?(?:Z|([+-])(\\d{2}):(\\d{2}))$/;\nfunction isValidDate(date) {\n  return date instanceof Date && !isNaN(date.getTime());\n}\nfunction parseISODate(value) {\n  const match = ISO_DATE_REGEX.exec(value);\n  if (!match) return null;\n  const [\n    ,\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second,\n    ms,\n    offsetSign,\n    offsetHour,\n    offsetMinute\n  ] = match;\n  let date = new Date(\n    Date.UTC(\n      parseInt(year, 10),\n      parseInt(month, 10) - 1,\n      parseInt(day, 10),\n      parseInt(hour, 10),\n      parseInt(minute, 10),\n      parseInt(second, 10),\n      ms ? parseInt(ms.padEnd(3, \"0\"), 10) : 0\n    )\n  );\n  if (offsetSign) {\n    const offset = (parseInt(offsetHour, 10) * 60 + parseInt(offsetMinute, 10)) * (offsetSign === \"+\" ? -1 : 1);\n    date.setUTCMinutes(date.getUTCMinutes() + offset);\n  }\n  return isValidDate(date) ? date : null;\n}\nfunction betterJSONParse(value, options = {}) {\n  const {\n    strict = false,\n    warnings = false,\n    reviver,\n    parseDates = true\n  } = options;\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  const trimmed = value.trim();\n  if (trimmed[0] === '\"' && trimmed.endsWith('\"') && !trimmed.slice(1, -1).includes('\"')) {\n    return trimmed.slice(1, -1);\n  }\n  const lowerValue = trimmed.toLowerCase();\n  if (lowerValue.length <= 9 && lowerValue in SPECIAL_VALUES) {\n    return SPECIAL_VALUES[lowerValue];\n  }\n  if (!JSON_SIGNATURE.test(trimmed)) {\n    if (strict) {\n      throw new SyntaxError(\"[better-json] Invalid JSON\");\n    }\n    return value;\n  }\n  const hasProtoPattern = Object.entries(PROTO_POLLUTION_PATTERNS).some(\n    ([key, pattern]) => {\n      const matches = pattern.test(trimmed);\n      if (matches && warnings) {\n        console.warn(\n          `[better-json] Detected potential prototype pollution attempt using ${key} pattern`\n        );\n      }\n      return matches;\n    }\n  );\n  if (hasProtoPattern && strict) {\n    throw new Error(\n      \"[better-json] Potential prototype pollution attempt detected\"\n    );\n  }\n  try {\n    const secureReviver = (key, value2) => {\n      if (key === \"__proto__\" || key === \"constructor\" && value2 && typeof value2 === \"object\" && \"prototype\" in value2) {\n        if (warnings) {\n          console.warn(\n            `[better-json] Dropping \"${key}\" key to prevent prototype pollution`\n          );\n        }\n        return void 0;\n      }\n      if (parseDates && typeof value2 === \"string\") {\n        const date = parseISODate(value2);\n        if (date) {\n          return date;\n        }\n      }\n      return reviver ? reviver(key, value2) : value2;\n    };\n    return JSON.parse(trimmed, secureReviver);\n  } catch (error) {\n    if (strict) {\n      throw error;\n    }\n    return value;\n  }\n}\nfunction parseJSON(value, options = { strict: true }) {\n  return betterJSONParse(value, options);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLmZmV2VnNTB3Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSxxQkFBcUIsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRTtBQUN0STtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxXQUFXLEtBQUssTUFBTSxLQUFLO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxJQUFJLGtCQUFrQixFQUFFLE1BQU0sRUFBRTtBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRixLQUFLO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxJQUFJO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxjQUFjO0FBQ3BEO0FBQ0E7O0FBRTBCIiwic291cmNlcyI6WyIvVXNlcnMvbWlsYW4vRGVza3RvcC9BcHBzL2JldHRlci1hdXRoL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5mZldlZzUwdy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUFJPVE9fUE9MTFVUSU9OX1BBVFRFUk5TID0ge1xuICBwcm90bzogL1wiKD86X3xcXFxcdTB7Mn01W0ZmXSl7Mn0oPzpwfFxcXFx1MHsyfTcwKSg/OnJ8XFxcXHUwezJ9NzIpKD86b3xcXFxcdTB7Mn02W0ZmXSkoPzp0fFxcXFx1MHsyfTc0KSg/Om98XFxcXHUwezJ9NltGZl0pKD86X3xcXFxcdTB7Mn01W0ZmXSl7Mn1cIlxccyo6LyxcbiAgY29uc3RydWN0b3I6IC9cIig/OmN8XFxcXHUwMDYzKSg/Om98XFxcXHUwMDZbRmZdKSg/Om58XFxcXHUwMDZbRWVdKSg/OnN8XFxcXHUwMDczKSg/OnR8XFxcXHUwMDc0KSg/OnJ8XFxcXHUwMDcyKSg/OnV8XFxcXHUwMDc1KSg/OmN8XFxcXHUwMDYzKSg/OnR8XFxcXHUwMDc0KSg/Om98XFxcXHUwMDZbRmZdKSg/OnJ8XFxcXHUwMDcyKVwiXFxzKjovLFxuICBwcm90b1Nob3J0OiAvXCJfX3Byb3RvX19cIlxccyo6LyxcbiAgY29uc3RydWN0b3JTaG9ydDogL1wiY29uc3RydWN0b3JcIlxccyo6L1xufTtcbmNvbnN0IEpTT05fU0lHTkFUVVJFID0gL15cXHMqW1wiW3tdfF5cXHMqLT9cXGR7MSwxNn0oXFwuXFxkezEsMTd9KT8oW0VlXVsrLV0/XFxkKyk/XFxzKiQvO1xuY29uc3QgU1BFQ0lBTF9WQUxVRVMgPSB7XG4gIHRydWU6IHRydWUsXG4gIGZhbHNlOiBmYWxzZSxcbiAgbnVsbDogbnVsbCxcbiAgdW5kZWZpbmVkOiB2b2lkIDAsXG4gIG5hbjogTnVtYmVyLk5hTixcbiAgaW5maW5pdHk6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgXCItaW5maW5pdHlcIjogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG59O1xuY29uc3QgSVNPX0RBVEVfUkVHRVggPSAvXihcXGR7NH0pLShcXGR7Mn0pLShcXGR7Mn0pVChcXGR7Mn0pOihcXGR7Mn0pOihcXGR7Mn0pKD86XFwuKFxcZHsxLDd9KSk/KD86WnwoWystXSkoXFxkezJ9KTooXFxkezJ9KSkkLztcbmZ1bmN0aW9uIGlzVmFsaWREYXRlKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTihkYXRlLmdldFRpbWUoKSk7XG59XG5mdW5jdGlvbiBwYXJzZUlTT0RhdGUodmFsdWUpIHtcbiAgY29uc3QgbWF0Y2ggPSBJU09fREFURV9SRUdFWC5leGVjKHZhbHVlKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IFtcbiAgICAsXG4gICAgeWVhcixcbiAgICBtb250aCxcbiAgICBkYXksXG4gICAgaG91cixcbiAgICBtaW51dGUsXG4gICAgc2Vjb25kLFxuICAgIG1zLFxuICAgIG9mZnNldFNpZ24sXG4gICAgb2Zmc2V0SG91cixcbiAgICBvZmZzZXRNaW51dGVcbiAgXSA9IG1hdGNoO1xuICBsZXQgZGF0ZSA9IG5ldyBEYXRlKFxuICAgIERhdGUuVVRDKFxuICAgICAgcGFyc2VJbnQoeWVhciwgMTApLFxuICAgICAgcGFyc2VJbnQobW9udGgsIDEwKSAtIDEsXG4gICAgICBwYXJzZUludChkYXksIDEwKSxcbiAgICAgIHBhcnNlSW50KGhvdXIsIDEwKSxcbiAgICAgIHBhcnNlSW50KG1pbnV0ZSwgMTApLFxuICAgICAgcGFyc2VJbnQoc2Vjb25kLCAxMCksXG4gICAgICBtcyA/IHBhcnNlSW50KG1zLnBhZEVuZCgzLCBcIjBcIiksIDEwKSA6IDBcbiAgICApXG4gICk7XG4gIGlmIChvZmZzZXRTaWduKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gKHBhcnNlSW50KG9mZnNldEhvdXIsIDEwKSAqIDYwICsgcGFyc2VJbnQob2Zmc2V0TWludXRlLCAxMCkpICogKG9mZnNldFNpZ24gPT09IFwiK1wiID8gLTEgOiAxKTtcbiAgICBkYXRlLnNldFVUQ01pbnV0ZXMoZGF0ZS5nZXRVVENNaW51dGVzKCkgKyBvZmZzZXQpO1xuICB9XG4gIHJldHVybiBpc1ZhbGlkRGF0ZShkYXRlKSA/IGRhdGUgOiBudWxsO1xufVxuZnVuY3Rpb24gYmV0dGVySlNPTlBhcnNlKHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHN0cmljdCA9IGZhbHNlLFxuICAgIHdhcm5pbmdzID0gZmFsc2UsXG4gICAgcmV2aXZlcixcbiAgICBwYXJzZURhdGVzID0gdHJ1ZVxuICB9ID0gb3B0aW9ucztcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCB0cmltbWVkID0gdmFsdWUudHJpbSgpO1xuICBpZiAodHJpbW1lZFswXSA9PT0gJ1wiJyAmJiB0cmltbWVkLmVuZHNXaXRoKCdcIicpICYmICF0cmltbWVkLnNsaWNlKDEsIC0xKS5pbmNsdWRlcygnXCInKSkge1xuICAgIHJldHVybiB0cmltbWVkLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBjb25zdCBsb3dlclZhbHVlID0gdHJpbW1lZC50b0xvd2VyQ2FzZSgpO1xuICBpZiAobG93ZXJWYWx1ZS5sZW5ndGggPD0gOSAmJiBsb3dlclZhbHVlIGluIFNQRUNJQUxfVkFMVUVTKSB7XG4gICAgcmV0dXJuIFNQRUNJQUxfVkFMVUVTW2xvd2VyVmFsdWVdO1xuICB9XG4gIGlmICghSlNPTl9TSUdOQVRVUkUudGVzdCh0cmltbWVkKSkge1xuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIltiZXR0ZXItanNvbl0gSW52YWxpZCBKU09OXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgY29uc3QgaGFzUHJvdG9QYXR0ZXJuID0gT2JqZWN0LmVudHJpZXMoUFJPVE9fUE9MTFVUSU9OX1BBVFRFUk5TKS5zb21lKFxuICAgIChba2V5LCBwYXR0ZXJuXSkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHBhdHRlcm4udGVzdCh0cmltbWVkKTtcbiAgICAgIGlmIChtYXRjaGVzICYmIHdhcm5pbmdzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW2JldHRlci1qc29uXSBEZXRlY3RlZCBwb3RlbnRpYWwgcHJvdG90eXBlIHBvbGx1dGlvbiBhdHRlbXB0IHVzaW5nICR7a2V5fSBwYXR0ZXJuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfVxuICApO1xuICBpZiAoaGFzUHJvdG9QYXR0ZXJuICYmIHN0cmljdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiW2JldHRlci1qc29uXSBQb3RlbnRpYWwgcHJvdG90eXBlIHBvbGx1dGlvbiBhdHRlbXB0IGRldGVjdGVkXCJcbiAgICApO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3Qgc2VjdXJlUmV2aXZlciA9IChrZXksIHZhbHVlMikgPT4ge1xuICAgICAgaWYgKGtleSA9PT0gXCJfX3Byb3RvX19cIiB8fCBrZXkgPT09IFwiY29uc3RydWN0b3JcIiAmJiB2YWx1ZTIgJiYgdHlwZW9mIHZhbHVlMiA9PT0gXCJvYmplY3RcIiAmJiBcInByb3RvdHlwZVwiIGluIHZhbHVlMikge1xuICAgICAgICBpZiAod2FybmluZ3MpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBgW2JldHRlci1qc29uXSBEcm9wcGluZyBcIiR7a2V5fVwiIGtleSB0byBwcmV2ZW50IHByb3RvdHlwZSBwb2xsdXRpb25gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKHBhcnNlRGF0ZXMgJiYgdHlwZW9mIHZhbHVlMiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBkYXRlID0gcGFyc2VJU09EYXRlKHZhbHVlMik7XG4gICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXZpdmVyID8gcmV2aXZlcihrZXksIHZhbHVlMikgOiB2YWx1ZTI7XG4gICAgfTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh0cmltbWVkLCBzZWN1cmVSZXZpdmVyKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZUpTT04odmFsdWUsIG9wdGlvbnMgPSB7IHN0cmljdDogdHJ1ZSB9KSB7XG4gIHJldHVybiBiZXR0ZXJKU09OUGFyc2UodmFsdWUsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgeyBwYXJzZUpTT04gYXMgcCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs\n");

/***/ })

};
;